bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getFile();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getFile();	  OffsetEntry    offsetEntry    =    entriesWithoutFile.get(ze);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
2	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getZipFile();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getZipFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getZipFile();	  OffsetEntry    offsetEntry    =    entriesWithoutFile.get(ze);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
3	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	147	None	replace
4	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getMethod();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getMethod();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getMethod();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  incompatible  types	147	None	replace
5	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
6	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	147	None	replace
7	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
8	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	147	None	replace
9	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ZERO;  [CE]  cannot  find  symbol  entryCount  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ZERO;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  cannot  find  symbol  entryCount	105	None	replace
10	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ZERO;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ZERO;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	105	None	replace
11	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  cannot  find  symbol  ZERO	105	None	replace
12	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ZERO  :  ze;  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ZERO  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ZERO  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	105	None	replace
13	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ZERO  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ZERO  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ZERO  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	105	None	replace
14	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_SIG;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_SIG;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_SIG;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  incompatible  types	105	None	replace
15	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
16	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0,  ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0,  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0,  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
17	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  2);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
18	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  4);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  4);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  4);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
19	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1,  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1,  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  1,  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
20	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  10);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  10);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  10);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
21	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getName();  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getName();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getName();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  cannot  find  symbol  entry	110	None	replace
22	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	110	None	replace
23	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	110	None	replace
24	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	110	None	replace
25	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getMethod();  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getMethod();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getMethod();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	non-compiled	[CE]  cannot  find  symbol  entry	122	None	replace
26	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	122	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	compilable	  [FE]  AssertionFailedError  	122	1	replace
28	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	compilable	  [FE]  AssertionFailedError  	122	1	replace
29	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	126	None	replace
30	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  -  1);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	126	None	replace
31	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  -  2);  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getSize()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	126	None	replace
32	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  +  1);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	126	None	replace
33	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ze;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	45	None	replace
34	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOUTUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOUTUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOUTUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	45	None	replace
35	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  ze;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entryCount  :  ze;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	45	None	replace
36	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ze;  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
37	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  dataOffset;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
38	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ze;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	46	None	replace
39	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZERO;  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZERO;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
40	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  entry.dataOffset  :  ze;  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  entry.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  entry.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
41	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze);	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8	137	None	replace
42	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryNamesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryNamesWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryNamesWithoutUTF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryNamesWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryNamesWithoutUTF8Flag	137	None	replace
43	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	121	None	replace
44	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  z  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	121	None	replace
45	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	121	None	replace
46	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	121	None	replace
47	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	121	None	replace
48	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMillis()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMillis()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMillis()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
49	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
50	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
51	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
52	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
53	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
54	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
55	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  2);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
56	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
57	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
58	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	31	None	replace
59	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	31	None	replace
60	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	31	None	replace
61	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getCompressedSize();  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	31	None	replace
62	[BUG]  [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
63	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
64	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	157	None	replace
65	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	157	None	replace
66	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	157	None	replace
67	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entry	157	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	37	1	replace
69	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	37	1	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	37	1	replace
71	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	37	1	replace
72	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrySet.get(ze);  [CE]  cannot  find  symbol  entrySet  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrySet.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrySet.get(ze);	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entrySet	136	None	replace
73	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
74	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
75	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(2);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
76	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
77	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
78	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
79	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
80	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInput());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInput());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInput());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
81	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getEncoding());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getEncoding());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getEncoding());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
82	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getVersion());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getVersion());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput(),  ze.getVersion());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
83	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
84	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	152	None	replace
85	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	152	None	replace
86	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entry	152	None	replace
87	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
88	[BUG]  [BUGGY]  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
89	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
90	[BUG]  [BUGGY]  Inflater  inflater  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
91	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
92	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
93	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  ';'  expected	101	None	replace
94	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  ZipException( " ");  }  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  ZipException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  throw  new  ZipException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
95	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  inflater  :  entriesWithoutUTF8Flag;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  inflater  :  entriesWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  inflater  :  entriesWithoutUTF8Flag;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    inflater;    	non-compiled	[CE]  incompatible  types	47	None	replace
96	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater.dataOffset;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater.dataOffset;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    inflater;    	non-compiled	[CE]  incompatible  types	47	None	replace
97	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
98	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	71	None	replace
99	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	71	None	replace
100	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	71	None	replace
101	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	71	None	replace
102	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	71	None	replace
103	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
104	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
105	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
106	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
107	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIG);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIG);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset(),  ZERO_SIG);	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
108	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
109	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entryCount.get(ze);    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	139	None	replace
110	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_LENGTH);  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO_LENGTH);	  OffsetEntry    offsetEntry    =    entryCount.get(ze);    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	139	None	replace
111	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
112	[BUG]  [BUGGY]  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
113	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
114	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	125	None	replace
115	[BUG]  [BUGGY]  File  offsetEntry  =  entries.get(ze.getSize());  ze  =  offsetEntry.get(ze.getSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  File  offsetEntry  =  entries.get(ze.getSize());  ze  =  offsetEntry.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	File  offsetEntry  =  entries.get(ze.getSize());  ze  =  offsetEntry.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
116	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
117	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	19	None	add
118	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  entry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  entry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  entry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
119	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
120	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
121	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
122	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  <?>  entry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
123	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  InputStream  inflater  =  entries.get(ze.getSize()  -  1);  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  InputStream  inflater  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    InputStream  inflater  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  incompatible  types	19	None	add
124	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
125	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
126	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	86	None	replace
127	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	86	None	replace
128	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	86	None	replace
129	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	86	None	replace
130	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
131	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
132	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getKey());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
133	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
134	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
135	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
136	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(0);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
137	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(0);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  nameMap.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  incompatible  types	14	None	replace
138	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  [CE]  cannot  find  symbol  entry  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  entry	14	None	replace
139	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(0);  [CE]  cannot  find  symbol  inflater  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  inflater	14	None	replace
140	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(1);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(1);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
141	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  +  1;	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
142	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputSize();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputSize();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
143	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInput();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInput();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInput();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
144	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getSize();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getSize();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	149	None	replace
145	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  -  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  -  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getSize()  -  1;	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
146	[BUG]  [BUGGY]  Entry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
147	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
148	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
149	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.entrySet().get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.entrySet().get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entry.entrySet().get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
150	[BUG]  [BUGGY]  ze  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	55	None	replace
151	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
152	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  name);  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  name);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  name);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  name	55	None	replace
153	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
154	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	55	None	replace
155	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  ze  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	55	None	replace
156	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	55	None	replace
157	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
158	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
159	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
160	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
161	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
162	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  +  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
163	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
164	[BUG]  [BUGGY]  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
165	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	103	None	replace
166	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	103	None	replace
167	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getCompressedSize();  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	103	None	replace
168	[BUG]  [BUGGY]  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
169	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
170	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
171	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataSize());  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataSize());  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataSize());  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
172	[BUG]  [BUGGY]  File  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  offsetEntry.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  File  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  offsetEntry.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	File  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  offsetEntry.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
173	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
174	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze);  [CE]  cannot  find  symbol  entryNames  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryNames.get(ze);	  OffsetEntry    offsetEntry    =    names.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryNames	12	None	replace
175	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getName();	  OffsetEntry    offsetEntry    =    names.get(ze);    	non-compiled	[CE]  incompatible  types	12	None	replace
176	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getNames();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getNames();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getNames();	  OffsetEntry    offsetEntry    =    names.get(ze);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
177	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entry	61	None	replace
178	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  /  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  /  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	61	None	replace
179	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getId());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getId());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getId());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
180	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
181	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
182	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	3	None	replace
183	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	3	None	replace
184	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
185	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	3	None	replace
186	[BUG]  [BUGGY]  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	146	None	replace
187	[BUG]  [BUGGY]  Inflater  inflater  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	146	None	replace
188	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	146	None	replace
189	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  InputStream  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	146	None	replace
190	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod(),  inflater);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod(),  inflater);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod(),  inflater);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	146	None	replace
191	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  InputStream  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	146	None	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	compilable	  [FE]  AssertionFailedError  	75	1	replace
193	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  +  1);  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	compilable	  [FE]  AssertionFailedError  	75	1	replace
194	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
195	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
196	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
197	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	83	None	replace
198	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	83	None	replace
199	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	83	None	replace
200	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	83	None	replace
201	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStartTime());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStartTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStartTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
202	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
203	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
204	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
205	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMillis());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMillis());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getMillis());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
206	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
207	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  ze  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	128	None	replace
208	[BUG]  [BUGGY]  ze  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	128	None	replace
209	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	128	None	replace
210	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	128	None	replace
211	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getKey());  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
212	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	128	None	replace
213	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  ze  :  ze;  [CE]  cannot  find  symbol  entryInflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  ze  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryInflater?  ze  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryInflater	142	None	replace
214	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  inflater;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  inflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  inflater;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  incompatible  types	142	None	replace
215	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  ze;  [CE]  cannot  find  symbol  entriesInflater  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entriesInflater	142	None	replace
216	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesInflater  :  ze;  [CE]  cannot  find  symbol  entryCount  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesInflater  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entriesInflater  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryCount	142	None	replace
217	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater?  entriesInflater  :  ze;  [CE]  cannot  find  symbol  inflater  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  inflater?  entriesInflater  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater?  entriesInflater  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  inflater	142	None	replace
218	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  ze  :  entriesInflater;  [CE]  cannot  find  symbol  entryInflater  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  ze  :  entriesInflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryInflater?  ze  :  entriesInflater;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryInflater	142	None	replace
219	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
220	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
221	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	6	None	replace
222	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	6	None	replace
223	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
224	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
225	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
226	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	32	None	replace
227	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
228	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	32	None	replace
229	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	32	None	replace
230	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	32	None	replace
231	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
232	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
233	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
234	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
235	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
236	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getVersion());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getVersion());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset(),  ze.getVersion());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
237	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
238	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
239	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
240	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocalFile());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocalFile());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLocalFile());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
241	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getVersion());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getVersion());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze.getVersion());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
242	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalFile());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalFile());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalFile());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
243	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
244	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
245	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getUpperCase());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getUpperCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getUpperCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
246	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLowerCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
247	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getUpperCase());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getUpperCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getUpperCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
248	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
249	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
250	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(0);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(0);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
251	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getName());  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getName());	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
252	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(null);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(null);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(null);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
253	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getMethod());	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
254	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getCompressedSize());	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
255	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getInputFile();  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getInputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getInputFile();	  OffsetEntry    offsetEntry    =    ze.getInputFile();    	non-compiled	[CE]  cannot  find  symbol  entry	42	None	replace
256	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputFile()  +  File.separator;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputFile()  +  File.separator;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getInputFile()  +  File.separator;	  OffsetEntry    offsetEntry    =    ze.getInputFile();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
257	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
258	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
259	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
260	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
261	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterEncoding());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterEncoding());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterEncoding());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
262	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
263	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entry	98	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  /  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  /  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
265	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  /  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  /  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  /  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
266	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrys.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entrys  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrys.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrys.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entrys	98	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(1);    	compilable	  [FE]  AssertionFailedError  	67	1	replace
268	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(1);    	compilable	  [FE]  AssertionFailedError  	67	1	replace
269	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	67	None	replace
270	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
271	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
272	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
273	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(2);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
274	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
275	[BUG]  [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entry.get(1);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entry.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entry.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
276	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entry	81	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  /  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  /  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
278	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  /  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  /  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  /  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
279	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
280	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
281	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
282	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMask());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMask());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation(),  ze.getMask());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
283	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocation());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocation());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocation());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
284	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocation());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocation());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLocation());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
285	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
286	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	72	None	replace
287	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	72	None	replace
288	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	72	None	replace
289	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.getValue();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
290	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
291	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
292	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEnd()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
293	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEnd(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
294	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEnd());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
295	[BUG]  [BUGGY]  Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
296	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
297	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
298	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
299	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.getValue();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	10	None	replace
300	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_EOCD_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_EOCD_FOR_FILENAME_LENGTH;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO_EOCD_FOR_FILENAME_LENGTH;	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_FOR_FILENAME_LENGTH	10	None	replace
301	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
302	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	69	None	replace
303	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	69	None	replace
304	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	69	None	replace
305	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry(entry.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry(entry.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getEntry(entry.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	69	None	replace
306	[BUG]  [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.getInflater();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entriesWithoutUTF8Flag.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	130	None	replace
307	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInflater();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	130	None	replace
308	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getEntry();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getEntry();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	130	None	replace
309	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
310	[BUG]  [BUGGY]  Entry  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
311	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
312	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	70	None	replace
313	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	70	None	replace
314	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	70	None	replace
315	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	70	None	replace
316	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
317	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
318	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	85	None	replace
319	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	85	None	replace
320	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	85	None	replace
321	[BUG]  [BUGGY]  ze  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	74	None	replace
322	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	74	None	replace
323	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	74	None	replace
324	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  ze  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	74	None	replace
325	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	74	None	replace
326	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  dataOffset  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	74	None	replace
327	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  ze  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	74	None	replace
328	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
329	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
330	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
331	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	123	None	replace
332	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	123	None	replace
333	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
334	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
335	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
336	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	35	None	replace
337	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	35	None	replace
338	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	35	None	replace
339	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	35	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
341	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  *  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  *  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
343	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  *  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  *  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  *  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	compilable	  [FE]  AssertionFailedError  	63	1	replace
344	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  null;  [CE]  cannot  find  symbol  entryCount  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  null;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  cannot  find  symbol  entryCount	48	None	replace
345	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  null;  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  null;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	48	None	replace
346	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  null;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  null;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	48	None	replace
347	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  null;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  null;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	48	None	replace
348	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  null?  entriesWithoutUTF8Flag  :  ze;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  null?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  null?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  incompatible  types	48	None	replace
349	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  new  ZipArchiveEntry();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  new  ZipArchiveEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  new  ZipArchiveEntry();	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  incompatible  types	48	None	replace
350	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entries();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entries();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entries();	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
351	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipFile();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithZipFile();	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
352	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithSize;  [CE]  cannot  find  symbol  entriesWithSize  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithSize;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithSize;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithSize	113	None	replace
353	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputStream();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getInputStream();	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
354	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipFileNumber;  [CE]  cannot  find  symbol  entriesWithZipFileNumber  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipFileNumber;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithZipFileNumber;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithZipFileNumber	113	None	replace
355	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getEntry();	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
356	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	127	None	replace
357	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getTime()  -  1);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entries.get(ze.getTime()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	127	None	replace
358	[BUG]  [BUGGY]  Encoder  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Encoder  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Encoder  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
359	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
360	[BUG]  [BUGGY]  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
361	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
362	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	89	None	replace
363	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	89	None	replace
364	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIG);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIG);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIG);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	89	None	replace
365	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	89	None	replace
366	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
367	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	73	None	replace
368	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	73	None	replace
369	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  z  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	73	None	replace
370	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	73	None	replace
371	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	73	None	replace
372	[BUG]  [BUGGY]  InputStream  inflater  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
373	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
374	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
375	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
376	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	158	None	replace
377	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  for(int  i  =  0;  i  <  entries.size();  ++i)  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	158	None	replace
378	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  ZipException( " ");  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  ZipException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  throw  new  ZipException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
379	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
380	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
381	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	34	None	replace
382	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	34	None	replace
383	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	34	None	replace
384	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	34	None	replace
385	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	49	None	replace
386	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	49	None	replace
387	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	80	None	add
388	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
389	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
390	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  entry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  entry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  entry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
391	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
392	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <?>  entry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <?>  entry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  <?>  entry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
393	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	80	None	add
394	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  ze  =  entries.get(ze.getTime()  +  1);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  ze  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    ze  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  incompatible  types	80	None	add
395	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
396	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
397	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	33	None	replace
398	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	33	None	replace
399	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	33	None	replace
400	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  z.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  z  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  z.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  z.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  z	33	None	replace
401	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
402	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
403	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	5	None	replace
404	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	5	None	replace
405	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	5	None	replace
406	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName())-  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName())-  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName())-  1;	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	56	None	replace
407	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
408	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
409	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocalName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLocalName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLocalName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
410	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
411	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMask());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMask());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze.getMask());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
412	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffset()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffset()  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOffset()  +  1;	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
413	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDataOffset();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDataOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getDataOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
414	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOriginalOffset();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOriginalOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOriginalOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
415	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOwner();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOwner();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOwner();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
416	[BUG]  [BUGGY]  InputStream  inflater  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
417	[BUG]  [BUGGY]  Inflater  inflater  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
418	[BUG]  [BUGGY]  FileInputStream  inflater  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  FileInputStream  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	FileInputStream  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
419	[BUG]  [BUGGY]  inflater  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  inflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  inflater	150	None	replace
420	[BUG]  [BUGGY]  InputStream  inflater  =  ze.getName();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  ze.getName();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  ze.getName();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	82	1	replace
422	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	82	1	replace
423	[BUG]  [BUGGY]  InputStream  inflater  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  InputStream  inflater  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	InputStream  inflater  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
424	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
425	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
426	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
427	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	153	None	replace
428	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  IllegalStateException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
429	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  ZipException( " ");  }  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  ZipException( " ");  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  throw  new  ZipException( " ");  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
430	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
431	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
432	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCharno());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCharno());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getCharno());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
433	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
434	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
435	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getVersion());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getVersion());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno(),  ze.getVersion());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
436	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
437	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	120	None	replace
438	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	120	None	replace
439	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	120	None	replace
440	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  z.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  z	120	None	replace
441	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	120	None	replace
442	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
443	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
444	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	124	None	replace
445	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	124	None	replace
446	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	124	None	replace
447	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getSize();  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	124	None	replace
448	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
449	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
450	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	84	None	replace
451	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	84	None	replace
452	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_EOCD_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	84	None	replace
453	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	84	None	replace
454	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  dataOffset  :  ze;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	141	None	replace
455	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ze;  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	141	None	replace
456	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  zip64_EOCD_LOCATOR_OFFSET  :  ze;  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  zip64_EOCD_LOCATOR_OFFSET  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  zip64_EOCD_LOCATOR_OFFSET  :  ze;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	141	None	replace
457	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZERO;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZERO;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	141	None	replace
458	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ZERO;  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset?  ze.dataOffset  :  ZERO;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	141	None	replace
459	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.values();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.values();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.values();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
460	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.keySet();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.keySet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.keySet();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
461	[BUG]  [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.entrySet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.entrySet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entriesWithoutUTF8Flag.entrySet();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	132	None	replace
462	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.entrySet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.entrySet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entriesWithoutUTF8Flag.entrySet();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	132	None	replace
463	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.toArray();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.toArray();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.toArray();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
464	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet()  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet()  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.entrySet()  +  1;	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
465	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.entrySet().get(ze);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.entrySet().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
466	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag().get(ze);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
467	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.entrySet().get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.entrySet().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	154	None	replace
468	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrySet().get(ze);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrySet().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
469	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entrySet().get(ze);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entrySet().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
470	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.entrySet().get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flags  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.entrySet().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flags	154	None	replace
471	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	144	None	replace
472	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  start);  [CE]  cannot  find  symbol  start  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  start);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  start);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  start	144	None	replace
473	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  +  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
474	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE,  ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE,  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE,  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	144	None	replace
475	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
476	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
477	[BUG]  [BUGGY]  Inflater  ze  =  entries.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	109	None	replace
478	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  ze  =  entries.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	109	None	replace
479	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Inflater  ze  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	109	None	replace
480	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
481	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  Inflater  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	109	None	replace
482	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Inflater  ze  =  entries.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	109	None	replace
483	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Inflater  ze  =  entries.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	109	None	replace
484	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	add
485	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
486	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
487	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
488	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
489	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
490	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    InputStream  inflater  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  incompatible  types	62	None	add
491	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
492	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	50	None	replace
493	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	50	None	replace
494	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getName();  Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	50	None	replace
495	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	50	None	replace
496	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
497	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getSize();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	159	None	replace
498	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
499	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	159	None	replace
500	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
501	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	93	None	replace
502	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	93	None	replace
503	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
504	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(2);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
505	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	add
506	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
507	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
508	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
509	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <?>  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <?>  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
510	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
511	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  InputStream  inflater  =  entries.get(ze.getTime()  -  1);  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  InputStream  inflater  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    InputStream  inflater  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  incompatible  types	76	None	add
512	[BUG]  [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
513	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	52	None	replace
514	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	52	None	replace
515	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getName();  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	52	None	replace
516	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	52	None	replace
517	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
518	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	54	None	replace
519	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	54	None	replace
520	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	54	None	replace
521	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  z  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  z	54	None	replace
522	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	54	None	replace
523	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
524	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	148	None	replace
525	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  ArrayList  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
526	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue().get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entry	148	None	replace
527	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getName();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getName();  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  incompatible  types	151	None	replace
528	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	151	None	replace
529	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
530	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	151	None	replace
531	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(1);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(1);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entries.get(0);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	27	None	replace
532	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(0);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(0);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entries.get(0);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	27	None	replace
533	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(0);  [CE]  inconvertible  types  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(0);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entries.get(0);    	non-compiled	[CE]  inconvertible  types	27	None	replace
534	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	97	None	add
535	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
536	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  entry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  entry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  entry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
537	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
538	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <?>  entry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
539	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	97	None	add
540	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
541	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  ze  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  ze  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    ze  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  incompatible  types	97	None	add
542	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDestination();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDestination();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getDestination();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
543	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpenFile();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpenFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOpenFile();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
544	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getOutputFile();  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getOutputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getOutputFile();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol  entry	112	None	replace
545	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  2);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  2);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	115	None	replace
546	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1,  name);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1,  name);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1,  name);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	115	None	replace
547	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1L);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1L);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1L);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	115	None	replace
548	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1  +  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	115	None	replace
549	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
550	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
551	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
552	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
553	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
554	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  0);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
555	[BUG]  [BUGGY]  File  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  File  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	File  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	36	None	replace
556	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
557	[BUG]  [BUGGY]  Entry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
558	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getValue();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
559	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze);  [CE]  cannot  find  symbol  entry  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze);	  OffsetEntry    offsetEntry    =    ze.get(entry);    	non-compiled	[CE]  cannot  find  symbol  entry	13	None	replace
560	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flags  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags.get(ze);	  OffsetEntry    offsetEntry    =    ze.get(entry);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flags	13	None	replace
561	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
562	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
563	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
564	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(2);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
565	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
566	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
567	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(entry.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(entry.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(entry.getTime()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
568	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
569	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
570	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
571	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(2);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
572	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entry	117	None	replace
573	[BUG]  [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
574	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	51	None	replace
575	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	51	None	replace
576	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	51	None	replace
577	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	51	None	replace
578	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	51	None	replace
579	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze.getMethod());  [CE]  cannot  find  symbol  entryCount  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entryCount	138	None	replace
580	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(ze.getMethod());  [CE]  cannot  find  symbol  inflater  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  inflater	138	None	replace
581	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getMethod());  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  nameMap.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	138	None	replace
582	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getEntry(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getEntry(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
583	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  ZERO;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entryCount  :  ZERO;	  OffsetEntry    offsetEntry    =    entryCount?    entryCount    :    ze;    	non-compiled	[CE]  incompatible  types	104	None	replace
584	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.getCompressedSize();  [CE]  cannot  find  symbol  entryCount  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.getCompressedSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.getCompressedSize();	  OffsetEntry    offsetEntry    =    entryCount?    entryCount    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryCount	104	None	replace
585	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entryCount  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryCount	43	None	replace
586	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.dataOffset;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.dataOffset;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	43	None	replace
587	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesWithoutUTF8Flag;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesWithoutUTF8Flag;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	43	None	replace
588	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	43	None	replace
589	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getName();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getName();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getName();	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	43	None	replace
590	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getMethod();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getMethod();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze.getMethod();	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	43	None	replace
591	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  ze;  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag?  ze  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	43	None	replace
592	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
593	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
594	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
595	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getEndOffset());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getEndOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ze.getEndOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
596	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
597	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIG);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIG);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset(),  ZERO_SIG);	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
598	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
599	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
600	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getEnd());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
601	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
602	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	60	None	add
603	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  <?>  offsetEntry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
604	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  K,  V>  entry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  <  K,  V>  entry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
605	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  entry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  entry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  entry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
606	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
607	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <?>  entry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <?>  entry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  <?>  entry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
608	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	60	None	add
609	[BUG]  [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.getInputStream();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entriesWithoutUTF8Flag.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entriesWithoutUTF8Flag.getInputStream();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	133	None	replace
610	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInputStream();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entriesWithoutUTF8Flag.getInputStream();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	133	None	replace
611	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(true);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(true);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(true);	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
612	[BUG]  [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag.getInputStream();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  this.entriesWithoutUTF8Flag.getInputStream();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
613	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.class);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.class);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.class);	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
614	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream( "UTF-8 ");  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream( "UTF-8 ");  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream( "UTF-8 ");	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
615	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSource();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSource();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getSource();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
616	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getMethod());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getMethod());	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(int)	38	None	replace
617	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getCompressedSize());  [CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  no  suitable  constructor  found  for  ZipArchiveEntry(long)	38	None	replace
618	[BUG]  [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  entry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
619	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
620	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
621	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ZERO_SIZE);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
622	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getVersion());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getVersion());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getVersion());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
623	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getEncoding());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getEncoding());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getEncoding());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
624	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  0);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
625	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
626	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
627	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  ze.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
628	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  offsetEntry.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
629	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag,  ze.getValue();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag,  ze.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag,  ze.getValue();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  ';'  expected	25	None	replace
630	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getKey();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getKey();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getKey();	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
631	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze);  [CE]  cannot  find  symbol  entryMap  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze);	  OffsetEntry    offsetEntry    =    nameMap.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryMap	9	None	replace
632	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getName());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  nameMap.get(ze.getName());	  OffsetEntry    offsetEntry    =    nameMap.get(ze);    	non-compiled	[CE]  incompatible  types	9	None	replace
633	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getNameMap().get(name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getNameMap().get(name);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getNameMap().get(name);	  OffsetEntry    offsetEntry    =    nameMap.get(ze);    	non-compiled	[CE]  cannot  find  symbol  name	9	None	replace
634	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getKey());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze.getKey());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  nameMap.get(ze.getKey());	  OffsetEntry    offsetEntry    =    nameMap.get(ze);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
635	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(entry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(entry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(entry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entry	107	None	replace
636	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(remaining);  [CE]  cannot  find  symbol  remaining  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(remaining);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(remaining);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  remaining	107	None	replace
637	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	107	None	replace
638	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	107	None	replace
639	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(i);  [CE]  cannot  find  symbol  i  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(i);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(i);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  i	107	None	replace
640	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(offsetEntry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(offsetEntry);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(offsetEntry);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
641	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getName());	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
642	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getKey());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getKey());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getKey());	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
643	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(entry);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(entry);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(entry);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
644	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.getMethod());	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
645	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.toString());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.toString());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze.toString());	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
646	[BUG]  [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
647	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
648	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
649	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	2	None	replace
650	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
651	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  [CE]  cannot  find  symbol  dataOffset  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	68	None	replace
652	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  false);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	68	None	replace
653	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithOUTUTF8Flag.clone();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithOUTUTF8Flag.clone();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithOUTUTF8Flag.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	24	None	replace
654	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.getValue();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	24	None	replace
655	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithout0Flag.clone();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithout0Flag.clone();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithout0Flag.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	24	None	replace
656	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.data;  [CE]  cannot  find  symbol  data  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.data;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.data;	  OffsetEntry    offsetEntry    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  data	39	None	replace
657	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataLength;  [CE]  cannot  find  symbol  dataLength  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataLength;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataLength;	  OffsetEntry    offsetEntry    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataLength	39	None	replace
658	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataInput;  [CE]  cannot  find  symbol  dataInput  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataInput;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataInput;	  OffsetEntry    offsetEntry    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataInput	39	None	replace
659	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataStart;  [CE]  cannot  find  symbol  dataStart  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataStart;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataStart;	  OffsetEntry    offsetEntry    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataStart	39	None	replace
660	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataSet;  [CE]  cannot  find  symbol  dataSet  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataSet;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataSet;	  OffsetEntry    offsetEntry    =    ze.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataSet	39	None	replace
661	[BUG]  [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
662	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
663	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	7	None	replace
664	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
665	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  0);  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
666	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	7	None	replace
667	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.getValue();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
668	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getKey();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getKey();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getKey();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
669	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.clone();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.clone();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
670	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag;	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
671	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue()  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue()  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue()  +  1;	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
672	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  entry  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entry.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	156	None	replace
673	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
674	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
675	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
676	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getLowerCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
677	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getOwner());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getOwner());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getOwner());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
678	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getOwner());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getOwner());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getOwner());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
679	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
680	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	108	None	replace
681	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	108	None	replace
682	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	108	None	replace
683	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
684	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	108	None	replace
685	[BUG]  [BUGGY]  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
686	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.dataOffset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
687	[BUG]  [BUGGY]  Entry  entry  =  entries.get(0,  offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(0,  offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(0,  offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
688	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(ze.dataOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(ze.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(ze.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
689	[BUG]  [BUGGY]  Entry  entry  =  entries.get(entry.dataOffset);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(entry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(entry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
690	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(entry.dataOffset);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(entry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(entry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
691	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    OffsetEntry  offsetEntry  =  entries.get(1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	add
692	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    OffsetEntry  offsetEntry  =  entries.get(2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	add
693	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(0);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    OffsetEntry  offsetEntry  =  entries.get(0);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	66	None	add
694	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  K,  V>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  K,  V>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <  K,  V>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
695	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
696	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <  K,  V>  entry  =  entries.get(1);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
697	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <?>  offsetEntry  =  entries.get(1);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
698	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <?>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
699	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
700	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
701	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	87	None	replace
702	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	87	None	replace
703	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	87	None	replace
704	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	87	None	replace
705	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZipArchiveEntry.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZipArchiveEntry.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZipArchiveEntry.dataOffset;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
706	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_OFFSET_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_OFFSET_FOR_FILENAME_LENGTH;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO_OFFSET_FOR_FILENAME_LENGTH;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	40	None	replace
707	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH);	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	40	None	replace
708	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  dataOffset);  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  new  ZipArchiveEntry(zip64_EOCD_FOR_FILENAME_LENGTH,  dataOffset);	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	40	None	replace
709	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInflater();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getInflater();	  OffsetEntry    offsetEntry    =    inflater.get(ze);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
710	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(inflater);  [CE]  cannot  find  symbol  inflater  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(inflater);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(inflater);	  OffsetEntry    offsetEntry    =    inflater.get(ze);    	non-compiled	[CE]  cannot  find  symbol  inflater	11	None	replace
711	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.iterator().next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.iterator().next();	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
712	[BUG]  [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  entry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
713	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	30	None	replace
714	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
715	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	53	None	replace
716	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIZE);  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	53	None	replace
717	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  z  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  z.getName());  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  z	53	None	replace
718	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_SIG  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_SIG);  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIG	53	None	replace
719	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  0);  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	53	None	replace
720	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize()  +  1;  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize()  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getCompressedSize()  +  1;	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  incompatible  types	29	None	replace
721	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize()  -  1;  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize()  -  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getCompressedSize()  -  1;	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  incompatible  types	29	None	replace
722	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpenSize();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpenSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOpenSize();	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
723	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  [CE]  incompatible  types  [FE]                                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getSize();	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  incompatible  types	29	None	replace
724	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  ';'  expected	131	None	replace
725	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separatorChar;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separatorChar;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separatorChar;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	131	None	replace
726	[BUG]  [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag;  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  offsetEntry  =  entriesWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  offsetEntry  =  entriesWithoutUTF8Flag;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	131	None	replace
727	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag,  offsetEntry.dataOffset);	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  ';'  expected	131	None	replace
728	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  inflater);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  inflater);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag,  inflater);	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  ';'  expected	131	None	replace
729	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  +  1;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  +  1;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag  +  1;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	131	None	replace
730	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
731	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
732	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	99	None	replace
733	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	99	None	replace
734	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	99	None	replace
735	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	99	None	replace
736	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    inflater?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	44	None	replace
737	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    inflater?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	44	None	replace
738	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entryInflater  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryInflater?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    inflater?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryInflater	44	None	replace
739	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.inflater;  [CE]  cannot  find  symbol  inflater  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.inflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.inflater;	  OffsetEntry    offsetEntry    =    inflater;    	non-compiled	[CE]  cannot  find  symbol  inflater	41	None	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  null;	  OffsetEntry    offsetEntry    =    inflater;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
741	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  null;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  null;	  OffsetEntry    offsetEntry    =    inflater;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
742	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  getInputStream();  [CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  getInputStream();	  OffsetEntry    offsetEntry    =    inflater;    	non-compiled	[CE]  method  getInputStream  in  class  ZipFile  cannot  be  applied  to  given  types;	41	None	replace
743	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	126	None	replace
744	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	126	None	replace
745	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	126	None	replace
746	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	126	None	replace
747	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	126	None	replace
748	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getValue());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getValue());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
749	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getValue());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getValue());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getValue());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
750	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getValue());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getValue());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getValue());	  OffsetEntry    offsetEntry    =    entries.get(ze.getValue());    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
751	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  z.getValue();  [CE]  cannot  find  symbol  z  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  z.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  z.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  z	10	None	replace
752	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_LENGTH.getValue();  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_LENGTH.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO_LENGTH.getValue();	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	10	None	replace
753	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
754	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  entriesWithoutUTF8  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8	102	None	replace
755	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getInput());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getInput());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getInput());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
756	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInput());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInput());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInput());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInput());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
757	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEndTime());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEndTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getEndTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
758	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getEndTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getEndTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getEndTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
759	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	69	None	replace
760	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entry.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entry.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entry.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
761	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	33	None	replace
762	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	33	None	replace
763	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	33	None	replace
764	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	33	None	replace
765	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.dataOffset;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesWithoutUTF8Flag  :  ze.dataOffset;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	43	None	replace
766	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	31	None	replace
767	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	31	None	replace
768	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	31	None	replace
769	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineno());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineno());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineno());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineno());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
770	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF7Flag  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF7Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF7Flag  :  ze;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	45	None	replace
771	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ZERO;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entryWithoutUTF8Flag  :  ZERO;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	45	None	replace
772	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffsetEntry();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffsetEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOffsetEntry();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
773	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOriginalEntry();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOriginalEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOriginalEntry();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
774	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getZipEntry();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getZipEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getZipEntry();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
775	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	117	None	replace
776	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	117	None	replace
777	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	2	None	replace
778	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	2	None	replace
779	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	2	None	replace
780	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
781	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getMethod();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getMethod();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getMethod();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
782	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
783	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getEntry(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	36	None	replace
784	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
785	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	101	None	replace
786	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  InputStream  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	101	None	replace
787	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
788	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName(),  ze);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
789	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getLocalName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
790	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalFile());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalFile());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocalFile());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
791	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile(),  ze);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalFile());    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
792	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	140	None	replace
793	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entry	140	None	replace
794	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(true);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(true);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(true);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
795	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(zipEnd);  [CE]  cannot  find  symbol  zipEnd  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(zipEnd);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(zipEnd);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol  zipEnd	134	None	replace
796	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  insertDummyByte  :  ze;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  insertDummyByte  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  insertDummyByte  :  ze;	  OffsetEntry    offsetEntry    =    entryCount?    entryCount    :    ze;    	non-compiled	[CE]  incompatible  types	104	None	replace
797	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.dataOffset;  [CE]  cannot  find  symbol  entryCount  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze.dataOffset;	  OffsetEntry    offsetEntry    =    entryCount?    entryCount    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryCount	104	None	replace
798	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	73	None	replace
799	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <?>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	73	None	replace
800	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  InputStream  inflater  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  InputStream  inflater  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  InputStream  inflater  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
801	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	153	None	replace
802	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  InputStream  inflater  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  InputStream  inflater  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  InputStream  inflater  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	153	None	replace
803	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	35	None	replace
804	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	35	None	replace
805	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	35	None	replace
806	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getMethod()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getMethod()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getMethod()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
807	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getMethod()  -  1);  [CE]  cannot  find  symbol  entriesWithoutUTF8  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8	75	None	replace
808	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocation());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocation());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLocation());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
809	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutFile.get(ze);  [CE]  cannot  find  symbol  entryWithoutFile  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutFile.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutFile.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutFile.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutFile	155	None	replace
810	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  archive.get(ze);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  archive.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  archive.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutFile.get(ze);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
811	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOffset());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
812	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getOffset());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOffset());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
813	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	124	None	replace
814	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	124	None	replace
815	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  archive.getInputFile();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  archive.getInputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  archive.getInputFile();	  OffsetEntry    offsetEntry    =    ze.getInputFile();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
816	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO.getInputFile();  [CE]  cannot  find  symbol  ZERO  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO.getInputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO.getInputFile();	  OffsetEntry    offsetEntry    =    ze.getInputFile();    	non-compiled	[CE]  cannot  find  symbol  ZERO	42	None	replace
817	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  z.getInputFile();  [CE]  cannot  find  symbol  z  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  z.getInputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  z.getInputFile();	  OffsetEntry    offsetEntry    =    ze.getInputFile();    	non-compiled	[CE]  cannot  find  symbol  z	42	None	replace
818	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separator;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separator;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag  |  File.separator;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	131	None	replace
819	[BUG]  [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  this.entriesWithoutUTF8Flag;	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	131	None	replace
820	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags().get(ze);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flags().get(ze);	  OffsetEntry    offsetEntry    =    entry.entrySet().get(ze);    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
821	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	5	None	replace
822	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	5	None	replace
823	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	5	None	replace
824	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  remaining);  [CE]  cannot  find  symbol  remaining  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  remaining);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  remaining);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  remaining	144	None	replace
825	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  -  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
826	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  inflater);  [CE]  cannot  find  symbol  inflater  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  inflater);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  inflater);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  inflater	144	None	replace
827	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO);  [CE]  cannot  find  symbol  ZERO  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ZERO);	  OffsetEntry    offsetEntry    =    entryCount.get(ze);    	non-compiled	[CE]  cannot  find  symbol  ZERO	139	None	replace
828	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ce);  [CE]  cannot  find  symbol  ce  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ce);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ce);	  OffsetEntry    offsetEntry    =    entryCount.get(ze);    	non-compiled	[CE]  cannot  find  symbol  ce	139	None	replace
829	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	51	None	replace
830	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	51	None	replace
831	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
832	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	51	None	replace
833	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCounts.get(ze);  [CE]  cannot  find  symbol  entryCounts  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCounts.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCounts.get(ze);	  OffsetEntry    offsetEntry    =    names.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryCounts	12	None	replace
834	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getIME());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getIME());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getIME());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
835	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	34	None	replace
836	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	34	None	replace
837	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <?>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	34	None	replace
838	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  entriesInflater  :  ze;  [CE]  cannot  find  symbol  entryInflater  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryInflater?  entriesInflater  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryInflater?  entriesInflater  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryInflater	142	None	replace
839	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesInflater  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesInflater  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entriesInflater  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	142	None	replace
840	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  inflater;  [CE]  cannot  find  symbol  entriesInflater  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  inflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesInflater?  ze  :  inflater;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entriesInflater	142	None	replace
841	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getStart());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getStart());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getStart());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
842	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getStart());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getStart());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getStart());	  OffsetEntry    offsetEntry    =    entries.get(ze.getStart());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
843	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
844	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OutputStream  ze  =  entries.get(ze.getTime()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OutputStream  ze  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    OutputStream  ze  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
845	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  +  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	80	None	add
846	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLength());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
847	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLength());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
848	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	50	None	replace
849	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
850	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entry.getValue()  :  null;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entry.getValue()  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag?  entry.getValue()  :  null;	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
851	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  getEntry(entry.getValue());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  getEntry(entry.getValue());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  getEntry(entry.getValue());	  Entry    <    ZipArchiveEntry>    entry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
852	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(1);  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entry	93	None	replace
853	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	127	None	replace
854	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	127	None	replace
855	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	127	None	replace
856	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getTime());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Inflater  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	127	None	replace
857	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry(ZipArchiveEntry.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry(ZipArchiveEntry.  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry(ZipArchiveEntry.	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  <identifier>  expected	127	None	replace
858	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
859	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	62	None	add
860	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  ze  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  ze  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    ze  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  incompatible  types	62	None	add
861	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
862	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO;  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO;	  OffsetEntry    offsetEntry    =    inflater;    	non-compiled	[CE]  cannot  find  symbol  ZERO	41	None	replace
863	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_EOCD_LOCATOR_OFFSET;  [CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO_EOCD_LOCATOR_OFFSET;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO_EOCD_LOCATOR_OFFSET;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_LOCATOR_OFFSET	40	None	replace
864	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  zipEncoding.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  zipEncoding.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  zipEncoding.dataOffset;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	40	None	replace
865	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	152	None	replace
866	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	152	None	replace
867	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  dataOffset	152	None	replace
868	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	147	None	replace
869	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	147	None	replace
870	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	147	None	replace
871	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  cannot  find  symbol  entry	110	None	replace
872	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	120	None	replace
873	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	120	None	replace
874	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getData());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getData());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
875	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getData());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getData());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
876	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze);	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
877	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	83	None	replace
878	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	83	None	replace
879	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	84	None	replace
880	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	84	None	replace
881	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	84	None	replace
882	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Inflater  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	109	None	replace
883	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  Inflater  ze  =  entries.get(ze.getName()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
884	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLowerCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
885	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getLowerCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase(),  ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
886	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLowerCase());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLowerCase());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
887	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getFullName());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getFullName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getFullName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
888	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce.getName());  [CE]  cannot  find  symbol  ce  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ce.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ce.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  ce	61	None	replace
889	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_UNKNOWN;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_UNKNOWN;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO_UNKNOWN;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ZERO;    	non-compiled	[CE]  incompatible  types	105	None	replace
890	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	100	None	replace
891	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
892	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
893	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	100	None	replace
894	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  inflater  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  inflater  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  inflater  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    inflater;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	47	None	replace
895	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName()    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	56	None	replace
896	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getIME()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getIME()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getIME()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
897	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	87	None	replace
898	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	87	None	replace
899	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	87	None	replace
900	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getRawOffset());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getRawOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getRawOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
901	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getRawOffset());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getRawOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getRawOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getRawOffset());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
902	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	6	None	replace
903	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	6	None	replace
904	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	6	None	replace
905	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	99	None	replace
906	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	99	None	replace
907	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	99	None	replace
908	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	89	None	replace
909	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  Zip>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  Zip>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  Zip>  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	89	None	replace
910	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    Zip>    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	89	None	replace
911	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  zipEncoding);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  zipEncoding);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  zipEncoding);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	68	None	replace
912	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	68	None	replace
913	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	68	None	replace
914	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getEntrySet();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getEntrySet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getEntrySet();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
915	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	92	None	replace
916	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	92	None	replace
917	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entry	92	None	replace
918	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getEnd());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getEnd());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEnd());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
919	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCountsWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryCountsWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCountsWithoutUTF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCountsWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryCountsWithoutUTF8Flag	137	None	replace
920	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutEOF8Flag.get(ze);  [CE]  cannot  find  symbol  entriesWithoutEOF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutEOF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutEOF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutEOF8Flag	137	None	replace
921	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  ze  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  ze  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  ze  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	55	None	replace
922	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  ze  =  entries.get(ze.getName());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	55	None	replace
923	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  dataOffset  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	55	None	replace
924	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getName();  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getName();  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getName();  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	55	None	replace
925	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	55	None	replace
926	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	55	None	replace
927	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  ze  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	55	None	replace
928	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
929	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	7	None	replace
930	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <?>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	7	None	replace
931	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	108	None	replace
932	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
933	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	108	None	replace
934	[BUG]  [BUGGY]  Inflater  ze  =  offsetEntry.getInputStream();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  offsetEntry.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  offsetEntry.getInputStream();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
935	[BUG]  [BUGGY]  Inflater  ze  =  entryWithoutUTF8Flag.getInputStream();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entryWithoutUTF8Flag.getInputStream();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entryWithoutUTF8Flag.getInputStream();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
936	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  null;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entryCount  :  null;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entryCount  :  null;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  incompatible  types	48	None	replace
937	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	94	None	replace
938	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	49	None	replace
939	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	49	None	replace
940	[BUG]  [BUGGY]  Inflater  inflater  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  inflater  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  inflater  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	49	None	replace
941	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  ';'  expected	49	None	replace
942	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	86	None	replace
943	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  Entry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    entry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	86	None	replace
944	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithUTF8Flag;  [CE]  cannot  find  symbol  entriesWithUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithUTF8Flag;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithUTF8Flag	113	None	replace
945	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithFiles;  [CE]  cannot  find  symbol  entriesWithFiles  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithFiles;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithFiles;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithFiles	113	None	replace
946	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZip;  [CE]  cannot  find  symbol  entriesWithZip  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZip;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithZip;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithZip	113	None	replace
947	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipEnd;  [CE]  cannot  find  symbol  entriesWithZipEnd  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithZipEnd;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithZipEnd;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithZipEnd	113	None	replace
948	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entry.getValue();  [CE]  cannot  find  symbol  entry  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entry.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entry.getValue();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  cannot  find  symbol  entry	26	None	replace
949	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)offsetEntry.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)offsetEntry.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)offsetEntry.getValue();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	26	None	replace
950	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.getValue();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.getValue();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.getValue();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
951	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
952	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getDataOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
953	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	151	None	replace
954	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	151	None	replace
955	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO	151	None	replace
956	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entry	151	None	replace
957	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  InputStream  inflater  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  InputStream  inflater  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  InputStream  inflater  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
958	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	158	None	replace
959	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
960	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
961	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OutputStream  ze  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  OutputStream  ze  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    OutputStream  ze  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
962	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    Entry  <  Zip>  entry  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
963	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineNumber());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineNumber());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getLineNumber());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
964	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLineNumber());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getLineNumber());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getLineNumber());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
965	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber()  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
966	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	74	None	replace
967	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getMethod();  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getMethod();  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getMethod();  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	74	None	replace
968	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	74	None	replace
969	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	74	None	replace
970	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
971	[BUG]  [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag.getInflater();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  this.entriesWithoutUTF8Flag.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  this.entriesWithoutUTF8Flag.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	130	None	replace
972	[BUG]  [BUGGY]  Inflater  ze  =  offsetEntry.getInflater();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  offsetEntry.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  offsetEntry.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	130	None	replace
973	[BUG]  [BUGGY]  Inflater  ze  =  entryWithoutUTF8Flag.getInflater();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entryWithoutUTF8Flag.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entryWithoutUTF8Flag.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	130	None	replace
974	[BUG]  [BUGGY]  Inflater  ze  =  entry.getInflater();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entry.getInflater();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entry.getInflater();	  Inflater    ze    =    entriesWithoutUTF8Flag.getInflater();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	130	None	replace
975	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	53	None	replace
976	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	53	None	replace
977	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  encoding);  Entry  entry  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  encoding);  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  encoding);  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	53	None	replace
978	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
979	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	53	None	replace
980	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entry.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
981	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(zipEnd);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(zipEnd);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(zipEnd);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
982	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	28	None	replace
983	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ZERO_LENGTH);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ZERO_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ZERO_LENGTH);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	28	None	replace
984	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getMethod();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getMethod();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getMethod();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
985	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(entry);  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(entry);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(entry);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  entry	107	None	replace
986	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
987	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	37	None	replace
988	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getOffset();  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol  entry	23	None	replace
989	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  z.getOffset();  [CE]  cannot  find  symbol  z  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  z.getOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  z.getOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol  z	23	None	replace
990	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOwnerOffset();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOwnerOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOwnerOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
991	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpen();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOpen();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOpen();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
992	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry?  ze.dataOffset  :  ze;  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry?  ze.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry?  ze.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	141	None	replace
993	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZE;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZE;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entry.dataOffset  :  ZE;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	141	None	replace
994	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZE;  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZE;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  ZE;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
995	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	123	None	replace
996	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	123	None	replace
997	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO	123	None	replace
998	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	54	None	replace
999	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	54	None	replace
1000	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entries.getName());  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
1001	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  ZERO  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO);  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO	54	None	replace
1002	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	95	None	replace
1003	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <?>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1004	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	95	None	replace
1005	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  <?>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entry	95	None	replace
1006	[BUG]  [BUGGY]  Inflater  ze  =  offsetEntry.getSize();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  offsetEntry.getSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  offsetEntry.getSize();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
1007	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getLength();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getLength();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getLength();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
1008	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	90	None	replace
1009	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(1);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(1);  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(1);  OffsetEntry  offsetEntry  =  entries.get(1);  }	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	90	None	replace
1010	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  ZipArchiveEntry  offsetEntry  =  new  ZipArchiveEntry();	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  ';'  expected	90	None	replace
1011	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  return  null;  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	90	None	replace
1012	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(0);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(0);  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(0);  }	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	90	None	replace
1013	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entry	85	None	replace
1014	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	85	None	replace
1015	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	85	None	replace
1016	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	103	None	replace
1017	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZE.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZE  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZE.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZE.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZE	103	None	replace
1018	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	103	None	replace
1019	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	103	None	replace
1020	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	159	None	replace
1021	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	159	None	replace
1022	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO	159	None	replace
1023	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ZERO_SIZE);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	159	None	replace
1024	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  archive.getOutputFile();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  archive.getOutputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  archive.getOutputFile();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1025	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ZERO.getOutputFile();  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ZERO.getOutputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ZERO.getOutputFile();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol  ZERO	112	None	replace
1026	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  z.getOutputFile();  [CE]  cannot  find  symbol  z  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  z.getOutputFile();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  z.getOutputFile();	  OffsetEntry    offsetEntry    =    ze.getOutputFile();    	non-compiled	[CE]  cannot  find  symbol  z	112	None	replace
1027	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrySettings.get(ze);  [CE]  cannot  find  symbol  entrySettings  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrySettings.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrySettings.get(ze);	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entrySettings	136	None	replace
1028	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrySettingsWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entrySettingsWithoutUTF8Flag  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrySettingsWithoutUTF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrySettingsWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entrySettingsWithoutUTF8Flag	136	None	replace
1029	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	3	None	replace
1030	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	3	None	replace
1031	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entry	3	None	replace
1032	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	157	None	replace
1033	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO	157	None	replace
1034	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  OutputStream  ze  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	121	None	replace
1035	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entry	121	None	replace
1036	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	121	None	replace
1037	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(entries.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(entries.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(entries.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1038	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.gettime());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.gettime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.gettime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1039	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
1040	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	150	None	replace
1041	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
1042	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  InputStream  inflater  =  entries.get(ze.getName());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  InputStream  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  InputStream  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	150	None	replace
1043	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	150	None	replace
1044	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	150	None	replace
1045	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOwner());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOwner());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getOwner());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1046	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompiler());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompiler());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getCompiler());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1047	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0L);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0L);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0L);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	114	None	replace
1048	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  0);  [CE]  cannot  find  symbol  entryMap  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  cannot  find  symbol  entryMap	114	None	replace
1049	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset,  0);  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset,  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  dataOffset,  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    0);    	non-compiled	[CE]  cannot  find  symbol  dataOffset	114	None	replace
1050	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entry	52	None	replace
1051	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	52	None	replace
1052	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
1053	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  ze  =  entries.get(ze.getSize()  -  1);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  ze  =  entries.get(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    ze  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  incompatible  types	19	None	add
1054	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	19	None	add
1055	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	24	None	replace
1056	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	24	None	replace
1057	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	72	None	replace
1058	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
1059	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getTranspressedSize();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getTranspressedSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getTranspressedSize();	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1060	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInput();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInput();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getInput();	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1061	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	146	None	replace
1062	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  InputStream  inflater  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	146	None	replace
1063	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  null;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  null;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  null;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	146	None	replace
1064	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  ';'  expected	146	None	replace
1065	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	148	None	replace
1066	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  entry	148	None	replace
1067	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO_LENGTH);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	148	None	replace
1068	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	119	None	replace
1069	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);  Entry  entry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1070	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol  entry	119	None	replace
1071	[BUG]  [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entriesWithoutUTF8Flag.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1072	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);  [CE]  variable  offsetEntry  might  not  have  been  initialized  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  variable  offsetEntry  might  not  have  been  initialized	119	None	replace
1073	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInputStream());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInputStream());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getInputStream());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1074	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getInputStream());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getInputStream());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getInputStream());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1075	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze);	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1076	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInputStream());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInputStream());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getInputStream());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1077	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  names.get(0);  [CE]  cannot  find  symbol  names  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  names.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  names.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	non-compiled	[CE]  cannot  find  symbol  names	14	None	replace
1078	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
1079	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipFile>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  Entry  <  ZipFile>  entry  =  entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(1);    Entry  <  ZipFile>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
1080	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0,  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0,  0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0,  0);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	91	None	replace
1081	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0,  1);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0,  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(0,  1);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	91	None	replace
1082	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getSize()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getSize()  -  1);  OffsetEntry  offsetEntry  =  entries.get(entry.getSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1083	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	71	None	replace
1084	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	71	None	replace
1085	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	138	None	replace
1086	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	138	None	replace
1087	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUnicodeExtraFields.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUnicodeExtraFields  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUnicodeExtraFields.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUnicodeExtraFields.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUnicodeExtraFields	138	None	replace
1088	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod(),  inflater);  [CE]  cannot  find  symbol  inflater  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod(),  inflater);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod(),  inflater);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  inflater	138	None	replace
1089	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET_COMPARATOR);  [CE]  cannot  find  symbol  OFFSET_COMPARATOR  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET_COMPARATOR);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET_COMPARATOR);	  OffsetEntry    offsetEntry    =    ze.get(entry);    	non-compiled	[CE]  cannot  find  symbol  OFFSET_COMPARATOR	13	None	replace
1090	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	70	None	replace
1091	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    <    K,    V>    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	70	None	replace
1092	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  ze  =  entriesWithoutUTF8Flag.get(ze.getTime());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  ze  =  entriesWithoutUTF8Flag.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getTime());  ze  =  entriesWithoutUTF8Flag.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	128	None	replace
1093	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  dataOffset  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  dataOffset);  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	128	None	replace
1094	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO_LENGTH  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_LENGTH);  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO_LENGTH	128	None	replace
1095	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
1096	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO);  ze  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  ZERO  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO);  ze  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO);  ze  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol  ZERO	128	None	replace
1097	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataLength());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getDataLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1098	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getDataLength());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getDataLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getDataLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1099	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(1);  [CE]  inconvertible  types  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =(ZipArchiveEntry)entries.get(1);	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entries.get(0);    	non-compiled	[CE]  inconvertible  types	27	None	replace
1100	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCOMpressedSize());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCOMpressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCOMpressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
1101	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getSize());  ze  =  entriesWithoutUTF8Flag.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	125	None	replace
1102	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1103	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  ze  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  2);  ze  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	125	None	replace
1104	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1105	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  ze  =  entries.get(ze.getName()  +  1);  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  ze  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    ze  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  incompatible  types	60	None	add
1106	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OutputStream  ze  =  entries.get(ze.getName()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  OutputStream  ze  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    OutputStream  ze  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1107	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	96	None	replace
1108	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
1109	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  2);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	add
1110	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  ze  =  entries.get(ze.getTime()  -  1);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  ze  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    ze  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  incompatible  types	76	None	add
1111	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipFile>  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  ZipFile>  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <  ZipFile>  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
1112	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Entry  <  Zip>  entry  =  entries.get(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Entry  <  Zip>  entry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
1113	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	32	None	replace
1114	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entry	32	None	replace
1115	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entryMap  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entryMap	53	None	replace
1116	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  inflater;  }  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  inflater;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  }  else  {  return  inflater;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	101	None	replace
1117	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  InputStream  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	101	None	replace
1118	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  InputStream  inflater  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream    inflater    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	101	None	replace
1119	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getTime()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getTime()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getTime()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
1120	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	76	None	add
1121	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SHIFT);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO_SHIFT  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SHIFT);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime(),  ZERO_SHIFT);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO_SHIFT	152	None	replace
1122	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip64_EOCDL_LOCATOR_OFFSET,  ze.getDataOffset());  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip64_EOCDL_LOCATOR_OFFSET,  ze.getDataOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(zip64_EOCDL_LOCATOR_OFFSET,  ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	65	None	replace
1123	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.getDataOffset());  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.getDataOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(zip64_EOCD_CFD_LOCATOR_OFFSET,  ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataOffset());    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	65	None	replace
1124	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  null  :  entryWithoutUTF8Flag;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  null  :  entryWithoutUTF8Flag;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  null  :  entryWithoutUTF8Flag;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    null;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	48	None	replace
1125	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  archiveName);  ze  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  archiveName);  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  archiveName);  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	55	None	replace
1126	[BUG]  [BUGGY]  OffsetEntry  entry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  entry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  entry  =  entriesWithoutUTF8Flag.get(0);  Entry  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	93	None	replace
1127	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  archiveName);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  archiveName);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  archiveName);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
1128	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  ze.getCompressedSize());  [CE]  cannot  find  symbol  entryMap  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  entryMap	144	None	replace
1129	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  this);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  this);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize(),  this);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod(),    ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	144	None	replace
1130	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  inflater;  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  inflater;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  return  inflater;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  incompatible  types	153	None	replace
1131	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream    inflater    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	153	None	replace
1132	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entryCount;  [CE]  cannot  find  symbol  entryCount  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entryCount;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entryCount;	  OffsetEntry    offsetEntry    =    entryCount;    	non-compiled	[CE]  cannot  find  symbol  entryCount	143	None	replace
1133	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <?>  entry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    entry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	95	None	replace
1134	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <?>  offsetEntry  =  entry.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <?>  offsetEntry  =  entry.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <?>  offsetEntry  =  entry.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry    <?>    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1135	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  ZERO  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  ZERO	147	None	replace
1136	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(zipEncoding);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(zipEncoding);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(zipEncoding);	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
1137	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.SIZE);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream(ZipArchiveEntry.SIZE);	  Inflater    ze    =    entriesWithoutUTF8Flag.getInputStream();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	133	None	replace
1138	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  inflater;  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  inflater;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  return  inflater;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  incompatible  types	158	None	replace
1139	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream    inflater    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	158	None	replace
1140	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	37	None	replace
1141	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ceilingOffset);  [CE]  cannot  find  symbol  ceilingOffset  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ceilingOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ceilingOffset);	  OffsetEntry    offsetEntry    =    entries.get(offset);    	non-compiled	[CE]  cannot  find  symbol  ceilingOffset	107	None	replace
1142	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getDataLength());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getDataLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength(),  ze.getDataLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1143	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataLength());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataLength());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getDataLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getDataLength());    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1144	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entryMap  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entryMap	108	None	replace
1145	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getCompressedSize();  [CE]  cannot  find  symbol  entry  [FE]                                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getCompressedSize();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getCompressedSize();	  OffsetEntry    offsetEntry    =    ze.getCompressedSize();    	non-compiled	[CE]  cannot  find  symbol  entry	29	None	replace
1146	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMask());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMask());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength(),  ze.getMask());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLength());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1147	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  inflater;  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  inflater;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  }  else  {  return  inflater;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  incompatible  types	146	None	replace
1148	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream    inflater    =    entries.get(ze.getMethod());    	non-compiled	[CE]  ';'  expected	146	None	replace
1149	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1150	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.entriesWithoutFile.get(ze);  [CE]  package  entry  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.entriesWithoutFile.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.entriesWithoutFile.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutFile.get(ze);    	non-compiled	[CE]  package  entry  does  not  exist	155	None	replace
1151	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  entryMap  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    entry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  entryMap	54	None	replace
1152	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(entry);  [CE]  cannot  find  symbol  entry  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(entry);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(entry);	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol  entry	134	None	replace
1153	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getSize());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry(ze.getSize());	  ZipArchiveEntry    offsetEntry    =    getZipArchiveEntry();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1154	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  offsetEntry  =  entry.get(ze.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  offsetEntry  =  entry.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  offsetEntry  =  entry.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <?>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1155	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entryMap  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entryMap	6	None	replace
1156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  this.entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  this.entries.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
1157	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  this.entries.get(0);  [FE]  AssertionFailedError  [FE]                                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  this.entries.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  this.entries.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(0);    	compilable	  [FE]  AssertionFailedError  	14	1	replace
1158	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entry.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	156	None	replace
1159	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  [CE]  cannot  find  symbol  ZERO_EOCD_SIZE  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_EOCD_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entry.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_EOCD_SIZE	156	None	replace
1160	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  inflater;  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  inflater;  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  return  inflater;  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  incompatible  types	150	None	replace
1161	[BUG]  [BUGGY]  Enum  <  String,  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  inflater.get(ze.getName());  [CE]  wrong  number  of  type  arguments;  required  1  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Enum  <  String,  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  inflater.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Enum  <  String,  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  inflater.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  1	150	None	replace
1162	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream    inflater    =    entries.get(ze.getName());    	non-compiled	[CE]  ';'  expected	150	None	replace
1163	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entries.dataOffset  :  ze;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entries.dataOffset  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entries.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entry?    entry.dataOffset    :    ze;    	non-compiled	[CE]  incompatible  types	141	None	replace
1164	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getName());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  entry.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entry.getName();    	non-compiled	[CE]  cannot  find  symbol  entry	110	None	replace
1165	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	74	None	replace
1166	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entrys.get(ze.getName());  [CE]  cannot  find  symbol  entrys  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entrys.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entrys.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    	non-compiled	[CE]  cannot  find  symbol  entrys	61	None	replace
1167	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  CFD_LOCATOR_OFFSET;  [CE]  cannot  find  symbol  dataOffset  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  CFD_LOCATOR_OFFSET;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ze.dataOffset  :  CFD_LOCATOR_OFFSET;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
1168	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ZERO_OFFSET  :  ze;  [CE]  cannot  find  symbol  dataOffset  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset?  ZERO_OFFSET  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset?  ZERO_OFFSET  :  ze;	  OffsetEntry    offsetEntry    =    entry.dataOffset?    entry.dataOffset    :    ze;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	46	None	replace
1169	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET);  [CE]  cannot  find  symbol  OFFSET  [FE]                              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(ZipArchiveEntry.OFFSET);	  OffsetEntry    offsetEntry    =    ze.get(entry);    	non-compiled	[CE]  cannot  find  symbol  OFFSET	13	None	replace
1170	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());  [CE]  cannot  find  symbol  entryMap  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entryMap	138	None	replace
1171	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  names.get(ze.getMethod());  [CE]  cannot  find  symbol  names  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  names.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  names.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  names	138	None	replace
1172	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1173	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getOwner());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getOwner());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner(),  ze.getOwner());	  OffsetEntry    offsetEntry    =    entries.get(ze.getOwner());    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
1174	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  InputStream  inflater  =  entries.get(ze.getTime()  +  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  InputStream  inflater  =  entries.get(ze.getTime()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    InputStream  inflater  =  entries.get(ze.getTime()  +  1);	  	non-compiled	[CE]  incompatible  types	80	None	add
1175	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1176	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterOffset());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterOffset());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber(),  ze.getCharacterOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLineNumber());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1177	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  Entry  <?>  offsetEntry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <?>    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	94	None	replace
1178	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  K,  V>  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    K,    V>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	96	None	replace
1179	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  entry.getMethod());  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  entry.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  entry.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entry.getMethod();    	non-compiled	[CE]  cannot  find  symbol  entry	122	None	replace
1180	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize()  +  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  InputStream  inflater  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    +    1);    InputStream  inflater  =  entries.get(ze.getCompressedSize()  +  1);	  	non-compiled	[CE]  incompatible  types	97	None	add
1181	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
1182	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1,  ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1,  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1,  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	75	None	replace
1183	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCounts.get(ze.getMethod()  -  1);  [CE]  cannot  find  symbol  entryCounts  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryCounts.get(ze.getMethod()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCounts.get(ze.getMethod()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod()    -    1);    	non-compiled	[CE]  cannot  find  symbol  entryCounts	75	None	replace
1184	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.listEntry().get(ze);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.listEntry().get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.listEntry().get(ze);	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1185	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.size();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.size();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.size();	  OffsetEntry    offsetEntry    =    namesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  incompatible  types	137	None	replace
1186	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entry.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry    <    K,    V>    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1187	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocalName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocalName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocalName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocalName());    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
1188	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getCompressedSize()  -  1);  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getCompressedSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getEntry(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  entry	102	None	replace
1189	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  getEntry(ze.getValue());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  getEntry(ze.getValue());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  getEntry(ze.getValue());	  OffsetEntry    offsetEntry    =    entry.getValue();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1190	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCD_CFD_LOCATOR_OFFSET;  [CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCD_CFD_LOCATOR_OFFSET;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  this.zip64_EOCD_CFD_LOCATOR_OFFSET;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_CFD_LOCATOR_OFFSET	40	None	replace
1191	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCDL_LOCATOR_OFFSET;  [CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCDL_LOCATOR_OFFSET;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  this.zip64_EOCDL_LOCATOR_OFFSET;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCDL_LOCATOR_OFFSET	40	None	replace
1192	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCD_FOR_FILENAME_LENGTH;  [CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  this.zip64_EOCD_FOR_FILENAME_LENGTH;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  this.zip64_EOCD_FOR_FILENAME_LENGTH;	  OffsetEntry    offsetEntry    =    entry.dataOffset;    	non-compiled	[CE]  cannot  find  symbol  zip64_EOCD_FOR_FILENAME_LENGTH	40	None	replace
1193	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation()  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    -    1);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1194	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  ZERO  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ZERO);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  ZERO	148	None	replace
1195	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithOutputFile;  [CE]  cannot  find  symbol  entriesWithOutputFile  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithOutputFile;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithOutputFile;	  OffsetEntry    offsetEntry    =    ze.entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithOutputFile	113	None	replace
1196	[BUG]  [BUGGY]  ZipArchiveEntry  offset  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  ZipArchiveEntry  offset  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offset  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();	  ZipArchiveEntry    ze    =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	24	None	replace
1197	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getData());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getData());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData(),  ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1198	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getData());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getData());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze.getData());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1199	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTip());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTip());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTip());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime()    +    1);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1200	[BUG]  [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  entry  =  entries.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  entry  =  entries.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    entry    =    entries.get(offsetEntry.dataOffset);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
1201	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.names.get(ze);  [CE]  package  entry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.names.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.names.get(ze);	  OffsetEntry    offsetEntry    =    names.get(ze);    	non-compiled	[CE]  package  entry  does  not  exist	12	None	replace
1202	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry    <    K,    V>    entry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	32	None	replace
1203	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  entry.dataOffset;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  entry.dataOffset;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  entry.dataOffset;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	43	None	replace
1204	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesInflater;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesInflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  ze  :  entriesInflater;	  OffsetEntry    offsetEntry    =    ze?    entriesInflater    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	142	None	replace
1205	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocation());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocation());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryNames.get(ze.getLocation());	  OffsetEntry    offsetEntry    =    entries.get(ze.getLocation());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1206	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize()  -  1);  [CE]  cannot  find  symbol  entry  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize()  -  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getEntry(ze.getSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize()    -    1);    	non-compiled	[CE]  cannot  find  symbol  entry	8	None	replace
1207	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  entryMap  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry    entry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol  entryMap	71	None	replace
1208	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	30	None	replace
1209	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getImplicitReturn();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getImplicitReturn();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getImplicitReturn();	  Inflater    ze    =    entriesWithoutUTF8Flag.getSize();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	149	None	replace
1210	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  zipEncoding);  Inflater  ze  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  zipEncoding);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  zipEncoding);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	109	None	replace
1211	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  this);  Inflater  ze  =  entries.get(ze.getName());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  this);  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  this);  Inflater  ze  =  entries.get(ze.getName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater    ze    =    entries.get(ze.getName());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	109	None	replace
1212	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(1);  Entry  <  ZipArchiveEntry>  entry  =  entriesWithoutUTF8Flag.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    Entry    <    ZipArchiveEntry>    entry    =    entries.get(1);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	118	None	replace
1213	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.inflater;  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.inflater;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.inflater;	  OffsetEntry    offsetEntry    =    inflater;    	non-compiled	[CE]  cannot  find  symbol  entry	41	None	replace
1214	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.inflater.get(ze);  [CE]  package  entry  does  not  exist  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.inflater.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.inflater.get(ze);	  OffsetEntry    offsetEntry    =    inflater.get(ze);    	non-compiled	[CE]  package  entry  does  not  exist	11	None	replace
1215	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset.get(ze);  [CE]  package  entry  does  not  exist  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset.get(ze);	  OffsetEntry    offsetEntry    =    inflater.get(ze);    	non-compiled	[CE]  package  entry  does  not  exist	11	None	replace
1216	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8Flag	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	127	None	replace
1217	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getTime());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	127	None	replace
1218	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  ';'  expected	127	None	replace
1219	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  new  ZipArchiveEntry(inflater);  }  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  new  ZipArchiveEntry(inflater);  }  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  }  else  {  return  new  ZipArchiveEntry(inflater);  }	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	127	None	replace
1220	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_FOR_FILENAME_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_FOR_FILENAME_LENGTH);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_FOR_FILENAME_LENGTH	49	None	replace
1221	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_OFFSET_FOR_FILENAME_LENGTH);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ZERO_OFFSET_FOR_FILENAME_LENGTH);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol  ZERO_OFFSET_FOR_FILENAME_LENGTH	49	None	replace
1222	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getData();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getData();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getData();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1223	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDataEntry();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getDataEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getDataEntry();	  OffsetEntry    offsetEntry    =    ze;    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1224	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  incompatible  types	100	None	replace
1225	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	100	None	replace
1226	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  dataOffset  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  dataOffset);  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  dataOffset	100	None	replace
1227	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  entryMap  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryMap.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry    <    ZipArchiveEntry>    entry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol  entryMap	123	None	replace
1228	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet().iterator().next();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet().iterator().next();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.entrySet().iterator().next();	  Inflater    ze    =    entriesWithoutUTF8Flag.entrySet();    	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	132	None	replace
1229	[BUG]  [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getEntry();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getEntry();	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
1230	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  ZERO_SIZE  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize(),  ZERO_SIZE);  OutputStream  ze  =  entries.get(ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream    ze    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol  ZERO_SIZE	103	None	replace
1231	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater,  entriesWithoutUTF8Flag  :  ze;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  inflater,  entriesWithoutUTF8Flag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater,  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    ze?    entriesWithoutUTF8Flag    :    inflater;    	non-compiled	[CE]  ';'  expected	47	None	replace
1232	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getInputStream());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getInputStream());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getInputStream());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	126	None	replace
1233	[BUG]  [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	if(entries!=  null)  {  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  }  else  {  ZipArchiveEntry  entry  =  entries.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  ';'  expected	126	None	replace
1234	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName(),  ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	151	None	replace
1235	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  InputStream  inflater  =  entries.get(ze.getName()  +  1);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  InputStream  inflater  =  entries.get(ze.getName()  +  1);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    InputStream  inflater  =  entries.get(ze.getName()  +  1);	  	non-compiled	[CE]  incompatible  types	60	None	add
1236	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName()    +    1);    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	60	None	add
1237	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.entryWithoutUTF8Flag.get(ze);  [CE]  package  entry  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.entryWithoutUTF8Flag.get(ze);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.entryWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  package  entry  does  not  exist	136	None	replace
1238	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry();  [CE]  cannot  find  symbol  entry  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entry.getEntry();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getEntry();	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	136	None	replace
1239	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOutputFlag  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOutputFlag  :  ze;  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutOutputFlag  :  ze;	  OffsetEntry    offsetEntry    =    entryWithoutUTF8Flag?    entryWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	45	None	replace
1240	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getInputStream());    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1241	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOctetOffset();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOctetOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOctetOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
1242	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset.getOffset();  [CE]  cannot  find  symbol  dataOffset  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset.getOffset();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset.getOffset();	  OffsetEntry    offsetEntry    =    ze.getOffset();    	non-compiled	[CE]  cannot  find  symbol  dataOffset	23	None	replace
1243	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getMethod());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getMethod());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize(),  ze.getMethod());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	129	None	replace
1244	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  zipEncoding);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag,  zipEncoding);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag,  zipEncoding);	  Inflater    ze    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  ';'  expected	131	None	replace
1245	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getSize());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime(),  ze.getSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1246	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getEndTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getEndTime());  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze,  ze.getEndTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getEndTime());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1247	[BUG]  [BUGGY]  Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(0);  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  entry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entry.get(0);	  OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1248	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  IOException,  ZipException  {      [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]      if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  List  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set    <    ZipArchiveEntry>    entries    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
