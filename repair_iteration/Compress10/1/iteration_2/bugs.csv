bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	14	None	add
2	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <?>  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
3	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <  K,  V>  entry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
4	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	14	None	add
5	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
6	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  entry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  entry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
7	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <?>  entry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <?>  entry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
8	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	14	None	add
9	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze);  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  nameMap.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  nameMap.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  incompatible  types	11	None	replace
10	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [CE]  cannot  find  symbol  entry  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entry.getValue();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.getValue();	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	11	None	replace
11	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(ze);  [CE]  cannot  find  symbol  inflater  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  inflater.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  inflater	11	None	replace
12	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  names.get(ze);  [CE]  cannot  find  symbol  names  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  names.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  names.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  names	11	None	replace
13	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(entry);  [CE]  cannot  find  symbol  entry  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.get(entry);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.get(entry);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	11	None	replace
14	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(0);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	11	None	replace
15	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getRawOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
16	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineNumber());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
17	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLineno());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLineno());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
18	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getData());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getData());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	15	1	replace
20	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	compilable	  [FE]  AssertionFailedError  	15	1	replace
21	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getStart());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getStart());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
22	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLowerCase());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
23	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffset();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOffset();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOffset();	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
24	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.clone();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
25	[BUG]  [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Entry  <  ZipArchiveEntry>  entry  =  entry.getValue();	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entry.getValue();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
27	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(0);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entries.get(0);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
28	[BUG]  [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  ze  =(ZipArchiveEntry)entriesWithoutUTF8Flag.get(ze);	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
29	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  [CE]  incompatible  types  [FE]                                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.getCompressedSize();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getCompressedSize();	      	non-compiled	[CE]  incompatible  types	12	None	replace
30	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	5	None	add
31	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  <?>  offsetEntry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
32	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  <  K,  V>  entry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
33	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  entry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
34	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <?>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  <?>  entry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
35	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
36	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	5	None	add
37	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	5	None	add
38	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  incompatible  types	13	None	replace
39	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset;  [CE]  cannot  find  symbol  dataOffset  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.dataOffset;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.dataOffset;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  dataOffset	13	None	replace
40	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset;  [CE]  cannot  find  symbol  entry  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entry	13	None	replace
41	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater;  [CE]  cannot  find  symbol  inflater  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  inflater;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  inflater	13	None	replace
42	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputFile();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.getInputFile();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getInputFile();	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
43	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	16	None	replace
44	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  inflater?  entriesWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  inflater  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  inflater?  entriesWithoutUTF8Flag  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  inflater?  entriesWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  inflater	16	None	replace
45	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF8Flag  :  ze;  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF8Flag  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag?  entryWithoutUTF8Flag  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	16	None	replace
46	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  entry.dataOffset  :  ze;  [CE]  cannot  find  symbol  entry  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entry.dataOffset?  entry.dataOffset  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.dataOffset?  entry.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	16	None	replace
47	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  inflater;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	16	None	replace
48	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  null;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  null;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  null;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	16	None	replace
49	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry  offsetEntry  =  entries.get(ze.getName());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
50	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  <?>  offsetEntry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
51	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  entry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  <  K,  V>  entry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
52	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
53	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  entry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  entry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
54	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <?>  entry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  <?>  entry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
55	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  ze  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  ze  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    ze  =  entries.get(ze.getName());	  	non-compiled	[CE]  incompatible  types	9	None	add
56	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
57	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalFile());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
58	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocation());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocation());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
59	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLocalName());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	compilable	  [FE]  AssertionFailedError  	10	1	replace
61	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	compilable	  [FE]  AssertionFailedError  	10	1	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	6	1	replace
63	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	6	1	replace
64	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEnd());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEnd());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
65	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataOffset());	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
67	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(1);	  OffsetEntry    offsetEntry    =    entries.get(0);    	compilable	  [FE]  AssertionFailedError  	2	1	replace
68	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	3	None	add
69	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  <?>  offsetEntry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
70	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  <  K,  V>  entry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
71	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  entry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  entry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
72	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
73	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <?>  entry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  <?>  entry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
74	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  ze  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  ze  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    ze  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  incompatible  types	3	None	add
75	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry  offsetEntry  =  entries.get(ze.getMethod()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	3	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	8	1	replace
77	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	8	1	replace
78	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getEndTime());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
79	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getValue());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getValue());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	8	1	replace
81	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	compilable	  [FE]  AssertionFailedError  	8	1	replace
82	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry  offsetEntry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	7	None	add
83	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <?>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  <?>  offsetEntry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
84	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  K,  V>  entry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  <  K,  V>  entry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
85	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  <  K,  V>  offsetEntry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
86	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  entry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  entry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
87	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
88	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry  offsetEntry  =  entries.get(ze.getTime()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	7	None	add
89	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Entry  <  Zip>  entry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Entry  <  Zip>  entry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
90	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(0);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry  offsetEntry  =  entries.get(0);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	1	None	add
91	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  OffsetEntry  offsetEntry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    OffsetEntry  offsetEntry  =  entries.get(1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	1	None	add
92	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <  K,  V>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
93	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
94	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <?>  offsetEntry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
95	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  entry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <?>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
96	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  K,  V>  entry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <  K,  V>  entry  =  entries.get(1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	add	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	6	1	replace
98	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  +  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    	compilable	  [FE]  AssertionFailedError  	6	1	replace
99	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
100	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    ze  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  incompatible  types	5	None	add
101	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  InputStream  inflater  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    InputStream  inflater  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  incompatible  types	5	None	add
102	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize()  -  1);	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	5	None	add
103	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OutputStream  ze  =  entries.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OutputStream  ze  =  entries.get(ze.getCompressedSize());	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
104	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze;  [CE]  cannot  find  symbol  entryCount  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount?  entryCount  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entryCount	16	None	replace
105	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesWithoutUTF8Flag  :  ZERO;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	16	None	replace
106	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOffset());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOffset());	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
107	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offset);  [CE]  cannot  find  symbol  offset  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(offset);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(offset);	  OffsetEntry    offsetEntry    =    entries.get(0);    	non-compiled	[CE]  cannot  find  symbol  offset	2	None	replace
108	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getName());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
109	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Inflater  ze  =  entries.get(ze.getName());  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Inflater  ze  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Inflater  ze  =  entries.get(ze.getName());	  	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
110	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entry.getName();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  OffsetEntry  offsetEntry  =  entry.getName();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    OffsetEntry  offsetEntry  =  entry.getName();	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	9	None	add
111	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInput());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInput());	  OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
112	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOutputFile();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.getOutputFile();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.getOutputFile();	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
113	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithoutUTF8Flag;  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze.entriesWithoutUTF8Flag;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze.entriesWithoutUTF8Flag;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	13	None	replace
114	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  0);	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
115	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getName()  -  1);	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	10	None	replace
116	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getOwner());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getOwner());	  OffsetEntry    offsetEntry    =    entries.get(ze.getName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
117	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(0);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
118	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <  ZipArchiveEntry>  entry  =  entries.get(1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
119	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  entry  =  entries.get(offsetEntry.dataOffset);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  entry  =  entries.get(offsetEntry.dataOffset);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
120	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
121	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OutputStream  ze  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OutputStream  ze  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
122	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getMethod();  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  OffsetEntry  offsetEntry  =  entry.getMethod();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    OffsetEntry  offsetEntry  =  entry.getMethod();	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	3	None	add
123	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <  ZipArchiveEntry>  entry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
124	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Entry  <  ZipArchiveEntry>  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
125	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  ze  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    ze  =  entries.get(ze.getSize());	  	non-compiled	[CE]  incompatible  types	14	None	add
126	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Inflater  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Inflater  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	14	None	add
127	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Inflater  offsetEntry  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Inflater  offsetEntry  =  entries.get(ze.getTime());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	7	None	add
128	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  ze  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  ze  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    ze  =  entries.get(ze.getTime());	  	non-compiled	[CE]  incompatible  types	7	None	add
129	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    OffsetEntry  offsetEntry  =  entries.get(ze.getSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	7	None	add
130	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInflater();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInflater();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInflater();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
131	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag;  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag;	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
132	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.entrySet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.entrySet();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
133	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getInputStream();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
134	[BUG]  [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	ZipArchiveEntry  offsetEntry  =  getZipArchiveEntry();	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
135	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getLength());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
136	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	11	None	replace
137	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  namesWithoutUTF8Flag.get(ze);  [CE]  cannot  find  symbol  namesWithoutUTF8Flag  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  namesWithoutUTF8Flag.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  namesWithoutUTF8Flag.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  namesWithoutUTF8Flag	11	None	replace
138	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [CE]  cannot  find  symbol  entriesWithoutUTF8Flag  [FE]                      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutUTF8Flag.get(ze.getMethod());	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8Flag	11	None	replace
139	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze);  [CE]  cannot  find  symbol  entryCount  [FE]                        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entryCount.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entryCount	11	None	replace
140	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(0);  Entry  <?>  offsetEntry  =  entries.get(1);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(0);    Entry  <?>  offsetEntry  =  entries.get(1);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
141	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry?  entry.dataOffset  :  ze;  [CE]  cannot  find  symbol  entry  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entry?  entry.dataOffset  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry?  entry.dataOffset  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  cannot  find  symbol  entry	16	None	replace
142	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  ze;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  ze;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  ze?  entriesInflater  :  ze;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag?    entriesWithoutUTF8Flag    :    ze;    	non-compiled	[CE]  incompatible  types	16	None	replace
143	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entryCount;  [CE]  cannot  find  symbol  entryCount  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entryCount;  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entryCount;	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag;    	non-compiled	[CE]  cannot  find  symbol  entryCount	13	None	replace
144	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getMethod(),  ze.getCompressedSize());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	4	None	replace
145	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getInputStream());	  OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
146	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  InputStream  inflater  =  entries.get(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    InputStream  inflater  =  entries.get(ze.getMethod());	  	non-compiled	[CE]  incompatible  types	3	None	add
147	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet(ze.getMethod());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
148	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getMethod());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getMethod());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
149	[BUG]  [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize();  [CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  Inflater  ze  =  entriesWithoutUTF8Flag.getSize();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	Inflater  ze  =  entriesWithoutUTF8Flag.getSize();	      	non-compiled	[CE]  variable  ze  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	12	None	replace
150	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  InputStream  inflater  =  entries.get(ze.getName());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    InputStream  inflater  =  entries.get(ze.getName());	  	non-compiled	[CE]  incompatible  types	9	None	add
151	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getName());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getName());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
152	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
153	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getTime());  InputStream  inflater  =  entries.get(ze.getTime());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getTime());    InputStream  inflater  =  entries.get(ze.getTime());	  	non-compiled	[CE]  incompatible  types	7	None	add
154	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entry.entrySet().get(ze);  [CE]  cannot  find  symbol  entry  [FE]                  AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entry.entrySet().get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entry.entrySet().get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entry	11	None	replace
155	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutFile.get(ze);  [CE]  cannot  find  symbol  entriesWithoutFile  [FE]                    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entriesWithoutFile.get(ze);  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entriesWithoutFile.get(ze);	  OffsetEntry    offsetEntry    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutFile	11	None	replace
156	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    OffsetEntry  offsetEntry  =  entry.get(ze.getCompressedSize());	  	non-compiled	[CE]  variable  offsetEntry  is  already  defined  in  method  getInputStream(ZipArchiveEntry)	5	None	add
157	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getCompressedSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getCompressedSize());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
158	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  InputStream  inflater  =  entries.get(ze.getSize());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    InputStream  inflater  =  entries.get(ze.getSize());	  	non-compiled	[CE]  incompatible  types	14	None	add
159	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getSize());  Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    Set  <  ZipArchiveEntry>  entries  =  Sets.newHashSet();	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
160	[BUG]  [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  IOException,  ZipException  {    [BUGGY]  OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength());  [BUGGY]    if  (offsetEntry  ==  null)  {  return  null;  }  ZipUtil.checkRequestedFeatures(ze);  long  start  =  offsetEntry.dataOffset;  BoundedInputStream  bis  =  new  BoundedInputStream(start,  ze.getCompressedSize());  switch  (ze.getMethod())  {  case  ZipArchiveEntry.STORED:  return  bis;  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  getInputStream  [RETURN_TYPE]  InputStream  ZipArchiveEntry  ze  [VARIABLES]  ZipEncoding  zipEncoding  InputStream  $anonymous0  String  archiveName  encoding  name  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  remaining  start  Comparator  OFFSET_COMPARATOR  byte[]  comment  name  boolean  addDummyByte  closed  success  useUnicodeExtraFields  RandomAccessFile  archive  OffsetEntry  offsetEntry  BoundedInputStream  bis  ZipArchiveEntry  ze  Inflater  $anonymous1  inflater  Map  entries  entriesWithoutUTF8Flag  nameMap  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	1.0	319	319	1	replace	OffsetEntry  offsetEntry  =  entries.get(ze.getDataLength());	  OffsetEntry    offsetEntry    =    entries.get(ze.getSize());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
