bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(orig!=  null)  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    >>    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
3	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
5	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
7	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
9	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	2	replace
10	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entriesWithoutUTF7Flag  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF7Flag	107	None	replace
11	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
12	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
13	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entriesWithoutUTF7Flag  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF7Flag	107	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
15	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
16	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
17	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.fileName,  orig,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.fileName,  orig,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.fileName,  orig,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
18	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.name);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.name);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
19	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.url);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.url);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.url);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
21	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
23	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
25	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
26	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getRelativeHeader()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getRelativeHeader()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getRelativeHeader()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
28	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
29	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.fileName))  {  [CE]  cannot  find  symbol  fileName  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.fileName))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.fileName))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	12	None	replace
30	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
31	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	121	None	replace
32	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
33	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(fileNameLen))  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	121	None	replace
34	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
35	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
36	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  If(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  If(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    If(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	67	None	add
37	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
38	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entryWithoutUTF8Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entryWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(ze.getName())||  entryWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
39	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLength))    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
41	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLength))    {    	compilable	  [FE]  AssertionFailedError  	120	1	replace
42	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLength))  {  [CE]  cannot  find  symbol  fileNameLength  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLength))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLength))  {	  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLength))    {    	non-compiled	[CE]  cannot  find  symbol  fileNameLength	120	None	replace
43	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
44	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
45	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	127	None	add
46	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	127	None	add
47	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
49	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
51	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	25	1	replace
52	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(nc.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
53	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.title))  {  [CE]  cannot  find  symbol  title  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.title))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  title	25	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
55	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
57	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
59	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
60	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
61	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entryEntriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entryEntriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  entryEntriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	68	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
63	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
65	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
66	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
67	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
69	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
70	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	60	1	replace
71	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	60	1	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
73	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
74	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
75	[BUG]  [BUGGY]  Archive.readFully(orig,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  Archive.readFully(orig,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	Archive.readFully(orig,  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
76	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
77	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
78	[BUG]  [BUGGY]  archive.readFully(orig,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(orig,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(orig,  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
79	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
80	[BUG]  [BUGGY]  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
81	[BUG]  [BUGGY]  if(orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
82	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
83	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
84	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
85	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
86	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(z.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(z.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(z.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
87	[BUG]  [BUGGY]  if(nc!=  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  addDummyByte  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  addDummyByte	125	None	replace
88	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  addUnicodeExtraFields  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  addUnicodeExtraFields	125	None	replace
89	[BUG]  [BUGGY]  if(!addDummyByte)  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!addDummyByte)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!addDummyByte)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
90	[BUG]  [BUGGY]  if(nc  ==  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  addDummyByte  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc  ==  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc  ==  null)  {  if(!addDummyByte)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  addDummyByte	125	None	replace
91	[BUG]  [BUGGY]  if(open)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  open  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(open)  {  if(!addDummyByte)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(open)  {  if(!addDummyByte)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  open	125	None	replace
92	[BUG]  [BUGGY]  if(!open)  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!open)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!open)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
93	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
94	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
95	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
96	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig  >=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
97	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig  >>  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
98	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig!=  null  &&.orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
99	[BUG]  [BUGGY]  if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }  [CE]  no  suitable  method  found  for  readFully(String)  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(String)	146	None	replace
100	[BUG]  [BUGGY]  if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [CE]  no  suitable  method  found  for  readFully(String)  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null)  {  if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(String)	146	None	replace
101	[BUG]  [BUGGY]  if(nc!=  null)  {  if(orig  ==  null)  {  archive.readFully(orig);  }  [CE]  no  suitable  method  found  for  readFully(String)  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null)  {  if(orig  ==  null)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null)  {  if(orig  ==  null)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(String)	146	None	replace
102	[BUG]  [BUGGY]  if(orig!=  null)  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
103	[BUG]  [BUGGY]  if(nc!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
104	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  (orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
105	[BUG]  [BUGGY]  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	(orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
106	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
107	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	24	None	add
108	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
109	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
110	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
111	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
112	[BUG]  [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  object  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  object	4	None	replace
113	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
114	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
115	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
116	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  If(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  If(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    If(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  ';'  expected	17	None	add
117	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!Orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!Orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!Orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
118	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithOUTUTF8Flag))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithOUTUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!orig.equals(ze.getName())&&!orig.equals(entriesWithOUTUTF8Flag))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
119	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!object.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!object.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!object.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
120	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
122	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
123	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
124	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
125	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.getName())&&!orig.equals(nc.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
126	[BUG]  [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.orig))  {  [CE]  cannot  find  symbol  orig  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.orig))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  orig	39	None	replace
127	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
128	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	99	1	replace
130	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	99	1	replace
131	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
132	[BUG]  [BUGGY]  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	(orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	2	replace
134	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	2	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
136	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
138	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	62	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	141	2	replace
140	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	141	2	replace
141	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(ze.name))  {  [CE]  name  has  private  access  in  ZipArchiveEntry  [FE]      NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(ze.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  encoding.equals(ze.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  name  has  private  access  in  ZipArchiveEntry	141	None	replace
142	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())&&  encoding.equals(ze.name))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())&&  encoding.equals(ze.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())&&  encoding.equals(ze.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
143	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())||  encoding.equals(ze.name))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())||  encoding.equals(ze.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())||  encoding.equals(ze.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	141	2	replace
145	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]            NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	141	2	replace
146	[BUG]  [BUGGY]  if  (!name.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!name.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!name.equals(ze.getName())&&!orig.equals(nc.name))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	42	None	replace
147	[BUG]  [BUGGY]  if  (!extraFieldLen.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!extraFieldLen.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!extraFieldLen.equals(ze.getName())&&!orig.equals(nc.name))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
148	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(ze.name))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(ze.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.getName())&&!orig.equals(ze.name))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
149	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.name.getName())&&!orig.equals(nc.fileNameLen))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.name.getName())&&!orig.equals(nc.fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.name.getName())&&!orig.equals(nc.fileNameLen))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
150	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  Orig  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	3	None	replace
151	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
152	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  cannot  find  symbol  Orig  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	3	None	replace
153	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
154	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
155	[BUG]  [BUGGY]  For(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  For(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	For(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	115	None	replace
156	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
157	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
158	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
160	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
162	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
164	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
166	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
168	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
170	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
172	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
173	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
174	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    If(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  ';'  expected	81	None	add
175	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
176	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  (orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  (orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    (orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  not  a  statement	81	None	add
177	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
178	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  If(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  If(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    If(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
179	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&|!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&|!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    if(!orig.equals(ze.getName())&|!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
180	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
181	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
182	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
183	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
185	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
186	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
187	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
188	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  ';'  expected	79	None	add
189	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
190	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
191	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
192	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
193	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
194	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  ';'  expected	85	None	add
195	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
196	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
197	[BUG]  [BUGGY]  if(orig!=  null)  {  if  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    if    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
198	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
199	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
200	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
201	[BUG]  [BUGGY]  if(orig!=  null)  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
202	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
203	[BUG]  [BUGGY]  if(!orig.equals(fileName)&&!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  fileName  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileName)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileName)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	119	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
205	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
207	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(offset)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(offset)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
209	[BUG]  [BUGGY]  if(!orig.equals(offset)&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(offset)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(offset)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(fileNameLen)||!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
211	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)||!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)||!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
212	[BUG]  [BUGGY]  if(!orig.equals(fileName)||!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  fileName  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileName)||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileName)||!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	119	None	replace
213	[BUG]  [BUGGY]  if(!orig.equals(fileName)&&!orig.equals(extraFieldLen))  {  [CE]  cannot  find  symbol  fileName  [FE]                AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileName)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileName)&&!orig.equals(extraFieldLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	119	None	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
215	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	2	replace
217	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	2	replace
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
219	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
221	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(offset))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
223	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
225	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
227	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
229	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
230	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entryEncoding))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entryEncoding))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entryEncoding))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	18	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
232	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(entriesWithoutUTF8Flag))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
233	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
234	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  If(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  If(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    If(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  	non-compiled	[CE]  ';'  expected	138	None	add
235	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!Orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!Orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    if(!Orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
236	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
237	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  (!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  (!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    (!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  	non-compiled	[CE]  not  a  statement	138	None	add
238	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
239	[BUG]  [BUGGY]  archive.readFully(entriesWithoutUTF8Flag);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(entriesWithoutUTF8Flag);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(entriesWithoutUTF8Flag);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
240	[BUG]  [BUGGY]  archive.readFully(entriesWithoutUTF8Flag,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(entriesWithoutUTF8Flag,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(entriesWithoutUTF8Flag,  orig);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
241	[BUG]  [BUGGY]  archive.readFully(entriesWithoutUTF8Flag,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(entriesWithoutUTF8Flag,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(entriesWithoutUTF8Flag,  nc);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
242	[BUG]  [BUGGY]  archive.readFully(orig,  fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(orig,  fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(orig,  fileNameLen);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
243	[BUG]  [BUGGY]  archive.readFully(offset,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(offset,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(offset,  orig);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
244	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
246	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
248	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
249	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
250	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  ';'  expected	83	None	add
251	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
252	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
253	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
254	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
255	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
256	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
257	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
258	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
259	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
260	[BUG]  [BUGGY]  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
261	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
262	[BUG]  [BUGGY]  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
263	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    if  (orig  ==  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
264	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    if  (orig!=  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
265	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    If  (orig  ==  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
266	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    If  (orig!=  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
267	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  >=  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  >=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    if  (orig  >=  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
268	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig.name))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
269	[BUG]  [BUGGY]  if  (!orig.name.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.name.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.name.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
270	[BUG]  [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(orig.name))  {  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name)&&!fileNameLen.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	43	None	replace
271	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
272	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	50	None	add
273	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	50	None	add
274	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
275	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.enum);  [CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.enum);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.enum);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  as  of  release  5,  'enum'  is  a  keyword,  and  may  not  be  used  as  an  identifier	33	None	replace
276	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
277	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileName);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileName);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileName);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
279	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	14	1	replace
280	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
281	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	98	None	replace
282	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
283	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  Orig  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	98	None	replace
284	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(fileNameLen))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())&&!fileNameLen.equals(fileNameLen))  {	  if    (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
285	[BUG]  [BUGGY]  if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(fileNameLen))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(fileNameLen))  {	  if    (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
286	[BUG]  [BUGGY]  if  (!name.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!name.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!name.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))  {	  if    (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
287	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
288	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    If(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	112	None	add
289	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
290	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig  >=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
291	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
292	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  >>  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig  >>  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig  >>  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
293	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
294	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
295	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
296	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(file  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(file  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(file	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
297	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
298	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
299	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if  (!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if  (!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    if  (!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
300	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  not  a  statement	26	None	add
301	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
302	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	134	None	add
303	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
304	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
305	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	134	None	add
306	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
307	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
308	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
309	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
310	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
311	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
312	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())||!orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
313	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	88	1	replace
315	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	88	1	replace
316	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	88	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
318	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(archiveName))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(archiveName))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
320	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(archiveName))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(archiveName))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(archiveName))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
321	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [CE]  cannot  find  symbol  title  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  title	16	None	replace
322	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
323	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
325	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
326	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {	  if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	2	replace
328	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	2	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
330	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
332	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(fileNameLen)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
333	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
334	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
335	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
336	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
337	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  If(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  If(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    If(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  ';'  expected	118	None	add
338	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!Orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!Orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    if(!Orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	118	None	add
339	[BUG]  [BUGGY]  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    If    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
340	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    If    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
341	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    if    (orig!=    null    ||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
342	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
343	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
344	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
345	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
346	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.title))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&  orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&  orig.equals(nc.title))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
348	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
350	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
351	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset,  fileNameLen  +  extraFieldLen))  {  [CE]  no  suitable  method  found  for  equals(long,int)  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset,  fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(offset,  fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(long,int)	144	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
353	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
355	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  1  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
357	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
358	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT,  extraFieldLen))  {  [CE]  no  suitable  method  found  for  equals(int,int)  [FE]                AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT,  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  SHORT,  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(int,int)	144	None	replace
359	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
360	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  If(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    If(orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	65	None	add
361	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
362	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(Orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(Orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(Orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
363	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.title))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&  orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&  orig.equals(nc.title))  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
365	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
366	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  name.equals(nc.name))  {  [CE]  cannot  find  symbol  name  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  name.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  name.equals(nc.name))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	66	None	replace
367	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.contains(orig))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
368	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
369	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
370	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	48	None	add
371	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
372	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
373	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	48	None	add
374	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.title,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.title,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.title,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
375	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
376	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.title,  orig,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.title,  orig,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.title,  orig,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
377	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.fileName);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.fileName);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.fileName);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
378	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.name);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.name);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.name);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
380	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
382	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
384	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
386	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	45	1	replace
387	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
388	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
389	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	103	None	add
390	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  ||.orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
391	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig  >=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
392	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
393	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze  +  1);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
394	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze)+  1;	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
395	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
396	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
397	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.contains  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.contains  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.contains	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	90	None	replace
398	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	90	None	replace
399	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	90	None	replace
400	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.con  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.con  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.con	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	90	None	replace
401	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
402	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
403	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(Orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(Orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
404	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
405	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(Nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(Nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&!orig.equals(Nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
406	[BUG]  [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  object  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!object.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  object	100	None	replace
407	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!object.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!object.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
408	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
409	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  If(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  If(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    If(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	140	None	add
410	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
411	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(z.getName())||  encoding.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(z.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    if(!orig.equals(z.getName())||  encoding.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
412	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
413	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
414	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  	non-compiled	[CE]  ';'  expected	143	None	add
415	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
416	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  additionalFieldLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  additionalFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  additionalFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	143	None	add
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
418	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
420	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
422	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
423	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
424	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    If(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  ';'  expected	116	None	add
425	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
426	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig  >=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
427	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig  >>  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
428	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
429	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
430	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	63	None	add
431	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	63	None	add
432	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
433	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
434	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
435	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment)  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment)	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  ')'  expected	97	None	replace
436	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
437	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.containsKey(  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.containsKey(  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.containsKey(	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
438	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.contains  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.contains  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&! "entriesWithoutUTF8Flag.contains	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
440	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	137	2	replace
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	137	1	replace
442	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	137	1	replace
443	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.fileName))  {  [CE]  cannot  find  symbol  fileName  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.fileName))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  orig.equals(nc.fileName))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	137	None	replace
444	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())&&  orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())&&  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
445	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	111	1	replace
446	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||  encoding.equals(nc.name))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	111	1	replace
447	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
448	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
449	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
450	[BUG]  [BUGGY]  ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entry,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entry,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entry,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
451	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
452	[BUG]  [BUGGY]  Archive.readFully(orig);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  Archive.readFully(orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	Archive.readFully(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
453	[BUG]  [BUGGY]  ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	ArchiveEntry  entry  =  entriesWithoutUTF8Flag.get(ze);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
455	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(nc!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
457	[BUG]  [BUGGY]  if(nc!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(nc!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(nc!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
458	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
459	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	46	None	add
460	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig  ==  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
461	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig  >=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
462	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig  >>  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
463	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
464	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!Orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!Orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!orig.equals(ze.getName())&&!Orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
465	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())&&!orig.equals(nc.title))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())&&!orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())&&!orig.equals(nc.title))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.title))    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
466	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze  +  1);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze  +  1);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
467	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze)+  1;  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze)+  1;	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
468	[BUG]  [BUGGY]  NameAndComment  enc  =  noUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  noUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  noUTF8Flag.get(ze);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
469	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  nc);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
470	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(0);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(0);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(0);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
471	[BUG]  [BUGGY]  NameAndComment  enc  =  entryEntriesWithoutUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
472	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
473	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
474	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    if(!Orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
475	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
476	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(z.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(z.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    if(!orig.equals(z.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
477	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
478	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
479	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
480	[BUG]  [BUGGY]  For(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  For(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	For(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	122	None	replace
481	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
482	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  }	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
483	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
484	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  ';'  expected	136	None	add
485	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
486	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
487	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  (!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  (!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    (!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  not  a  statement	136	None	add
488	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
489	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	75	None	replace
490	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  Orig  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	75	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	51	2	replace
492	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	51	2	replace
493	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getQualifiedName()))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getQualifiedName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getQualifiedName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
494	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getFileName()))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getFileName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
495	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getRelativeHeader()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
496	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||!orig.equals(ze.getLocalFileName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
497	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    if  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
498	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    If  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
499	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  >=  null  ||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  >=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    if  (orig  >=  null  ||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
500	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    If  (orig!=  null  ||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
501	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
502	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
503	[BUG]  [BUGGY]  For(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  For(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	For(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	102	None	replace
504	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
505	[BUG]  [BUGGY]  For(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  For(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	For(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	102	None	replace
506	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())||  nc.comment.equals(orig.name))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())||  nc.comment.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())||  nc.comment.equals(orig.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
508	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
510	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	104	1	replace
511	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(nc.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(nc.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(nc.getName())||!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
512	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
513	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
514	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
515	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  (!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  (!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    (!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  not  a  statement	77	None	add
516	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
517	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
518	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
519	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
520	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
521	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >>  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
523	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(offset))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(offset))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(localExtraData))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals(localExtraData))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
525	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(localExtraData))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(localExtraData))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(localExtraData))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
526	[BUG]  [BUGGY]  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
527	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
528	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
529	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
530	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
531	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
532	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
533	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
534	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
535	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
536	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
537	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	61	None	add
538	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
539	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
540	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >>  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >>  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >>  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
541	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
542	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
543	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	13	None	add
544	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  ||.orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
545	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  >=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
546	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
547	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  cannot  find  symbol  Orig  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!Orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	71	None	replace
548	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!Orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
549	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!Orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
550	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
551	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	110	None	add
552	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
553	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
554	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  >=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
555	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  ';'  expected	110	None	add
556	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.getName())&&!fileNameLen.equals(orig.name))  {	  if    (!fileNameLen.equals(orig.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
557	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.name)&&!fileNameLen.equals(orig.getName()))  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.name)&&!fileNameLen.equals(orig.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.name)&&!fileNameLen.equals(orig.getName()))  {	  if    (!fileNameLen.equals(orig.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
559	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
561	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||  nc.name.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
563	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  nc.name.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
565	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
567	[BUG]  [BUGGY]  if(orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	2	replace
568	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.fileNameLength.equals(orig))  {  [CE]  cannot  find  symbol  fileNameLength  [FE]              AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.fileNameLength.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  nc.fileNameLength.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol  fileNameLength	139	None	replace
569	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze  +  1);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze  +  1);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
570	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  nc);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  nc);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  nc);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
571	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze)+  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze)+  1;  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze)+  1;	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
572	[BUG]  [BUGGY]  NameAndComment  t  =  entryEntriesWithoutUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entryEntriesWithoutUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entryEntriesWithoutUTF8Flag.get(ze);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
573	[BUG]  [BUGGY]  NameAndComment  t  =  noUTF8Flag.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  noUTF8Flag.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  noUTF8Flag.get(ze);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
574	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  Orig  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	89	None	replace
575	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
576	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
577	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
578	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
579	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(nc.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getLocalFileName()))    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
580	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getLocalFileName()))    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
581	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze,  nc.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze,  nc.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze,  nc.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getLocalFileName()))    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
582	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(archiveName.getLocalFileName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(archiveName.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(archiveName.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getLocalFileName()))    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
583	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
584	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    If  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  ';'  expected	44	None	add
585	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!Orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!Orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    if  (!Orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
586	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!object.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!object.equals(ze.getName())&&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    if  (!object.equals(ze.getName())&&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
587	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&!Orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&!Orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&!Orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig!=    null    &&!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
588	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  if  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  if  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  if  (orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig!=    null    &&!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
589	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc,  orig.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
590	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(0);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
591	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
592	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
593	[BUG]  [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    orig,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
594	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    orig,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
595	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  zipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    orig,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
596	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.getName())&&!orig.equals(orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
597	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLen))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLen))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
598	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig))  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
599	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(offset))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(offset))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())&&!fileNameLen.equals(offset))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
600	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLength))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLength))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())&&!fileNameLen.equals(extraFieldLength))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
601	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.contains  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.contains  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.contains	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
602	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!localExtraData.containsKey(orig))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!localExtraData.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!localExtraData.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
603	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&! "orig.equals(fileNameLen  +  extraFieldLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  if(!orig.equals(ze.getName())&&! "orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    if(!orig.equals(ze.getName())&&! "orig.equals(fileNameLen  +  extraFieldLen))  {	  	non-compiled	[CE]  unclosed  string  literal	143	None	add
604	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  	non-compiled	[CE]  not  a  statement	143	None	add
605	[BUG]  [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	115	None	replace
606	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&! "orig.equals(entriesWithoutUTF8Flag))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&! "orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!orig.equals(ze.getName())&&! "orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  unclosed  string  literal	17	None	add
607	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  for(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  for(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    for(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {	  	non-compiled	[CE]  not  a  statement	17	None	add
608	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
609	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
610	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
612	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	compilable	  [FE]  AssertionFailedError  	139	1	replace
613	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.fileNameLen.equals(orig))  {  [CE]  cannot  find  symbol  fileNameLen  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.fileNameLen.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  nc.fileNameLen.equals(orig))  {	  if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol  fileNameLen	139	None	replace
614	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  if(!Orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null)  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
616	[BUG]  [BUGGY]  if(orig!=  null)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	75	1	replace
617	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||! "orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||! "orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||! "orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	110	None	add
618	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
619	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	127	None	add
620	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
621	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {  [CE]  cannot  find  symbol  entriesWithoutUTF8  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {	  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF8	18	None	replace
622	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  &&! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  &&! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  &&! "orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	46	None	add
623	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  &&! "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (orig  ==  null  &&! "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    if  (orig  ==  null  &&! "orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
624	[BUG]  [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (Orig  ==  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  &&!orig.equals(ze.getName()))  {  if  (Orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    if  (Orig  ==  null  &&!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
625	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig!=  null  &&! "orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  if(orig!=  null  &&! "orig.equals(ze.getName())||  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    if(orig!=  null  &&! "orig.equals(ze.getName())||  orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	134	None	add
626	[BUG]  [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  object  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!object.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!object.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  object	100	None	replace
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
628	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	111	2	replace
629	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig))  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
630	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig))  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
631	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.orig))  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
632	[BUG]  [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
633	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
634	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  nameMap.put(ze.getName(),  nc);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
635	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
636	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	38	None	replace
637	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!   "goog.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!   "goog.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  ||!   "goog.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    if    (orig!=    null    ||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	105	None	replace
638	[BUG]  [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (!orig.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
639	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
640	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
641	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(entriesWithoutUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
642	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	126	None	replace
643	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(externFieldLen))  {  [CE]  cannot  find  symbol  externFieldLen  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(externFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(externFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	non-compiled	[CE]  cannot  find  symbol  externFieldLen	78	None	replace
644	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!orig.equals(fileNameLen)&&! "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  if(!orig.equals(fileNameLen)&&! "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    if(!orig.equals(fileNameLen)&&! "orig.equals(fileNameLen))  {	  	non-compiled	[CE]  unclosed  string  literal	118	None	add
645	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    for(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  not  a  statement	81	None	add
646	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
647	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
648	[BUG]  [BUGGY]  if(extraFieldLen!=  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen!=  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen!=  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
649	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(file  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(file  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!object.equals(ze.getName())&&!orig.equals(file	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
650	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [CE]  cannot  find  symbol  title  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.title))  {	  if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  title	128	None	replace
651	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(nc.name))  {  if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if(orig!=  null  ||! "orig.equals(ze.getName())||!orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	103	None	add
652	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
653	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
654	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(nc.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(nc.getName())&&!orig.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(extraFieldLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(extraFieldLen)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
656	[BUG]  [BUGGY]  if(!orig.equals(extraFieldLen)&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(extraFieldLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(extraFieldLen)&&!orig.equals(fileNameLen))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	119	1	replace
657	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName()))  {  if(orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    >>    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
658	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(ze!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(ze!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
660	[BUG]  [BUGGY]  if(ze!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(ze!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(ze!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
661	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))    {    if(!orig.equals(ze.getName())||!entriesWithoutUTF7Flag.containsKey(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
663	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
664	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
665	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
666	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(fileNameLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
667	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(fileNameLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
668	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  filesWithoutUTF8Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  filesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(ze.getName())||  filesWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
669	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF7Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(ze.getName())||  entriesWithoutUTF7Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(ze.getName())||  entriesWithoutUTF7Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
670	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(org))  {  [CE]  cannot  find  symbol  org  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(org))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(org))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  org	88	None	replace
671	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&! "orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  if(orig!=  null  &&! "orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if(orig!=  null  &&! "orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  	non-compiled	[CE]  unclosed  string  literal	28	None	add
672	[BUG]  [BUGGY]  if  (!fileNameLen.equals(nc.name)&&!orig.equals(nc.fileNameLen))  {  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!fileNameLen.equals(nc.name)&&!orig.equals(nc.fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!fileNameLen.equals(nc.name)&&!orig.equals(nc.fileNameLen))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
673	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  for(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  not  a  statement	57	None	add
674	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
675	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
676	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
677	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    orig,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
678	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(offset);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    orig,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
679	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(orig);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
680	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
681	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ce);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ce);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ce);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
682	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(offset);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(offset);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(offset);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
683	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
684	[BUG]  [BUGGY]  if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  Orig  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!Orig.equals(ze.getName())||!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	89	None	replace
685	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	89	None	replace
686	[BUG]  [BUGGY]  if  (!orig.equals(z.getName())&&!fileNameLen.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(z.getName())&&!fileNameLen.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(z.getName())&&!fileNameLen.equals(nc.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(ze.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	41	None	replace
687	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.url))  {  [CE]  cannot  find  symbol  url  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.url))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.url))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol  url	12	None	replace
688	[BUG]  [BUGGY]  if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(nc.fileNameLen))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(nc.fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name.getName())&&!fileNameLen.equals(nc.fileNameLen))  {	  if    (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
689	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  &&! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
690	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!addCompressedSize)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  addCompressedSize  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!addCompressedSize)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!addCompressedSize)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  addCompressedSize	125	None	replace
691	[BUG]  [BUGGY]  if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!addUnicodeExtraFields)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
692	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
693	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(fileName,  nc.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
694	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
695	[BUG]  [BUGGY]  if(extraFieldLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
696	[BUG]  [BUGGY]  if(fileNameLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(fileNameLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(fileNameLen!=  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
697	[BUG]  [BUGGY]  if(extraFieldLen  ==  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  ==  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  ==  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
698	[BUG]  [BUGGY]  if(orig!=  null)  {  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	23	None	replace
699	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
700	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  nc.name  ==  nc.name)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  nc.name  ==  nc.name)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||  nc.name  ==  nc.name)  {  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
701	[BUG]  [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  not  a  statement	122	None	replace
702	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(file  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(file  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(file	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ')'  expected	122	None	replace
703	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "goog.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
704	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
705	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  for(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    for(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  not  a  statement	83	None	add
706	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.title,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.title,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
707	[BUG]  [BUGGY]  if(!orig.equals(nc.getName())&&  encoding.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(nc.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(nc.getName())&&  encoding.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
708	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.url))  {  [CE]  cannot  find  symbol  url  [FE]      NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.url))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  encoding.equals(nc.url))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  url	141	None	replace
709	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {  [CE]  cannot  find  symbol  title  [FE]        NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  encoding.equals(nc.title))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  title	141	None	replace
710	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())||  orig.equals(Nc.comment))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())||  orig.equals(Nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    if(!orig.equals(ze.getName())||  orig.equals(Nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
711	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
712	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
713	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen,  offset  +  extraFieldLen))  {  [CE]  no  suitable  method  found  for  equals(int,long)  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen,  offset  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen,  offset  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	non-compiled	[CE]  no  suitable  method  found  for  equals(int,long)	144	None	replace
714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
715	[BUG]  [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
716	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  LAST_OFFSET_FOR_FILENAME_LENGTH  +  extraFieldLen))  {  [CE]  cannot  find  symbol  LAST_OFFSET_FOR_FILENAME_LENGTH  [FE]          AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  LAST_OFFSET_FOR_FILENAME_LENGTH  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen  +  LAST_OFFSET_FOR_FILENAME_LENGTH  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	non-compiled	[CE]  cannot  find  symbol  LAST_OFFSET_FOR_FILENAME_LENGTH	144	None	replace
717	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
718	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.comment);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
719	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.sourceName);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.sourceName);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.sourceName);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
720	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.internal);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.internal);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.internal);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
721	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.encoding);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.encoding);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.encoding);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
722	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&  orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
723	[BUG]  [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&  orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
724	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  nc.enabled)  {  [CE]  cannot  find  symbol  enabled  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  nc.enabled)  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  nc.enabled)  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  enabled	66	None	replace
725	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
726	[BUG]  [BUGGY]  if(orig!=  null)  {  if  (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if  (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if  (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
727	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
728	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
729	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig.name))  {  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
731	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
732	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag!=  null)  {  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
733	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.cont  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.cont  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig)||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.cont	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	87	None	replace
734	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||! "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||! "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    if  (orig  ==  null  ||! "orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	7	None	add
735	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    (orig  ==  null  ||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  not  a  statement	7	None	add
736	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.Comment.equals(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.Comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    if(!orig.equals(ze.getName())||  nc.Comment.equals(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
737	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(!orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  unclosed  string  literal	77	None	add
738	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  for(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    for(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  not  a  statement	77	None	add
739	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!orig.equals(ze.getName())&&! "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))  {  if  (!orig.equals(ze.getName())&&! "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (!orig.equals(ze.getName())&&!orig.equals(ze.getName()))    {    if  (!orig.equals(ze.getName())&&! "orig.equals(ze.getName()))  {	  	non-compiled	[CE]  unclosed  string  literal	44	None	add
740	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.title);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
741	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
742	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(name,  nc.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
743	[BUG]  [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
744	[BUG]  [BUGGY]  for(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  for(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	for(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
745	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(fileName.getLocalFileName()))  {  [CE]  cannot  find  symbol  fileName  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileName.getLocalFileName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(fileName.getLocalFileName()))  {	  if(orig!=    null    &&!orig.equals(ze.getLocalFileName()))    {    	non-compiled	[CE]  cannot  find  symbol  fileName	133	None	replace
746	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  NullPointerException  	135	1	replace
747	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(ze.getName()))  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  encoding.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  NullPointerException  	135	1	replace
748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
749	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	1	replace
750	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
751	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	135	2	replace
752	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	13	None	add
753	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
754	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
755	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ce);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ce);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ce);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
756	[BUG]  [BUGGY]  archive.seek(orig);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.seek(orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.seek(orig);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
757	[BUG]  [BUGGY]  archive.readFully(fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(fileNameLen);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
758	[BUG]  [BUGGY]  archive.readFully(offset);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(offset);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(offset);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
759	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
760	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(zipEncoding)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
761	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(archiveName)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(archiveName)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
762	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(archiveName)&&!orig.equals(extraFieldLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(archiveName)&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(archiveName)&&!orig.equals(extraFieldLen))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	117	1	replace
763	[BUG]  [BUGGY]  if(orig.equals(nc.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(nc.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(nc.getName())&&!orig.equals(nc.name))  {	  if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
764	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
765	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  zipEncoding);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  zipEncoding);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  zipEncoding);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
766	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
767	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())&|  encoding.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.name))  {  if(!orig.equals(ze.getName())&|  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    if(!orig.equals(ze.getName())&|  encoding.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
768	[BUG]  [BUGGY]  if(orig!=  null)  {  (orig!=  null  &&!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  (orig!=  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  (orig!=  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	56	None	replace
769	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&! "orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&! "orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&! "orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	15	None	add
770	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(ze.getName())&&!orig.equals(nc.title))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
771	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    if(orig!=  null  ||.orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
772	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
773	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment)  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment)  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment)	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  ')'  expected	99	None	replace
774	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
775	[BUG]  [BUGGY]  if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig.name))  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(ze.getName())&&!fileNameLen.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	43	None	replace
776	[BUG]  [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig.name))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name())&&!fileNameLen.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
777	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!orig.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
778	[BUG]  [BUGGY]  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
779	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
780	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
781	[BUG]  [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  if(!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
782	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&! "goog.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&! "goog.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(orig!=  null  &&! "goog.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig!=    null    &&!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	101	None	replace
783	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&! "orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&! "orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  &&! "orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
784	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
785	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
786	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(file  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(file  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!Orig.equals(ze.getName())&&!orig.equals(file	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
787	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  nc.name.equals(orig))  {  if(!Orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!Orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
788	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
789	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
790	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.equals(extraFieldLen))  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!fileNameLen.equals(extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	121	None	replace
791	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(file  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(file  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())&&!   "orig.equals(file	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
792	[BUG]  [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name)&&!fileNameLen.equals(nc.getName()))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
793	[BUG]  [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(nc.name))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name())&&!fileNameLen.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name())&&!fileNameLen.equals(nc.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
795	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&  encoding.equals(nc.name))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	2	replace
796	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
797	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())&&  nc.comment.equals(orig))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	113	1	replace
798	[BUG]  [BUGGY]  if(orig  ==  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  archive.readFully(orig);  }  else  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
799	[BUG]  [BUGGY]  if(orig  ==  null)  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
800	[BUG]  [BUGGY]  if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archives.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archives.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  archive.readFully(orig);  }  else  {  archives.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
801	[BUG]  [BUGGY]  if(orig!=  null)  {  archive.readFully(nc);  }  else  {  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  archive.readFully(nc);  }  else  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  archive.readFully(nc);  }  else  {  archive.readFully(orig);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
802	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||?orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  if(orig!=  null  ||?orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if(orig!=  null  ||?orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
803	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())&&! "orig.equals(nc.comment))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  if(!orig.equals(ze.getName())&&! "orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    if(!orig.equals(ze.getName())&&! "orig.equals(nc.comment))  {	  	non-compiled	[CE]  unclosed  string  literal	11	None	add
804	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    for(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  	non-compiled	[CE]  not  a  statement	11	None	add
805	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
806	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  not  a  statement	90	None	replace
807	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ')'  expected	90	None	replace
808	[BUG]  [BUGGY]  if(orig!=  null)  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
810	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
812	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	84	1	replace
813	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.fileNameLen))  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.fileNameLen))  {	  if    (!orig.equals(nc.getName())    &&!fileNameLen.equals(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
814	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig!=  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig!=  null  ||.orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
815	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||  orig  ==  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
816	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig  ==  null  &&!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig  ==  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
817	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(zipEncoding))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
818	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(zipEncoding))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig    ==    null    &&!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
819	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(ze.getName()))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
820	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!orig.equals(nc.name))  {	  if    (!fileNameLen.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
821	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  If(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    If(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	92	None	replace
822	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
823	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	99	None	replace
824	[BUG]  [BUGGY]  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
825	[BUG]  [BUGGY]  if(arrayLen  >  0)  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(arrayLen  >  0)  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(arrayLen  >  0)  {  If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    If(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
826	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&?orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig  ==  null  &&?orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig  ==  null  &&?orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
827	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameEnd))  {  [CE]  cannot  find  symbol  fileNameEnd  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameEnd))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(fileNameLen)&&!orig.equals(fileNameEnd))  {	  if(!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  fileNameEnd	119	None	replace
828	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.comement.equals(orig))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  if(!orig.equals(ze.getName())||  nc.comement.equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    nc.comment.equals(orig))    {    if(!orig.equals(ze.getName())||  nc.comement.equals(orig))  {	  	non-compiled	[CE]  illegal  start  of  expression	138	None	add
829	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	69	None	replace
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())  ||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
831	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())  ||!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getName())  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(ze.getName())  ||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
832	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getComment()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||!orig.equals(ze.getComment()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
833	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getComment()))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(ze.getComment()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(ze.getComment()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	69	1	replace
834	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(z.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  if(!orig.equals(z.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    if(!orig.equals(z.getName())||  entriesWithoutUTF8Flag.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
835	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(externalExtraData))  {  [CE]  cannot  find  symbol  externalExtraData  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(externalExtraData))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(externalExtraData))  {	  if(!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	non-compiled	[CE]  cannot  find  symbol  externalExtraData	78	None	replace
836	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
837	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
838	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8F  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8F  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipArchiveEntry  entry  =  entriesWithoutUTF8F	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  ';'  expected	126	None	replace
839	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipUtil.setNameAndCommentFromExtraFields  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipUtil.setNameAndCommentFromExtraFields  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  ZipUtil.setNameAndCommentFromExtraFields	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  ';'  expected	126	None	replace
840	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  [CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(ze))  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig);  }  else  {	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig);    	non-compiled	[CE]  variable  nc  is  already  defined  in  method  resolveLocalFileHeaderData(Map<ZipArchiveEntry,NameAndComment>)	126	None	replace
841	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals( " "))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&!orig.equals( " "))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
842	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals( " "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals( " "))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals( " "))  {	  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	82	2	replace
843	[BUG]  [BUGGY]  if(extraFieldLen  >  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  >  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  >  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
844	[BUG]  [BUGGY]  if(extraFieldLen  <  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  <  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  <  0)  {  if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
845	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!Orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	3	None	replace
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	111	1	replace
847	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	111	1	replace
848	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
849	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  nc.comment.equals(orig))  {  for(!orig.equals(ze.getName())||  orig.equals(nc.name))  {  }	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    for(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  not  a  statement	102	None	replace
850	[BUG]  [BUGGY]  if(orig!=  null  &&!Orig.equals(ze.getName()))  {  [CE]  cannot  find  symbol  Orig  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!Orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!Orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    if    (orig!=    null    &&!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	101	None	replace
851	[BUG]  [BUGGY]  if(extraFieldLen  >  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  >  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  >  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
852	[BUG]  [BUGGY]  if(extraFieldLen  <  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  <  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  <  0)  {  if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
853	[BUG]  [BUGGY]  if(array.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  cannot  find  symbol  array  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(array.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(array.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!object.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  cannot  find  symbol  array	4	None	replace
854	[BUG]  [BUGGY]  if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  z  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
855	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
856	[BUG]  [BUGGY]  if(orig.equals(z.getName())||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [CE]  cannot  find  symbol  z  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(z.getName())||!orig.equals(z.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(z.getName())||!orig.equals(z.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(z.getName())||    orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  z	131	None	replace
857	[BUG]  [BUGGY]  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If(!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    If(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	97	None	replace
858	[BUG]  [BUGGY]  if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
859	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "goog.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
860	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "fileName ".equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!   "fileName ".equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	121	1	replace
861	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "fileName ".equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "fileName ".equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "fileName ".equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	121	1	replace
862	[BUG]  [BUGGY]  if(offset!=  0)  {  archive.readFully(offset);  }  else  {  archive.readFully(offset);  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(offset!=  0)  {  archive.readFully(offset);  }  else  {  archive.readFully(offset);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(offset!=  0)  {  archive.readFully(offset);  }  else  {  archive.readFully(offset);  }	  if(orig!=    null)    {    archive.readFully(orig);    }    else    {    archive.readFully(orig);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
863	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	128	2	replace
864	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.comment))  {	  if(orig    ==    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	128	2	replace
865	[BUG]  [BUGGY]  if  (!orig.equals(nc.name,  nc.getName())&&!fileNameLen.equals(nc.fileNameLen))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name,  nc.getName())&&!fileNameLen.equals(nc.fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name,  nc.getName())&&!fileNameLen.equals(nc.fileNameLen))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
866	[BUG]  [BUGGY]  if  (!orig.equals(nc.name())  &&!fileNameLen.equals(nc.orig))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.name())  &&!fileNameLen.equals(nc.orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.name())  &&!fileNameLen.equals(nc.orig))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
867	[BUG]  [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
868	[BUG]  [BUGGY]  NameAndComment  enc  =  entryEncoding.get(ze);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  enc  =  entryEncoding.get(ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  enc  =  entryEncoding.get(ze);	  NameAndComment    enc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
869	[BUG]  [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(orig!=  null  ||! "orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  	non-compiled	[CE]  unclosed  string  literal	85	None	add
870	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig.equals(ze.getName())&&! "orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  unclosed  string  literal	81	None	add
871	[BUG]  [BUGGY]  if  (!orig.equals(nc.getName())  &&!fileNameLen.equals(orig,  ze.name))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(nc.getName())  &&!fileNameLen.equals(orig,  ze.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(nc.getName())  &&!fileNameLen.equals(orig,  ze.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(ze.name))    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
872	[BUG]  [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  &&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  &&.orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  &&.orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
873	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
874	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
875	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
876	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig.equals(ze.getName())&&    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	66	2	replace
877	[BUG]  [BUGGY]  if(Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  cannot  find  symbol  Orig  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(Orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(Orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!Orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  cannot  find  symbol  Orig	75	None	replace
878	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  entriesWithoutUTF8Flag);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  entriesWithoutUTF8Flag);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  entriesWithoutUTF8Flag);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
879	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
880	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
881	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF7Flag))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF7Flag))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF7Flag))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
882	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))  {  if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8Flag))    {    if(!orig.equals(ze.getName())&&!orig.equals(entriesWithoutUTF8))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
883	[BUG]  [BUGGY]  if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  >  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
884	[BUG]  [BUGGY]  if(extraFieldLen  <  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(extraFieldLen  <  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(extraFieldLen  <  0)  {  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
885	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(nc.name,  orig,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
886	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ce);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
887	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.title);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
888	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	141	1	replace
889	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  encoding.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    encoding.equals(nc.name))    {    	compilable	  [FE]  NullPointerException  	141	1	replace
890	[BUG]  [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if  (!orig.equals(fileNameLen.getName())&&!fileNameLen.equals(orig.name))  {	  if    (!orig.equals(nc.getName())&&!fileNameLen.equals(orig.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
891	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(extraFieldLen))    {    if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(extraFieldLen))  {	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
892	[BUG]  [BUGGY]  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (orig  ==  null  &&!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (orig  ==  null  &&!orig.equals(ze.getName()))  {	  if    (orig!=    null    &&!orig.equals(ze.getName()))    {    If    (orig!=    null    &&!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
893	[BUG]  [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (!orig.equals(ze.getName())||!orig.equals(nc.comment))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    If    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
894	[BUG]  [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entryEncoding.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entry);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
895	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entries);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entries);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.entries);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.entry);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
896	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
897	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  orig);  }  else  {  nameMap.put(ze.getName(),  nc);  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
898	[BUG]  [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  archive.readFully(orig,  nc);  }  else  {  throw  new  IllegalStateException( " ");  }	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    archive.readFully(orig,    orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
899	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName())||!orig.equals(nc.name))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName())||!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName())||!orig.equals(nc.name))  {	  if    (!orig.equals(ze.getName())||!orig.equals(nc.name))    {    if    (!orig.equals(ze.getName())||!orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	76	None	replace
900	[BUG]  [BUGGY]  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	(!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  not  a  statement	72	None	replace
901	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!orig.equals(ze.getName())||!   "orig.equals(ze.getName()))    {    	non-compiled	[CE]  unclosed  string  literal	108	None	replace
902	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
903	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())||!orig.equals(ze.getName())||  orig.equals(nc.comment))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	compilable	  [FE]  AssertionFailedError  	93	1	replace
904	[BUG]  [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(z.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig.equals(z.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig.equals(z.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
905	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getLocalFileName())||!orig.equals(ze.getName()))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getLocalFileName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getLocalFileName())||!orig.equals(ze.getName()))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
906	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(orig))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||  entriesWithoutUTF8Flag.contains(orig))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
907	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
908	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&  orig.equals(nc.comment))  {	  if(orig!=    null    &&!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
909	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entryEncoding  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entryEncoding	90	None	replace
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
911	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	2	replace
912	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
913	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(ze.getName())&&!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    orig.equals(nc.name))    {    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
914	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||?!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())||  orig.equals(nc.name))  {  if(orig  ==  null  ||?!orig.equals(ze.getName())||  orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig    ==    null    ||!orig.equals(ze.getName())||    orig.equals(nc.name))    {    if(orig  ==  null  ||?!orig.equals(ze.getName())||  orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
915	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!open)  {  archive.readFully(orig);  }  [CE]  cannot  find  symbol  open  [FE]                        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!open)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!open)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  cannot  find  symbol  open	125	None	replace
916	[BUG]  [BUGGY]  if(orig!=  null)  {  if(!closed)  {  archive.readFully(orig);  }  [CE]  no  suitable  method  found  for  readFully(String)  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null)  {  if(!closed)  {  archive.readFully(orig);  }  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null)  {  if(!closed)  {  archive.readFully(orig);  }	  if(orig!=    null)    {    if(!addDummyByte)    {    archive.readFully(orig);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(String)	125	None	replace
917	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  if(!Orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    if    (!Orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
918	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.title);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.title);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.fileName,  nc.title);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.fileName,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
919	[BUG]  [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileNameLen);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileNameLen);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(orig,  nc.name,  nc.fileNameLen);	  NameAndComment    nc    =    entriesWithoutUTF8Flag.get(ze);    ZipUtil.setNameAndCommentFromExtraFields(orig,    nc.name,    nc.comment);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
920	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
921	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig  ==  null  ||!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
923	[BUG]  [BUGGY]  if(orig  ==  null  ||!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig  ==  null  ||!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig  ==  null  ||!orig.equals(fileNameLen)&&!orig.equals(fileNameLen))  {	  if(orig!=    null    ||!orig.equals(ze.getName())&&!orig.equals(fileNameLen))    {    	compilable	  [FE]  AssertionFailedError  	86	1	replace
924	[BUG]  [BUGGY]  if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(offset  <  0  ||  offset  >  LFH_OFFSET_FOR_FILENAME_LENGTH)  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
925	[BUG]  [BUGGY]  if(entryEncoding.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEncoding.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEncoding.equals(ze.getName()))  {  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
926	[BUG]  [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||.equals(ze.getName()))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if  (orig  ==  null  ||!orig.equals(ze.getName()))  {  if  (orig  ==  null  ||.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if    (orig    ==    null    ||!orig.equals(ze.getName()))    {    if  (orig  ==  null  ||.equals(ze.getName()))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
927	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig  ==  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
928	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (orig!=  null  ||!orig.equals(ze.getName()))  {	  if    (orig!=    null    ||!orig.equals(ze.getName()))    {    If    (orig!=    null    ||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	21	None	replace
929	[BUG]  [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entryEntriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!Orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entryEntriesWithoutUTF8Flag	89	None	replace
930	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&!   "orig.equals(nc.name))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
931	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(nc.comment))  {  [CE]  unclosed  string  literal  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "goog.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "goog.equals(nc.comment))  {	  if(!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(!orig.equals(ze.getName())&&!   "orig.equals(nc.name))    {    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
932	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())||! "orig.equals(fileNameLen))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))  {  if(!orig.equals(ze.getName())||! "orig.equals(fileNameLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||!orig.equals(fileNameLen))    {    if(!orig.equals(ze.getName())||! "orig.equals(fileNameLen))  {	  	non-compiled	[CE]  unclosed  string  literal	83	None	add
933	[BUG]  [BUGGY]  if(!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    If    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  ';'  expected	88	None	replace
934	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF6Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entriesWithoutUTF6Flag  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF6Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF6Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entriesWithoutUTF6Flag	107	None	replace
935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
936	[BUG]  [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF7Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	107	2	replace
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!orig.equals(offset  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
938	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset  +  extraFieldLen))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!orig.equals(offset  +  extraFieldLen))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!orig.equals(offset  +  extraFieldLen))  {	  if(!orig.equals(ze.getName())&&!orig.equals(fileNameLen    +    extraFieldLen))    {    	compilable	  [FE]  AssertionFailedError  	144	1	replace
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(zipEncoding)&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
940	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(zipEncoding)&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(zipEncoding)&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if(orig!=    null    &&!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
941	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&  orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
942	[BUG]  [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&  orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&  orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if(orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	compilable	  [FE]  AssertionFailedError  	51	1	replace
943	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    if(!orig.equals(z.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
944	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(zer.getName())||  orig.equals(nc.comment))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())||  orig.equals(nc.comment))  {  if(!orig.equals(zer.getName())||  orig.equals(nc.comment))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())||    orig.equals(nc.comment))    {    if(!orig.equals(zer.getName())||  orig.equals(nc.comment))  {	  	non-compiled	[CE]  illegal  start  of  expression	136	None	add
945	[BUG]  [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  orig);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  orig);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	NameAndComment  t  =  entriesWithoutUTF8Flag.get(ze,  orig);	  NameAndComment    t    =    entriesWithoutUTF8Flag.get(ze);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
946	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(ze.getName()  ==  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(ze.getName()  ==  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
947	[BUG]  [BUGGY]  if(ze.getName()  ==  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(ze.getName()  ==  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(ze.getName()  ==  null  ||!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	87	1	replace
948	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(chog))  {  [CE]  cannot  find  symbol  chog  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(chog))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(chog))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  chog	87	None	replace
949	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&!orig.equals(nc.name))  {  if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=    null    &&!orig.equals(ze.getName())&&!orig.equals(nc.name))    {    if(orig!=  null  &&.orig.equals(ze.getName())&&!orig.equals(nc.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
950	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  unclosed  string  literal	106	None	replace
951	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag ".equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag ".equals(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
952	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag ".equals(orig))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag ".equals(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag ".equals(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	compilable	  [FE]  AssertionFailedError  	106	1	replace
953	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!extraFieldLen.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
954	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!fileNameLen.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
955	[BUG]  [BUGGY]  if(!orig.equals(ze.getName())&&!entryWithoutUTF8Flag.containsKey(orig))  {  [CE]  cannot  find  symbol  entryWithoutUTF8Flag  [FE]                AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(!orig.equals(ze.getName())&&!entryWithoutUTF8Flag.containsKey(orig))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(!orig.equals(ze.getName())&&!entryWithoutUTF8Flag.containsKey(orig))  {	  if    (!orig.equals(ze.getName())&&!entriesWithoutUTF8Flag.containsKey(orig))    {    if    (!orig.equals(ze.getName())&&!   "entriesWithoutUTF8Flag.containsKey(orig))    {    	non-compiled	[CE]  cannot  find  symbol  entryWithoutUTF8Flag	106	None	replace
956	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	add	if(orig!=  null  &&!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
957	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName())&&  entriesWithoutUTF8Flag.equals(nc.name))  {	  if(!orig.equals(ze.getName())||    entriesWithoutUTF8Flag.equals(nc.name))    {    	compilable	  [FE]  AssertionFailedError  	68	2	replace
958	[BUG]  [BUGGY]  archive.readFully(orig,  encoding);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(orig,  encoding);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(orig,  encoding);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
959	[BUG]  [BUGGY]  archive.readFully(orig,  ze);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  archive.readFully(orig,  ze);  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	archive.readFully(orig,  ze);	  archive.readFully(orig);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
960	[BUG]  [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	if(orig!=  null  &&!orig.equals(ze.getName()))  {  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
961	[BUG]  [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      archive.readFully(localExtraData);  ze.setExtra(localExtraData);  offsetEntry.dataOffset  =  offset  +  LFH_OFFSET_FOR_FILENAME_LENGTH  +  SHORT  +  SHORT  +  fileNameLen  +  extraFieldLen;  if  (entriesWithoutUTF8Flag.containsKey(ze))  {  String  orig  =  ze.getName();  NameAndComment  nc  =  entriesWithoutUTF8Flag.get(ze);  ZipUtil.setNameAndCommentFromExtraFields(ze,  nc.name,  nc.comment);      [BUGGY]  If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {  [BUGGY]      nameMap.remove(orig);  nameMap.put(ze.getName(),  ze);  }  }  }  }  [CLASS]  ZipFile  OffsetEntry  2  BoundedInputStream  NameAndComment  1  [METHOD]  resolveLocalFileHeaderData  [RETURN_TYPE]  void  NameAndComment>  entriesWithoutUTF8Flag  [VARIABLES]  byte[]  b  cdExtraData  cfdOffset  cfh  comment  fileName  localExtraData  name  sig  signatureBytes  zip64EocdOffset  boolean  addDummyByte  closed  found  hasCompressedSize  hasRelativeHeaderOffset  hasUTF8Flag  hasUncompressedSize  success  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  RandomAccessFile  archive  OffsetEntry  offsetEntry  ZipArchiveEntry  ze  String  archiveName  encoding  name  orig  NameAndComment  nc  Map  entries  entriesWithoutUTF8Flag  nameMap  noUTF8Flag  int  BYTE_SHIFT  CFD_LOCATOR_OFFSET  CFH_LEN  HASH_SIZE  MAX_EOCD_SIZE  MIN_EOCD_SIZE  NIBLET_MASK  POS_0  POS_1  POS_2  POS_3  ZIP64_EOCDL_LENGTH  ZIP64_EOCDL_LOCATOR_OFFSET  ZIP64_EOCD_CFD_LOCATOR_OFFSET  commentLen  count  curr  diskStart  extraFieldLen  extraLen  fileNameLen  lenToSkip  off  skipped  skippedNow  totalSkipped  versionMadeBy  long  CFH_SIG  LFH_OFFSET_FOR_FILENAME_LENGTH  dataOffset  headerOffset  loc  maxDistanceFromEnd  minDistanceFromEnd  off  offset  remaining  sig  start  stopSearching  time  Comparator  OFFSET_COMPARATOR  	projects/Compress10/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java	0.7071067811865475	837	837	1	replace	If  (!orig.equals(ze.getName())||!orig.equals(ze.getName()))  {	  if    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    If    (!orig.equals(ze.getName())||!orig.equals(ze.getName()))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
