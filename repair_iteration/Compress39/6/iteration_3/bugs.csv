bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
2	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	87	None	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isWhitespace(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(!Character.isWhitespace(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
4	[BUG]  [BUGGY]  if(!Character.isWhitespace(c)||!Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isWhitespace(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isWhitespace(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(!Character.isUpperCase(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
6	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)||!Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
7	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(char,char)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char)	76	None	replace
8	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	76	None	replace
9	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s,  c))  {  [CE]  no  suitable  method  found  for  of(String,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s,  c))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char)	76	None	replace
10	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(chars[i]))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	76	None	replace
11	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  s))  {  [CE]  no  suitable  method  found  for  of(char,String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c,  s))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,String)	76	None	replace
12	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s))  {  [CE]  no  suitable  method  found  for  of(String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(s))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String)	76	None	replace
13	[BUG]  [BUGGY]  if(c  ==  '')  {  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '')  {	  if(c!=    '')    {    	non-compiled	[CE]  empty  character  literal	41	None	replace
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '-')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
15	[BUG]  [BUGGY]  if(c!=  '-')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '+'  ||  c  ==  '+')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
17	[BUG]  [BUGGY]  if(c!=  '+'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '+'  ||  c  ==  '+')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '+'  ||  c  ==  '-')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
19	[BUG]  [BUGGY]  if(c!=  '+'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '+'  ||  c  ==  '-')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
20	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
21	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUnicodeString(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUnicodeString(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&!Character.isUnicodeString(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
22	[BUG]  [BUGGY]  if(c!=  'N'  &&!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'N'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
23	[BUG]  [BUGGY]  if(c  ==  'n'  &&!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
24	[BUG]  [BUGGY]  if(c!=  null  ||!Character.isISOControl(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  ||!Character.isISOControl(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
25	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isUpperCase(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isUpperCase(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
26	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isDefined(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isDefined(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
27	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isStatic(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isStatic(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n')  {	  if(c!=    '?')    {    if(c    >>    '?')    {    	compilable	  [FE]  ComparisonFailure  	20	1	replace
29	[BUG]  [BUGGY]  if(c!=  'n')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n')  {	  if(c!=    '?')    {    if(c    >>    '?')    {    	compilable	  [FE]  ComparisonFailure  	20	1	replace
30	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
31	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	93	None	replace
32	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(s))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
33	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	93	None	replace
34	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(String,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s,  chars[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char)	24	None	replace
35	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s[i]))  {  [CE]  array  required,  but  String  found  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  array  required,  but  String  found	24	None	replace
36	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  s))  {  [CE]  no  suitable  method  found  for  of(char,char,String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  s))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,String)	24	None	replace
37	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(char,  c,  chars[i]))  {  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(char,  c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(char,  c,  chars[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  '.class'  expected	24	None	replace
38	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i]),  s)  {  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i]),  s)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i]),  s)  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
39	[BUG]  [BUGGY]  sb.append('/');  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('/');  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('/');	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
40	[BUG]  [BUGGY]  sb.append(c,  chars[i]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(c,  chars[i]);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(c,  chars[i]);	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
41	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(String,char,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c,  chars[i]))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char,char)	2	None	replace
42	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s[i]))  {  [CE]  array  required,  but  String  found  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s[i]))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  array  required,  but  String  found	2	None	replace
43	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(String,char)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  chars[i]))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char)	2	None	replace
44	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  c))  {  [CE]  no  suitable  method  found  for  of(char,char,char)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,char)	2	None	replace
45	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  chars[i].equals(c))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  chars[i].equals(c))  {	  if    (!Character.isUnicode(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
46	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||!chars[i].equals('/'))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||!chars[i].equals('/'))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||!chars[i].equals('/'))  {	  if    (!Character.isUnicode(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
47	[BUG]  [BUGGY]  sb.append(':').append(c);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(':').append(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(':').append(c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
48	[BUG]  [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':')  {  sb.append(':');  }	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
49	[BUG]  [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  }	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
50	[BUG]  [BUGGY]  sb.append(':',  c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(':',  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(':',  c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ')')  {  [BUGGY]    '?')  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ')')  {	  if(c!=    '?')    {    if(c    	compilable	  [FE]  ComparisonFailure  	22	1	replace
52	[BUG]  [BUGGY]  if(c!=  ')')  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ')')  {  [BUGGY]    '?')  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ')')  {	  if(c!=    '?')    {    if(c    	compilable	  [FE]  ComparisonFailure  	22	1	replace
53	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(char,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char)	96	None	replace
54	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(chars[i]))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(chars[i]))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	96	None	replace
55	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(s,  c))  {  [CE]  no  suitable  method  found  for  of(String,char)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(s,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(s,  c))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char)	96	None	replace
56	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	96	None	replace
57	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  s)  {  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  s)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  s)  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	96	None	replace
58	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c!=  'n'  ||  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
59	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  ==  'n'  ||  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  ==  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c  ==  'n'  ||  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
60	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  ==  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c!=  'n'  ||  c  ==  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
61	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  >=  'n'  ||  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  >=  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c  >=  'n'  ||  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
62	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  >=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  >=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c!=  'n'  ||  c  >=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
63	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  >>  'n'  ||  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c  >>  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c  >>  'n'  ||  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
64	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  >>  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  if(c!=  'n'  ||  c  >>  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    if(c!=  'n'  ||  c  >>  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	73	None	add
65	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  chars[i]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c),  chars[i]);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c),  chars[i]);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
66	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c)+  1);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c)+  1);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
67	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c,  chars[i]));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c,  chars[i]));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c,  chars[i]));	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
68	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  c);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c),  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c),  c);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
69	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
70	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	15	None	replace
71	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)||!Character.isUnicodeBlock(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
72	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
73	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c,  chars[i]));  continue;  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c,  chars[i]));  continue;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c,  chars[i]));  continue;	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
74	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  chars[i]);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  chars[i]);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  chars[i]);	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '[')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '[')  {	  if(c!=    '?')    {    if(c    >=    '?')    {    	compilable	  [FE]  ComparisonFailure  	19	1	replace
76	[BUG]  [BUGGY]  if(c!=  '[')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '[')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '[')  {	  if(c!=    '?')    {    if(c    >=    '?')    {    	compilable	  [FE]  ComparisonFailure  	19	1	replace
77	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c!=  '?'  &&  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
78	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  ==  '?'  &&  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  ==  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c  ==  '?'  &&  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
79	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  >=  '?'  &&  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  >=  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c  >=  '?'  &&  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
80	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  >=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  >=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c!=  '?'  &&  c  >=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
81	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  >>  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  >>  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c!=  '?'  &&  c  >>  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
82	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c!=  '?'  &&  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c!=  '?'  &&  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
83	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  >>  '?'  &&  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  if(c  >>  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    if(c  >>  '?'  &&  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  ||  c!=  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
85	[BUG]  [BUGGY]  if(c  ==  '?'  ||  c!=  '+')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  ||  c!=  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
87	[BUG]  [BUGGY]  if(c  ==  '?'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
88	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  '?'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
89	[BUG]  [BUGGY]  if(c  >=  '?'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  '?'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
90	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  '?'  ||  c!=  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
91	[BUG]  [BUGGY]  if(c  >=  '?'  ||  c!=  '+')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  '?'  ||  c!=  '+')  {	  if(c!=    '?'    ||    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
92	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isWhitespace(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isWhitespace(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	100	None	replace
93	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	100	None	replace
94	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isWhitespace(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	100	None	replace
95	[BUG]  [BUGGY]  if(Character.UnicodeBlock  ==  null  &&!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock  ==  null  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock  ==  null  &&!Character.isWhitespace(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	100	None	replace
96	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isWhitespace(c)||  Character.UnicodeBlock.of(c);	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  ')'  expected	100	None	replace
97	[BUG]  [BUGGY]  if  (!Cycle.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  package  Cycle  does  not  exist  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.UnicodeBlock.isUnicodeBlock(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  package  Cycle  does  not  exist	13	None	replace
98	[BUG]  [BUGGY]  if  (!UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!UnicodeBlock.isUnicodeBlock(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	13	None	replace
99	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isUnicodeBlock(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
100	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.isUnicodeBlock(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
101	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
102	[BUG]  [BUGGY]  if  (!Static.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Static  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Static.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Static.isStatic(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isStatic(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Static	27	None	replace
103	[BUG]  [BUGGY]  if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isStatic(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
104	[BUG]  [BUGGY]  if  (!Cycle.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isStatic(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isStatic(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	27	None	replace
105	[BUG]  [BUGGY]  if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isStatic(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isStatic(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	27	None	replace
106	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
107	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
108	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlockblock.of(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlockblock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlockblock.of(c))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
109	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
110	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isDefined(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isDefined(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
111	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isDefined(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isDefined(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	112	None	replace
112	[BUG]  [BUGGY]  if(!Character.isDefined(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)||!Character.isUnicodeBlock(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
113	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)||!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(!Character.isUpperCase(c)||!Character.isDefined(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	compilable	  [FE]  ComparisonFailure  	112	1	replace
114	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)||!Character.isDefined(c))  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)||!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)||!Character.isDefined(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	compilable	  [FE]  ComparisonFailure  	112	1	replace
115	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	82	None	replace
116	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlockblock.of(c))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlockblock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlockblock.of(c))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
117	[BUG]  [BUGGY]  if(c!=  null  ||!Character.isUnicodeBlock(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  ||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  ||!Character.isUnicodeBlock(c))  {	  if(c!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	61	None	replace
118	[BUG]  [BUGGY]  if(c!=  null  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {	  if(c!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	61	None	replace
119	[BUG]  [BUGGY]  if(c  ==  null  &&!Character.isUnicodeBlock(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  null  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  null  &&!Character.isUnicodeBlock(c))  {	  if(c!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	61	None	replace
120	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {	  if(c!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	61	None	replace
121	[BUG]  [BUGGY]  sb.append('N');  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('N');  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('N');	  sb.append('n');    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
122	[BUG]  [BUGGY]  sb.append('n',  c);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('n',  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('n',  c);	  sb.append('n');    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
123	[BUG]  [BUGGY]  sb.append('#');  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('#');  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('#');	  sb.append('n');    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
124	[BUG]  [BUGGY]  final  StringBuffer  sb  =  new  StringBuffer();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  final  StringBuffer  sb  =  new  StringBuffer();  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	final  StringBuffer  sb  =  new  StringBuffer();	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
125	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(64);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(64);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(64);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
126	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(32);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(32);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(32);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
127	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(128);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(128);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(128);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
128	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(256);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(256);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(256);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
129	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(16);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(16);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(16);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
130	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
131	[BUG]  [BUGGY]  if(!Character.isJavaIdentifierPart(c)&&!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isJavaIdentifierPart(c)&&!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isJavaIdentifierPart(c)&&!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
132	[BUG]  [BUGGY]  if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
133	[BUG]  [BUGGY]  if(!Character.isLetter(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isLetter(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isLetter(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
134	[BUG]  [BUGGY]  if(!Character.isJavaIdentifierPart(c)||!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isJavaIdentifierPart(c)||!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isJavaIdentifierPart(c)||!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
135	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '.')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
137	[BUG]  [BUGGY]  if(c  ==  '.')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '.')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
138	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  ||  c  ==  '+')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
139	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||  c  ==  '+')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  ||  c  ==  ':')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
141	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ':')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||  c  ==  ':')  {	  if(c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	43	1	replace
142	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  ==  null)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  ==  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  ==  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
143	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block!=  null)  {  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block!=  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
144	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block!=  null  &&  block!=  Character.UnicodeBlock.SPECIALS)  {  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block!=  null  &&  block!=  Character.UnicodeBlock.SPECIALS)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block!=  null  &&  block!=  Character.UnicodeBlock.SPECIALS)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
145	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  >=  null)  {  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  >=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  block  >=  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
146	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  sb.append(c);  continue;  }	  sb.append(c);    continue;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
147	[BUG]  [BUGGY]  sb.append('?');  continue;  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?');  continue;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?');  continue;	  sb.append(c);    continue;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
148	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }	  sb.append(c);    continue;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
149	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  sb.append(c);  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append(c);    continue;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
150	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s[i]))  {  [CE]  array  required,  but  String  found  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(chars[i]))    {    	non-compiled	[CE]  array  required,  but  String  found	25	None	replace
151	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(chars[i]))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	25	None	replace
152	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i],  c))  {  [CE]  no  suitable  method  found  for  of(char,char)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i],  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i],  c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char)	25	None	replace
153	[BUG]  [BUGGY]  if  (!Cycle.isControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isControl(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	97	None	replace
154	[BUG]  [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
155	[BUG]  [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isControl(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	97	None	replace
156	[BUG]  [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isControl(c)||  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isControl(c)||  Character.UnicodeBlock.of(s))  {	  if    (!Character.isControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
157	[BUG]  [BUGGY]  if(c!=  '.')  {  if(!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  if(!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  }	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	11	None	replace
158	[BUG]  [BUGGY]  if(!Character.isDigit(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDigit(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDigit(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	11	None	replace
159	[BUG]  [BUGGY]  if(c!=  '')  {  if(c!=  '')  {  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  if(c!=  '')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  if(c!=  '')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	non-compiled	[CE]  empty  character  literal	36	None	replace
160	[BUG]  [BUGGY]  if(c!=  '-')  {  if(c!=  'n'  &&!Character.isISOControl(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  if(c!=  'n'  &&!Character.isISOControl(c))  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {  if(c!=  'n'  &&!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
161	[BUG]  [BUGGY]  if(c!=  '-')  {  if(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  if(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {  if(c!=  'n'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
162	[BUG]  [BUGGY]  if(c!=  '-')  {  if(c!=  '+'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  if(c!=  '+'  ||  c  ==  '+')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {  if(c!=  '+'  ||  c  ==  '+')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  ')')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  ')')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
164	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  ')')  {  [FE]  ComparisonFailure  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  ')')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  ')')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
165	[BUG]  [BUGGY]  final  StringBuilder  sb  =  new  StringBuilder();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  final  StringBuilder  sb  =  new  StringBuilder();  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	final  StringBuilder  sb  =  new  StringBuilder();	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
166	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(c);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
167	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i]);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i]);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(chars[i]);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
168	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.length);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c.length);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(c.length);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
169	[BUG]  [BUGGY]  sb  =  new  StringBuilder();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb  =  new  StringBuilder();  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb  =  new  StringBuilder();	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
170	[BUG]  [BUGGY]  sb  =  new  StringBuilder(c);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb  =  new  StringBuilder(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb  =  new  StringBuilder(c);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  ||  c  ==  ':')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
172	[BUG]  [BUGGY]  if(c  ==  '?'  ||  c  ==  ':')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  ||  c  ==  ':')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
173	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	12	None	replace
174	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	12	None	replace
175	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(s))  {	  if    (!Character.isUnicodeBlock(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
176	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicodeBlock(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
177	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Cycle.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	95	None	replace
178	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c,  s))  {  [CE]  cannot  find  symbol  Cycle  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c,  s))  {	  if    (!Cycle.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	95	None	replace
179	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
180	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
182	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'u'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
184	[BUG]  [BUGGY]  if(c!=  'u'  ||  c  ==  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'u'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  'n'  ||  c!=  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
186	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  'r')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  ||  c!=  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
188	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
189	[BUG]  [BUGGY]  if(c!=  ''  ||  c  ==  '')  {  [CE]  empty  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  ||  c  ==  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  ||  c  ==  '')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  empty  character  literal	45	None	replace
190	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  ':')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
191	[BUG]  [BUGGY]  if(c  ==  ':')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  ':')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
192	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  ||  c  ==  '+')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
193	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  ||  c  ==  '+')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
194	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  ||  c  ==  '#')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
195	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '#')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  ||  c  ==  '#')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
196	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  ||  c  ==  '-')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
197	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  ||  c  ==  '-')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
198	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '/')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  ||  c  ==  '/')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
199	[BUG]  [BUGGY]  if(c!=  ':'  ||  c  ==  '/')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  ||  c  ==  '/')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  ||  c  ==  '/')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
200	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)||!chars[i].equals(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)||!chars[i].equals(c))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
201	[BUG]  [BUGGY]  if  (!chars[i].isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!chars[i].isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!chars[i].isUnicodeBlock(c)&&!Character.isUnicodeBlock(c))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	16	None	replace
202	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].equals('/'))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].equals('/'))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].equals('/'))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
203	[BUG]  [BUGGY]  if(c!=  '')  {  if(c!=  ''  ||  c!=  '')  {  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  if(c!=  ''  ||  c!=  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  if(c!=  ''  ||  c!=  '')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	31	None	replace
204	[BUG]  [BUGGY]  if(c!=  '?')  {  if(c!=  '')  {  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  if(c!=  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  if(c!=  '')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	31	None	replace
205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  '#')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	31	1	replace
206	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '#')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  '#')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	31	1	replace
207	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  ||  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
208	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '.')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  ||  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
209	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
210	[BUG]  [BUGGY]  if(c  ==  '?'  &&  c!=  '.')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
211	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  ||  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
212	[BUG]  [BUGGY]  if(c  ==  '?'  ||  c!=  '.')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  ||  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
213	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  ||  c  ==  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
214	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '.')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  ||  c  ==  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
215	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  &&  c  ==  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
216	[BUG]  [BUGGY]  if(c!=  '?'  &&  c  ==  '.')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  &&  c  ==  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
217	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
218	[BUG]  [BUGGY]  if(c!=  ':'  &&  c!=  '.')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
219	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)&&!Character.isISOControl(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)&&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)&&!Character.isISOControl(c))  {	  if(!Cycle.isUnicodeBlock(c)||!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	59	None	replace
220	[BUG]  [BUGGY]  if(!c.isUnicodeBlock(c)||!Character.isISOControl(c))  {  [CE]  char  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!c.isUnicodeBlock(c)||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!c.isUnicodeBlock(c)||!Character.isISOControl(c))  {	  if(!Cycle.isUnicodeBlock(c)||!Character.isISOControl(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	59	None	replace
221	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isSynthetic(c))  {	  if(!Cycle.isUnicodeBlock(c)||!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	59	None	replace
222	[BUG]  [BUGGY]  if(c!=  '-')  {  if(c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  if(c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {  if(c!=  '+')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    [Delete]    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
223	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
224	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isISOControl(c))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
225	[BUG]  [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isISOControl(c))  {  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c!=  ''  &&!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	34	None	replace
226	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
227	[BUG]  [BUGGY]  if(c!=  '#')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#')  {  If(c!=  'n'  &&!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
228	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c!=  'n'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
229	[BUG]  [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isUnicodeBlock(c))  {  [CE]  empty  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c!=  ''  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	34	None	replace
230	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c!=  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
231	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  ==  '?'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  ==  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c  ==  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
232	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  >=  '?'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  >=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c  >=  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
233	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  >>  '?'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  >>  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c  >>  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
234	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  >=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  >=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c!=  '?'  ||  c  >=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	add
235	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  If(c!=  '?'  ||  c  ==  '+')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  If(c!=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    If(c!=  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	39	None	add
236	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  [Delete]  '?'  ||  c  ==  '+')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c  [Delete]  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c  [Delete]  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  ')'  expected	39	None	add
237	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	99	None	replace
238	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	99	None	replace
239	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c,  s))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isUnicodeBlock(c,  s))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	99	None	replace
240	[BUG]  [BUGGY]  if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	98	None	replace
241	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.isSimpleName(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.isSimpleName(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.isSimpleName(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
242	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c!=  '#')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c!=  '#')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	add
243	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c  >=  '#')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c  >=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c  >=  '#')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	add
244	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c  ==  '#')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c  ==  '#')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	add
245	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c  >>  '#')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c  >>  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c  >>  '#')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	91	None	add
246	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c  [BUGGY]  '#')  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c  [BUGGY]  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c  [BUGGY]  '#')  {	  	non-compiled	[CE]  ')'  expected	91	None	add
247	[BUG]  [BUGGY]  if(c!=  '#')  {  If(c!=  '#')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  If(c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    If(c!=  '#')  {	  	non-compiled	[CE]  ';'  expected	91	None	add
248	[BUG]  [BUGGY]  if(c!=  '#')  {  if(c  [Delete]  '#')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#')  {  if(c  [Delete]  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '#')    {    if(c  [Delete]  '#')  {	  	non-compiled	[CE]  ')'  expected	91	None	add
249	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c!=  '?'  &&  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
250	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  ==  '?'  &&  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  ==  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c  ==  '?'  &&  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
251	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  >=  '?'  &&  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  >=  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c  >=  '?'  &&  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
252	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  ==  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c!=  '?'  &&  c  ==  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
253	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  >=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  >=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c!=  '?'  &&  c  >=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
254	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  >>  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c!=  '?'  &&  c  >>  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c!=  '?'  &&  c  >>  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
255	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  >>  '?'  &&  c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  if(c  >>  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    if(c  >>  '?'  &&  c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	105	None	add
256	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isLetterOrDigit(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isLetterOrDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isLetterOrDigit(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isLetter(c))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
257	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isLetter(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isLetter(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isLetter(c))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
258	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isLetter(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isLetter(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isLetter(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	88	None	replace
259	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '#')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
260	[BUG]  [BUGGY]  if(c  ==  '#')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '#')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
261	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '#'  ||  c  ==  '+')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
262	[BUG]  [BUGGY]  if(c!=  '#'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  ||  c  ==  '+')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
263	[BUG]  [BUGGY]  if(c!=  '#'  ||  c  =='<  ')  {  [CE]  unclosed  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  ||  c  =='<  ')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  ||  c  =='<  ')  {	  if(c!=    '#')    {    	non-compiled	[CE]  unclosed  character  literal	92	None	replace
264	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '#'  ||  c  ==  '-')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
265	[BUG]  [BUGGY]  if(c!=  '#'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  ||  c  ==  '-')  {	  if(c!=    '#')    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
266	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c!=  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c!=  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
267	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c  ==  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c  ==  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
268	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c  >=  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c  >=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c  >=  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
269	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c  >>  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c  >>  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c  >>  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
270	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c  [Delete]  ':')  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c  [Delete]  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c  [Delete]  ':')  {	  	non-compiled	[CE]  ')'  expected	46	None	add
271	[BUG]  [BUGGY]  if(c!=  ':')  {  if(c  [BUGGY]  ':')  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  if(c  [BUGGY]  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    if(c  [BUGGY]  ':')  {	  	non-compiled	[CE]  ')'  expected	46	None	add
272	[BUG]  [BUGGY]  if(c!=  ':')  {  If(c!=  ':')  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  If(c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    ':')    {    If(c!=  ':')  {	  	non-compiled	[CE]  ';'  expected	46	None	add
273	[BUG]  [BUGGY]  sb.append('?').append(c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?').append(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?').append(c);	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
274	[BUG]  [BUGGY]  sb.append('?',  c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?',  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?',  c);	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
275	[BUG]  [BUGGY]  sb.append('?').append(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?').append(Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?').append(Character.toLowerCase(c));	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
276	[BUG]  [BUGGY]  if(c!=  '?')  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(chars!=  null  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(chars!=  null  &&!Character.isISOControl(c))  {	  if(Cycle.UnicodeBlock!=    null    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	64	1	replace
278	[BUG]  [BUGGY]  if(chars!=  null  &&!Character.isISOControl(c))  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(chars!=  null  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(chars!=  null  &&!Character.isISOControl(c))  {	  if(Cycle.UnicodeBlock!=    null    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	64	1	replace
279	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isVar(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isVar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isVar(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isVar(c))    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
280	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c!=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c!=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
281	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c  ==  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c  ==  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
282	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c  >=  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c  >=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c  >=  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
283	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c  >>  '.')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c  >>  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c  >>  '.')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	add
284	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c  [BUGGY]  '.')  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c  [BUGGY]  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c  [BUGGY]  '.')  {	  	non-compiled	[CE]  ')'  expected	42	None	add
285	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  '.')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    If(c!=  '.')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
286	[BUG]  [BUGGY]  if(c!=  '.')  {  if(c  [Delete]  '.')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  if(c  [Delete]  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '.')    {    if(c  [Delete]  '.')  {	  	non-compiled	[CE]  ')'  expected	42	None	add
287	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c!=  'n'  &&!Character.isDigit(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c!=  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c!=  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	add
288	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  >=  'n'  &&!Character.isDigit(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  >=  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c  >=  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	add
289	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  ==  'n'  &&!Character.isDigit(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  ==  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c  ==  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	add
290	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  >>  'n'  &&!Character.isDigit(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  >>  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c  >>  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	70	None	add
291	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  If(c!=  'n'  &&!Character.isDigit(c))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  If(c!=  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    If(c!=  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  ';'  expected	70	None	add
292	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  [Delete]  'n'  &&!Character.isDigit(c))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  [Delete]  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c  [Delete]  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  ')'  expected	70	None	add
293	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  [BUGGY]  'n'  &&!Character.isDigit(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isDigit(c))  {  if(c  [BUGGY]  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isDigit(c))    {    if(c  [BUGGY]  'n'  &&!Character.isDigit(c))  {	  	non-compiled	[CE]  ')'  expected	70	None	add
294	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  ==  '?')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  ==  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  ==  '?')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
295	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c!=  '?')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c!=  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c!=  '?')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
296	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  >=  '?')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  >=  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  >=  '?')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
297	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  >>  '?')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  >>  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  >>  '?')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	add
298	[BUG]  [BUGGY]  if(c  ==  '?')  {  If(c  ==  '?')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  If(c  ==  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    If(c  ==  '?')  {	  	non-compiled	[CE]  ';'  expected	37	None	add
299	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  [BUGGY]  '?')  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  [BUGGY]  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  [BUGGY]  '?')  {	  	non-compiled	[CE]  ')'  expected	37	None	add
300	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  [Delete]  '?')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  [Delete]  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  [Delete]  '?')  {	  	non-compiled	[CE]  ')'  expected	37	None	add
301	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  chars))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  chars))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  chars))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
302	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  s))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  s))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
303	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c,  c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c,  c))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	6	None	replace
304	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  len))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  len))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  len))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
305	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
306	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
307	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isUpperCase(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
308	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'u'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
309	[BUG]  [BUGGY]  if(c!=  'u'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'u'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
310	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  &&!Character.isLetter(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
311	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isLetter(c))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&!Character.isLetter(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
312	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  '-')  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
313	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  '-')  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
314	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c  <  =  'z')  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
315	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '?')    {    if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
316	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '?')    {    if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
317	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '?')    {    if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
318	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    '?')    {    if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
319	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'N'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
320	[BUG]  [BUGGY]  if(c!=  'N'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'N'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
321	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  'n'  ||  c!=  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
322	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c!=  'r')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  'n'  ||  c!=  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
323	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  ==  null)  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  ==  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  ==  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
324	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block!=  null)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block!=  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
325	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
326	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  instanceof  UnicodeBlock)  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  instanceof  UnicodeBlock)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  instanceof  UnicodeBlock)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
327	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c!=  'n'  ||!Character.isISOControl(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c!=  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c!=  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
328	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  ==  'n'  ||!Character.isISOControl(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  ==  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c  ==  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
329	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  >=  'n'  ||!Character.isISOControl(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  >=  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c  >=  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
330	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  >>  'n'  ||!Character.isISOControl(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  >>  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c  >>  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	add
331	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  If(c!=  'n'  ||!Character.isISOControl(c))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  If(c!=  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    If(c!=  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  ';'  expected	65	None	add
332	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  [Delete]  'n'  ||!Character.isISOControl(c))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  [Delete]  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c  [Delete]  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  ')'  expected	65	None	add
333	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  [BUGGY]  'n'  ||!Character.isISOControl(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isISOControl(c))  {  if(c  [BUGGY]  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||!Character.isISOControl(c))    {    if(c  [BUGGY]  'n'  ||!Character.isISOControl(c))  {	  	non-compiled	[CE]  ')'  expected	65	None	add
334	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
335	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)&&  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
336	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  sb))  {  [CE]  no  suitable  method  found  for  of(char,StringBuilder)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  sb))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  sb))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,StringBuilder)	77	None	replace
337	[BUG]  [BUGGY]  if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
338	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
339	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
340	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'e'  ||  c  ==  'E')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
341	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  '#')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
342	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  '#')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  '#')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
343	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '@')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  '@')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
344	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  '@')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '@')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  '@')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
345	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  '.')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
346	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  '.')  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  '.')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
347	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  '-')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
348	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  '-')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
349	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&!Character.isUnicodeBlock(c))  {	  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
350	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(chars[i]))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||!Character.isUnicodeBlock(chars[i]))  {	  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
351	[BUG]  [BUGGY]  if(!Cycle.isISOControl(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isISOControl(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isISOControl(c)||!Character.isUnicodeBlock(c))  {	  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	57	None	replace
352	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
353	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  block  =  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  block  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  block	1	None	replace
354	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
355	[BUG]  [BUGGY]  if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDigit(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
356	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
357	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	86	None	replace
358	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	86	None	replace
359	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isDefined(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isDefined(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	86	None	replace
360	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
361	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
362	[BUG]  [BUGGY]  if(c!=  'N'  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'N'  &&!Character.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
363	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isTransient(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isTransient(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&!Character.isTransient(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
364	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!Character.isStatic(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!Character.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!Character.isStatic(c))  {	  if    (!Character.isUnicode(c)||!Character.isStatic(c))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
365	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)||!Character.isStatic(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)||!Character.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)||!Character.isStatic(c))  {	  if    (!Character.isUnicode(c)||!Character.isStatic(c))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
366	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isSimpleName(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isSimpleName(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isSimpleName(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
367	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  ||  c!=  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
368	[BUG]  [BUGGY]  if(c  ==  '?'  ||  c!=  ':')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  ||  c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  ||  c!=  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
369	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  '?'  ||  c  ==  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
370	[BUG]  [BUGGY]  if(c  >=  '?'  ||  c  ==  ':')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  '?'  ||  c  ==  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
371	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  &&  c  ==  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
372	[BUG]  [BUGGY]  if(c!=  '?'  &&  c  ==  ':')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  &&  c  ==  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
373	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  >=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  ||  c  >=  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
374	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  >=  ':')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  >=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  ||  c  >=  ':')  {	  if(c!=    '?'    ||    c    ==    ':')    {    	compilable	  [FE]  ComparisonFailure  	108	1	replace
375	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)&&!chars[i].equals(c))  {  [CE]  char  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)&&!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)&&!chars[i].equals(c))  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	9	None	replace
376	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isDigit(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isDigit(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDigit(c))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
377	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isDigit(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isDigit(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDigit(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	113	None	replace
378	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||  Character.isDigit(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||  Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||  Character.isDigit(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDigit(c))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
379	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
380	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  Character.UnicodeBlock.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
381	[BUG]  [BUGGY]  if(c!=  'N'  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'N'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
382	[BUG]  [BUGGY]  if(c!=  'n'  ||  Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  Character.UnicodeBlock.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
383	[BUG]  [BUGGY]  if(c!=  'n'  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&  Character.UnicodeBlock.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
384	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
385	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)||!Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  type  UnicodeBlock  for  unary  operator  '!'  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  type  UnicodeBlock  for  unary  operator  '!'	94	None	replace
386	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	94	None	replace
387	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '0'  &&  c!=  '9')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
388	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  '9')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  '9')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
389	[BUG]  [BUGGY]  if(c!=  '-')  {  if(c!=  '+'  ||  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-')  {  if(c!=  '+'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-')  {  if(c!=  '+'  ||  c!=  '+')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
390	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isSynthetic(c))  {	  if(!Character.isUnicodeBlock(c)&&!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
391	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  'n'  ||  c  ==  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
392	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  '.')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c  ==  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  ||  c  ==  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
393	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  'n'  ||  c!=  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
394	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c!=  '.')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  ||  c!=  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
395	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '-'  ||  c  ==  '+')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
396	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-'  ||  c  ==  '+')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
397	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  ||  c  ==  'n'  ||  c!=  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
398	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c!=  '.')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c!=  '.')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
399	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  ||  c!=  'n')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
400	[BUG]  [BUGGY]  if(c!=  '.'  ||  c!=  'n')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||  c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||  c!=  'n')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
401	[BUG]  [BUGGY]  sb.append('[').append(c);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('[').append(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('[').append(c);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
402	[BUG]  [BUGGY]  sb.append('[').append(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('[').append(Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('[').append(Character.toLowerCase(c));	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
403	[BUG]  [BUGGY]  if(c!=  '[')  {  sb.append(']');  }  else  {  sb.append(c);  }  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '[')  {  sb.append(']');  }  else  {  sb.append(c);  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '[')  {  sb.append(']');  }  else  {  sb.append(c);  }	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
404	[BUG]  [BUGGY]  sb.append('[',  c);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('[',  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('[',  c);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
405	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  '?'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
406	[BUG]  [BUGGY]  if(c  ==  '?'  &&  c!=  '+')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
407	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  &&  c  ==  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
408	[BUG]  [BUGGY]  if(c!=  '?'  &&  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  &&  c  ==  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
409	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
410	[BUG]  [BUGGY]  if(c!=  ':'  &&  c!=  '+')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  '?'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
412	[BUG]  [BUGGY]  if(c  >=  '?'  &&  c!=  '+')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  '?'  &&  c!=  '+')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
413	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c!=  'n'  &&!Character.isWhitespace(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c!=  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c!=  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
414	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  >=  'n'  &&!Character.isWhitespace(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  >=  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c  >=  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
415	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  ==  'n'  &&!Character.isWhitespace(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  ==  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c  ==  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
416	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  >>  'n'  &&!Character.isWhitespace(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  >>  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c  >>  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
417	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  If(c!=  'n'  &&!Character.isWhitespace(c))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  If(c!=  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    If(c!=  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  ';'  expected	114	None	add
418	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  [Delete]  'n'  &&!Character.isWhitespace(c))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  [Delete]  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c  [Delete]  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  ')'  expected	114	None	add
419	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  [BUGGY]  'n'  &&!Character.isWhitespace(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isWhitespace(c))  {  if(c  [BUGGY]  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isWhitespace(c))    {    if(c  [BUGGY]  'n'  &&!Character.isWhitespace(c))  {	  	non-compiled	[CE]  ')'  expected	114	None	add
420	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	110	None	replace
421	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
422	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	110	None	replace
423	[BUG]  [BUGGY]  if(!Cycle.isControl(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isControl(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isControl(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	110	None	replace
424	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlockblock.of(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlockblock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlockblock.of(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
425	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||!Character.isDigit(c))  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	compilable	  [FE]  ComparisonFailure  	71	1	replace
426	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isDigit(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isDigit(c))  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	compilable	  [FE]  ComparisonFailure  	71	1	replace
427	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
428	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  '9'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
429	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
430	[BUG]  [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c!=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c!=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c!=  '9'  &&  c!=  'a'  &&  c!=  'a'  &&  c  <  =  'z')  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
431	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeControl(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	26	None	replace
432	[BUG]  [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isUnicodeControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
433	[BUG]  [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(s))  {	  if    (!Character.isUnicodeControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
434	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  chars))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  chars))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  chars))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
435	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  s))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  s))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
436	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c,  c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c,  c))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	14	None	replace
437	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
438	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  len))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  len))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  len))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
439	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	62	None	replace
440	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isUpperCase(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isUpperCase(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	62	None	replace
441	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c,  c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c,  c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	62	None	replace
442	[BUG]  [BUGGY]  if(c!=  '?')  {  If(c  ==  '?')  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  If(c  ==  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  If(c  ==  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
443	[BUG]  [BUGGY]  if(c!=  '')  {  If(c  ==  '')  {  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c  ==  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c  ==  '')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  empty  character  literal	23	None	replace
444	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c  ==  '?')  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c  ==  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c  ==  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
445	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  '?')  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c!=  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
446	[BUG]  [BUGGY]  if(c!=  ';')  {  If(c!=  '?')  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ';')  {  If(c!=  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ';')  {  If(c!=  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
447	[BUG]  [BUGGY]  if(c!=  ';')  {  If(c  ==  '?')  {  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ';')  {  If(c  ==  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ';')  {  If(c  ==  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
448	[BUG]  [BUGGY]  if(c  ==  '?')  {  If(c!=  '?')  {  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  If(c!=  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  '?')  {  If(c!=  '?')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
449	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
450	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)||!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	81	None	replace
451	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||!Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||!Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||!Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicode(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	81	None	replace
452	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c,  chars[i]));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c,  chars[i]));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c,  chars[i]));	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
453	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c)+  1);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
454	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  s);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  s);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  s);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
455	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  c);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
456	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c!=  '?'  ||  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
457	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  ==  '?'  ||  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  ==  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c  ==  '?'  ||  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
458	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  >=  '?'  ||  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  >=  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c  >=  '?'  ||  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
459	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  ==  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c!=  '?'  ||  c  ==  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
460	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  >=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  >=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c!=  '?'  ||  c  >=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
461	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  >>  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c!=  '?'  ||  c  >>  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c!=  '?'  ||  c  >>  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
462	[BUG]  [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  >>  '?'  ||  c!=  '+')  {  [CE]  reached  end  of  file  while  parsing  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c!=  '+')  {  if(c  >>  '?'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c!=    '+')    {    if(c  >>  '?'  ||  c!=  '+')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	101	None	add
463	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  ':'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c    ==    '+')    {    	compilable	  [FE]  ComparisonFailure  	40	1	replace
464	[BUG]  [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  ':'  ||  c  ==  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  ':'  ||  c  ==  '+')  {	  if(c!=    '?'    ||    c    ==    '+')    {    	compilable	  [FE]  ComparisonFailure  	40	1	replace
465	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
466	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
467	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  s))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(c,  s))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
468	[BUG]  [BUGGY]  if(!Static.isStatic(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Static  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Static.isStatic(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Static.isStatic(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Static	4	None	replace
469	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	85	None	replace
470	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isControl(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	85	None	replace
471	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isStatic(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isStatic(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	85	None	replace
472	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	85	None	replace
473	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
474	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
475	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'e'  ||  c  ==  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'e'  ||  c  ==  'E')  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
476	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'e'  ||  c  ==  'E')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'e'  ||  c  ==  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'e'  ||  c  ==  'E')  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
477	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isSynthetic(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isSynthetic(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	63	None	replace
478	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isSynthetic(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	63	None	replace
479	[BUG]  [BUGGY]  if(Character.UnicodeBlock  ==  null  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock  ==  null  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock  ==  null  &&!Character.isSynthetic(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	63	None	replace
480	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(s))  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
481	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	7	None	replace
482	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
483	[BUG]  [BUGGY]  if  (!Cycle.UnicodeBlock.isUnicode(c))  {  [CE]  package  Cycle  does  not  exist  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.UnicodeBlock.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.UnicodeBlock.isUnicode(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  package  Cycle  does  not  exist	78	None	replace
484	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c,  c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c,  c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
485	[BUG]  [BUGGY]  if  (!UnicodeBlock.isUnicode(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!UnicodeBlock.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!UnicodeBlock.isUnicode(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	78	None	replace
486	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
487	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isUnicode(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
488	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  ==  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c!=  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
489	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  ==  'n'  ||  c  ==  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c  ==  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
490	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  >=  'n'  ||  c  ==  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  >=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c  >=  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
491	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  >>  'n'  ||  c  ==  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  >>  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c  >>  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
492	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  >=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  >=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c!=  'n'  ||  c  >=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	add
493	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  If(c!=  'n'  ||  c  ==  'r')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  If(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    If(c!=  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  ';'  expected	44	None	add
494	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  [Delete]  'n'  ||  c  ==  'r')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c  [Delete]  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c  [Delete]  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  ')'  expected	44	None	add
495	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c!=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c!=  'n'  ||  c!=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
496	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  ==  'n'  ||  c!=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c  ==  'n'  ||  c!=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
497	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  ==  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c!=  'n'  ||  c  ==  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
498	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  >=  'n'  ||  c!=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  >=  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c  >=  'n'  ||  c!=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
499	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  >=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  >=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c!=  'n'  ||  c  >=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
500	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  >>  'n'  ||  c!=  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c  >>  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c  >>  'n'  ||  c!=  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
501	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  >>  'r')  {  [CE]  reached  end  of  file  while  parsing  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  if(c!=  'n'  ||  c  >>  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    if(c!=  'n'  ||  c  >>  'r')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	89	None	add
502	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||  chars[i].equals(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||  chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||  chars[i].equals(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	28	None	replace
503	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i])||!chars[i].equals(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i])||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(chars[i])||!chars[i].equals(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	28	None	replace
504	[BUG]  [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
505	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s)||!chars[i].equals(c))  {  [CE]  no  suitable  method  found  for  of(String)  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(s)||!chars[i].equals(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String)	28	None	replace
506	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  ==  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c!=  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
507	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  ==  '?'  ||  c  ==  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  ==  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c  ==  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
508	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  >=  '?'  ||  c  ==  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  >=  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c  >=  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
509	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  >>  '?'  ||  c  ==  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  >>  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c  >>  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
510	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  >=  ':')  {  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  >=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c!=  '?'  ||  c  >=  ':')  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
511	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  If(c!=  '?'  ||  c  ==  ':')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  If(c!=  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    If(c!=  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  ';'  expected	107	None	add
512	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  [Delete]  '?'  ||  c  ==  ':')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c  [Delete]  '?'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c  [Delete]  '?'  ||  c  ==  ':')  {	  	non-compiled	[CE]  ')'  expected	107	None	add
513	[BUG]  [BUGGY]  if(c!=  'n'  ||!Character.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
514	[BUG]  [BUGGY]  if(c!=  'N'  &&!Character.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'N'  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'N'  &&!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
515	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c!=  'n'  &&!Character.isUpperCase(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c!=  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
516	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  >=  'n'  &&!Character.isUpperCase(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  >=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c  >=  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
517	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  ==  'n'  &&!Character.isUpperCase(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  ==  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c  ==  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
518	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  >>  'n'  &&!Character.isUpperCase(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  >>  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c  >>  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
519	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  If(c!=  'n'  &&!Character.isUpperCase(c))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  If(c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    If(c!=  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  ';'  expected	68	None	add
520	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  [Delete]  'n'  &&!Character.isUpperCase(c))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c  [Delete]  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c  [Delete]  'n'  &&!Character.isUpperCase(c))  {	  	non-compiled	[CE]  ')'  expected	68	None	add
521	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  ==  'n'  ||!Character.isISOControl(c))  {	  if(c!=    'n'    ||!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	66	1	replace
522	[BUG]  [BUGGY]  if(c  ==  'n'  ||!Character.isISOControl(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  ==  'n'  ||!Character.isISOControl(c))  {	  if(c!=    'n'    ||!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	66	1	replace
523	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c))  {  [CE]  no  suitable  method  found  for  of(String,char)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(s,  c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(String,char)	5	None	replace
524	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s))  {  [CE]  no  suitable  method  found  for  of(char,String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  s))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,String)	5	None	replace
525	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  c))  {  [CE]  no  suitable  method  found  for  of(char,String,char)  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,String,char)	5	None	replace
526	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  chars[i]))  {  [CE]  no  suitable  method  found  for  of(char,String,char)  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  s,  chars[i]))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,String,char)	5	None	replace
527	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  s))  {  [CE]  no  suitable  method  found  for  of(char,char,String)  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  s))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,String)	5	None	replace
528	[BUG]  [BUGGY]  if(!Character.isISOControl(s)&&  Character.UnicodeBlock.of(c,  c))  {  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(s)&&  Character.UnicodeBlock.of(c,  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(s)&&  Character.UnicodeBlock.of(c,  c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	5	None	replace
529	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '-'  &&  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
530	[BUG]  [BUGGY]  if(c!=  '-'  &&  c!=  '+')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-'  &&  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
531	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  '.')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
532	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  '.')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  '.')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
533	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'e'  &&  c!=  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'e'  &&  c!=  'E')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
534	[BUG]  [BUGGY]  if(c!=  'e'  &&  c!=  'E')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'e'  &&  c!=  'E')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'e'  &&  c!=  'E')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
535	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
536	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  '+')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
537	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  ',')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  ',')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
538	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  ',')  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  ',')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  ',')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
539	[BUG]  [BUGGY]  if(!Character.isSynthetic(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isSynthetic(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isSynthetic(c)||!Character.isUnicodeBlock(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
540	[BUG]  [BUGGY]  if(!Synthetic.isUnicodeBlock(c)||!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  Synthetic  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Synthetic.isUnicodeBlock(c)||!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Synthetic.isUnicodeBlock(c)||!Character.isSynthetic(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol  Synthetic	56	None	replace
541	[BUG]  [BUGGY]  char  c  =  s.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i  +  1);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i  +  1);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
542	[BUG]  [BUGGY]  char  c  =  s.charAt(i++);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i++);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i++);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
543	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i).toCharArray();  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i).toCharArray();	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
544	[BUG]  [BUGGY]  char  c  =  s.charAt(i)+  1;  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i)+  1;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i)+  1;	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
545	[BUG]  [BUGGY]  char  c  =  s.charAt(i,  len);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i,  len);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i,  len);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
546	[BUG]  [BUGGY]  char  c  =  s.charAt(i];  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(i];  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(i];	  char    c    =    s.charAt(i);    	non-compiled	[CE]  ')'  expected	119	None	replace
547	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  s)  {  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  s)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  s)  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
548	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  chars[i])  {  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  chars[i])  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  chars[i])  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
549	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  c)  {  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  c)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c),  c)  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
550	[BUG]  [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!Character.isUpperCase(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!Character.isUpperCase(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
551	[BUG]  [BUGGY]  if  (!Scanner.isUnicodeBlock(c)||!Scanner.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Scanner  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Scanner.isUnicodeBlock(c)||!Scanner.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Scanner.isUnicodeBlock(c)||!Scanner.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Scanner	94	None	replace
552	[BUG]  [BUGGY]  if  (!Decoder.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Decoder  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Decoder.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Decoder.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Decoder	94	None	replace
553	[BUG]  [BUGGY]  if(c  ==  '?')  {  if(c  {  '?')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  ==  '?')  {  if(c  {  '?')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c    ==    '?')    {    if(c  {  '?')  {	  	non-compiled	[CE]  ')'  expected	37	None	add
554	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  i);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  i);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
555	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  i  +  1);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  i  +  1);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  i  +  1);	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
556	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c,  i));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c,  i));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c,  i));	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
557	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
558	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  chars[i])  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  chars[i])  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c),  chars[i])  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c),    sb)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
559	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
560	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
561	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
562	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
563	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
564	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'z')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'z')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
565	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
566	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
567	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'A')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'A')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
568	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'A')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'A')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'A')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
569	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c)||!chars[i].equals(c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	28	None	replace
570	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals('/'))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals('/'))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c)||!chars[i].equals('/'))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	28	None	replace
571	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c!=  'n'  &&!Character.isLowerCase(c))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUpperCase(c))  {  if(c!=  'n'  &&!Character.isLowerCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    &&!Character.isUpperCase(c))    {    if(c!=  'n'  &&!Character.isLowerCase(c))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	68	None	add
572	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock!=  null)  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock!=  null)  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	111	None	replace
573	[BUG]  [BUGGY]  if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  '.class'  expected	111	None	replace
574	[BUG]  [BUGGY]  if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  ||!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	111	None	replace
575	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].compareTo(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].compareTo(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].compareTo(c))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
576	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].length()  ==  0)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].length()  ==  0)  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
577	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].contains(c))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].contains(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].contains(c))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
578	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].equals(ch))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].equals(ch))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].equals(ch))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
579	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  i))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  i))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  i))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
580	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c,  i))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c,  i))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c,  i))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
581	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  l))  {  [CE]  cannot  find  symbol  l  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  l))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  l))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol  l	14	None	replace
582	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
583	[BUG]  [BUGGY]  if(!Character.isJavaIdentifierPart(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isJavaIdentifierPart(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isJavaIdentifierPart(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	8	None	replace
584	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c),  i);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c),  i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c),  i);	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
585	[BUG]  [BUGGY]  if(!Cycle.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	3	None	replace
586	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	3	None	replace
587	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
588	[BUG]  [BUGGY]  if(!Cycle.isStatic(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isStatic(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isStatic(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	4	None	replace
589	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock!=  null)  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock!=  null)  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
590	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(block))  {  [CE]  cannot  find  symbol  block  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(block))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(block))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  block	76	None	replace
591	[BUG]  [BUGGY]  if(Character.isDefined(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.isDefined(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.isDefined(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	76	None	replace
592	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
593	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
594	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ';')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ';')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	compilable	  [FE]  ComparisonFailure  	23	1	replace
595	[BUG]  [BUGGY]  if(c!=  ';')  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ';')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ';')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	compilable	  [FE]  ComparisonFailure  	23	1	replace
596	[BUG]  [BUGGY]  if(c!=  '')  {  If(c!=  '')  {  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c!=  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c!=  '')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  empty  character  literal	23	None	replace
597	[BUG]  [BUGGY]  if(c!=  '?')  {  If(c  ==  ';')  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  If(c  ==  ';')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  If(c  ==  ';')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
598	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	7	None	replace
599	[BUG]  [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Cycle.UnicodeBlock!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Cycle.UnicodeBlock!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	85	None	replace
600	[BUG]  [BUGGY]  if(Character.UNICODE_BLOCK!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  UNICODE_BLOCK  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UNICODE_BLOCK!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UNICODE_BLOCK!=  null  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  UNICODE_BLOCK	85	None	replace
601	[BUG]  [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeControl(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicodeControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
602	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isUpperCase(c))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
603	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isUnicodeChar(c))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
604	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isLetter(c))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isLetter(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
605	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(chars[i]))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(chars[i]))  {	  if    (!Character.isUnicodeBlock(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
606	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '@')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '@')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
607	[BUG]  [BUGGY]  if(c!=  '@')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '@')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '@')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
608	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  If(c!=  'n'  ||  c!=  '.')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  '.')  {  If(c!=  'n'  ||  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    '.')    {    If(c!=  'n'  ||  c!=  '.')  {	  	non-compiled	[CE]  ';'  expected	73	None	add
609	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  If(c!=  '?'  &&  c!=  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+')  {  If(c!=  '?'  &&  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '+')    {    If(c!=  '?'  &&  c!=  '+')  {	  	non-compiled	[CE]  ';'  expected	103	None	add
610	[BUG]  [BUGGY]  if  (!Cycle.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicodeBlock(c)&&!Character.UnicodeBlock.of(c))  {	  if    (!Cycle.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	95	None	replace
611	[BUG]  [BUGGY]  char  c  =  chars.charAt(i);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  chars.charAt(i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  chars.charAt(i);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
612	[BUG]  [BUGGY]  String  c  =  s.charAt(i);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  String  c  =  s.charAt(i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	String  c  =  s.charAt(i);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
613	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  false))  {  [CE]  no  suitable  method  found  for  of(char,char,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  false))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  false))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,boolean)	24	None	replace
614	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  c))  {  [CE]  no  suitable  method  found  for  of(char,char,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  c))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,char)	24	None	replace
615	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  chars[i]))  {  [CE]  no  suitable  method  found  for  of(char,char,char)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  chars[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,char)	24	None	replace
616	[BUG]  [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  null))  {  [CE]  no  suitable  method  found  for  of(char,char,<null>)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  null))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isISOControl(c)||  Character.UnicodeBlock.of(c,  chars[i],  null))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,<null>)	24	None	replace
617	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  chars[i]))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c,  chars[i]))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	86	None	replace
618	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
619	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
620	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i],  c);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i],  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(chars[i],  c);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
621	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '+'  ||  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
622	[BUG]  [BUGGY]  if(c!=  '+'  ||  c!=  '+')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '+'  ||  c!=  '+')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
623	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  't')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
624	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  't')  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  't')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
625	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	82	None	replace
626	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	82	None	replace
627	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
628	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(char))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
629	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&  Character.UnicodeBlock.of(c,  chars[i]))  {	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
630	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '+')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
631	[BUG]  [BUGGY]  if(c!=  '+')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '+')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
632	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)||!Character.isStatic(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)||!Character.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)||!Character.isStatic(c))  {	  if    (!Character.isUnicode(c)||!Character.isStatic(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	109	None	replace
633	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||!Character.isLetter(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||!Character.isLetter(c))  {	  if    (!Character.isUnicode(c)||!Character.isStatic(c))    {    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
634	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c  >=  '?'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
635	[BUG]  [BUGGY]  if(c  >=  '?'  &&  c!=  '.')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c  >=  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c  >=  '?'  &&  c!=  '.')  {	  if(c!=    '?'    &&    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	106	1	replace
636	[BUG]  [BUGGY]  if(!Character.isWhitespace(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isWhitespace(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isWhitespace(c)&&  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	11	None	replace
637	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  ==  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  ==  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
638	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  <  =  null)  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  <  =  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  <  =  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
639	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  >=  null)  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  >=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  >=  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
640	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock!=  null)  {  [CE]  cannot  find  symbol  Cycle  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)&&  Character.UnicodeBlock!=  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	80	None	replace
641	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  [Delete]  null)  {  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  [Delete]  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock  [Delete]  null)  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
642	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isDefined(char))  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isDefined(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isDefined(char))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	non-compiled	[CE]  '.class'  expected	112	None	replace
643	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(len);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(len);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(len);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
644	[BUG]  [BUGGY]  sb.append(')');  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(')');  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(')');	  sb.append(c);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
645	[BUG]  [BUGGY]  if  (!Scanner.isUnicode(c)||!Scanner.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Scanner  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Scanner.isUnicode(c)||!Scanner.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Scanner.isUnicode(c)||!Scanner.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c)||!Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Scanner	81	None	replace
646	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  ||  c  ==  '-')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
647	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  ||  c  ==  '-')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
648	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
649	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
650	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
651	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
652	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
653	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
654	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)&&!Character.UnicodeBlock.of(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
655	[BUG]  [BUGGY]  if(chars!=  null  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(chars!=  null  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(chars!=  null  &&!Character.isSynthetic(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
656	[BUG]  [BUGGY]  if(chars!=  null  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(chars!=  null  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(chars!=  null  &&!Character.isUnicodeBlock(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
657	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].compareTo(c))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].compareTo(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!chars[i].compareTo(c))  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
658	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].equals('/'))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].equals('/'))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!chars[i].equals('/'))  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
659	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].length()  ==  0)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!chars[i].length()  ==  0)  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
660	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].equals(ch))  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].equals(ch))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!chars[i].equals(ch))  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
661	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].contains(c))  {  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&!chars[i].contains(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&!chars[i].contains(c))  {	  if    (!Character.isUnicode(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
662	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isUpperCase(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isUpperCase(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isLetter(c))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
663	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  i))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  i))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  i))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
664	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c,  i))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c,  i))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c,  i))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
665	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  l))  {  [CE]  cannot  find  symbol  l  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  l))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  l))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol  l	6	None	replace
666	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
667	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
668	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
669	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
670	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'f')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
671	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
672	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
673	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
674	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
675	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||!chars[i].compareTo(c))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||!chars[i].compareTo(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||!chars[i].compareTo(c))  {	  if    (!Character.isUnicode(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
676	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  If(c!=  'n'  ||  c!=  'r')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r')  {  If(c!=  'n'  ||  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c!=    'r')    {    If(c!=  'n'  ||  c!=  'r')  {	  	non-compiled	[CE]  ';'  expected	89	None	add
677	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isDigit(c))  {  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isDigit(c))  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  empty  character  literal	71	None	replace
678	[BUG]  [BUGGY]  if(c!=  ''  &&  Character.UnicodeBlock!=  null)  {  [CE]  empty  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&  Character.UnicodeBlock!=  null)  {	  if(c!=    'n'    &&!Character.isDigit(c))    {    	non-compiled	[CE]  empty  character  literal	71	None	replace
679	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isStatic(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isStatic(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isVar(c))    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
680	[BUG]  [BUGGY]  sb.append('n');  continue;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('n');  continue;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('n');  continue;	  sb.append(c);    continue;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
681	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  If(c!=  '?'  &&  c!=  '.')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '.')  {  If(c!=  '?'  &&  c!=  '.')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    &&    c!=    '.')    {    If(c!=  '?'  &&  c!=  '.')  {	  	non-compiled	[CE]  ';'  expected	105	None	add
682	[BUG]  [BUGGY]  sb.append('n'  +  c);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('n'  +  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('n'  +  c);	  sb.append('n');    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
683	[BUG]  [BUGGY]  sb.append('n',  i++);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('n',  i++);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('n',  i++);	  sb.append('n');    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
684	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  continue;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c)+  1);  continue;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c)+  1);  continue;	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
685	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c),  i);  continue;  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c),  i);  continue;  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c),  i);  continue;	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
686	[BUG]  [BUGGY]  if(!Character.isControl(c)||!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)||!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)||!Character.isUnicodeBlock(c))  {	  if(!Character.isISOControl(c)||!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
687	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isWhitespace(c))  {  [CE]  empty  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  empty  character  literal	115	None	replace
688	[BUG]  [BUGGY]  if(c!=  ''  &&  c!=  ''  &&  c!=  '')  {  [CE]  empty  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&  c!=  ''  &&  c!=  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&  c!=  ''  &&  c!=  '')  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  empty  character  literal	115	None	replace
689	[BUG]  [BUGGY]  if(c!=  ''  &&  Character.UnicodeBlock!=  null  &&  c!=  '')  {  [CE]  empty  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&  Character.UnicodeBlock!=  null  &&  c!=  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&  Character.UnicodeBlock!=  null  &&  c!=  '')  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  empty  character  literal	115	None	replace
690	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.UnicodeBlock.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.UnicodeBlock.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&!Character.UnicodeBlock.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
691	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isUnicodeBlock(c))  {  [CE]  empty  character  literal  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  empty  character  literal	67	None	replace
692	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
693	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isUnicode(c))  {  [CE]  empty  character  literal  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  empty  character  literal	116	None	replace
694	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
695	[BUG]  [BUGGY]  if(c!=  'e'  &&!Character.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'e'  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'e'  &&!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
696	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isTransient(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isTransient(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isTransient(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
697	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isUnicodeChar(c))  {  [CE]  empty  character  literal  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  empty  character  literal	83	None	replace
698	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
699	[BUG]  [BUGGY]  if(c!=  'e'  &&!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'e'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'e'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
700	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock  <  =  Character.UnicodeBlock>of(c))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock  <  =  Character.UnicodeBlock>of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock  <  =  Character.UnicodeBlock>of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
701	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'u'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
702	[BUG]  [BUGGY]  if(c!=  'u'  &&!Character.isUpperCase(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'u'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
703	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(char))  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(char))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	non-compiled	[CE]  '.class'  expected	87	None	replace
704	[BUG]  [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  Decoder  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Decoder.isUnicodeBlock(c)||!Character.isWhitespace(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  Decoder	87	None	replace
705	[BUG]  [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isUpperCase(c))  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Cycle.isUnicodeBlock(c)||!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Cycle.isUnicodeBlock(c)||!Character.isUpperCase(c))  {	  if(!Cycle.isUnicodeBlock(c)||!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	59	None	replace
706	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(char))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	96	None	replace
707	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(block))  {  [CE]  cannot  find  symbol  block  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(block))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(block))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  block	96	None	replace
708	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  sb)  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	96	None	replace
709	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <  =  '9')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '0'  &&  c  <  =  '9')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '0'  &&  c  <  =  '9')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'u'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
711	[BUG]  [BUGGY]  if(c!=  'u'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'u'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'u'  ||  c  ==  'r')  {	  if(c!=    'n'    ||    c    ==    'r')    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
712	[BUG]  [BUGGY]  sb.append('['  +  i);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('['  +  i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('['  +  i);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
713	[BUG]  [BUGGY]  sb.append('['  +  i  +  1);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('['  +  i  +  1);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('['  +  i  +  1);	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
714	[BUG]  [BUGGY]  sb.append('[').append(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('[').append(Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('[').append(Character.toUpperCase(c));	  sb.append('[');    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
715	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isUnicodeControl(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isUnicodeControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isUnicodeControl(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
716	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  ==  null)  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  ==  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  ==  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
717	[BUG]  [BUGGY]  if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock!=  null)  {  [CE]  cannot  find  symbol  Cycle  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Cycle.isUnicode(c)||  Character.UnicodeBlock!=  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  Cycle	79	None	replace
718	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  >=  null)  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  >=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  >=  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
719	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  [Delete]  null)  {  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)||  Character.UnicodeBlock  [Delete]  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)||  Character.UnicodeBlock  [Delete]  null)  {	  if    (!Character.isUnicode(c)||    Character.UnicodeBlock!=    null)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
720	[BUG]  [BUGGY]  if  (!Scanner.isControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  Scanner  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Scanner.isControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Scanner.isControl(c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol  Scanner	97	None	replace
721	[BUG]  [BUGGY]  if(!Character.isISOControl(c,  s)&&  Character.UnicodeBlock.of(c,  s))  {  [CE]  no  suitable  method  found  for  isISOControl(char,String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c,  s)&&  Character.UnicodeBlock.of(c,  s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c,  s)&&  Character.UnicodeBlock.of(c,  s))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(char,String)	5	None	replace
722	[BUG]  [BUGGY]  sb.append('?'  +  c);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?'  +  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?'  +  c);	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
723	[BUG]  [BUGGY]  sb.append('?').append(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?').append(Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?').append(Character.toUpperCase(c));	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
724	[BUG]  [BUGGY]  sb.append('?').append(Character.valueOf(c));  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append('?').append(Character.valueOf(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append('?').append(Character.valueOf(c));	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
725	[BUG]  [BUGGY]  sb.append(':').append(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(':').append(Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(':').append(Character.toLowerCase(c));	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
726	[BUG]  [BUGGY]  sb.append(':'  +  c);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(':'  +  c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(':'  +  c);	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
727	[BUG]  [BUGGY]  sb.append(':').append(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(':').append(Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(':').append(Character.toUpperCase(c));	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
728	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  false))  {  [CE]  no  suitable  method  found  for  of(char,char,boolean)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  false))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars[i],  false))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char,boolean)	2	None	replace
729	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(block,  chars[i]))  {  [CE]  cannot  find  symbol  block  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(block,  chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(block,  chars[i]))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  cannot  find  symbol  block	2	None	replace
730	[BUG]  [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isISOControl(c))  {  [CE]  cannot  find  symbol  UNICODE  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isISOControl(c))  {	  if(Cycle.UnicodeBlock!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol  UNICODE	64	None	replace
731	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	110	None	replace
732	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  sb)  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	110	None	replace
733	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock!=  null)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock!=  null)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock!=  null)  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
734	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
735	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
736	[BUG]  [BUGGY]  if(c!=  ''  &&!Character.isSynthetic(c))  {  [CE]  empty  character  literal  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ''  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ''  &&!Character.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  empty  character  literal	72	None	replace
737	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isScalar(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isScalar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isScalar(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
738	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isStatic(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicode(c)||!Character.UnicodeBlock.isStatic(c))  {	  if    (!Character.UnicodeBlock.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
739	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  >=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  ||  c  >=  '+')  {	  if(c!=    '?'    ||    c    ==    '+')    {    	compilable	  [FE]  ComparisonFailure  	40	1	replace
740	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  >=  '+')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  >=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  ||  c  >=  '+')  {	  if(c!=    '?'    ||    c    ==    '+')    {    	compilable	  [FE]  ComparisonFailure  	40	1	replace
741	[BUG]  [BUGGY]  char  c  =  s.charAt(0);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  char  c  =  s.charAt(0);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	char  c  =  s.charAt(0);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
742	[BUG]  [BUGGY]  final  char  c  =  s.charAt(i);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  final  char  c  =  s.charAt(i);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	final  char  c  =  s.charAt(i);	  char    c    =    s.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
743	[BUG]  [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  continue;  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  continue;  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':')  {  sb.append(':');  }  else  {  sb.append(c);  continue;  }	  sb.append(':');    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
744	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars))  {  [CE]  no  suitable  method  found  for  of(char,char[])  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c,  chars))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    s))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char[])	5	None	replace
745	[BUG]  [BUGGY]  if(c!=  '#'  &&!Character.isUnicodeChar(c))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  &&!Character.isUnicodeChar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  &&!Character.isUnicodeChar(c))  {	  if(c!=    'n'    &&!Character.isUnicodeChar(c))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
746	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.charAt(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.charAt(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.charAt(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
747	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	4	None	replace
748	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.isLetter(c))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.isLetter(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
749	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.equals(c))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.equals(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
750	[BUG]  [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.from(c))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isStatic(c)&&  Character.UnicodeBlock.from(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isStatic(c)&&  Character.UnicodeBlock.from(c))  {	  if(!Character.isStatic(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
751	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
752	[BUG]  [BUGGY]  if(c!=  '#'  &&!Character.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  &&!Character.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  &&!Character.isSynthetic(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
753	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUnicodeIdentifierPart(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  &&!Character.isUnicodeIdentifierPart(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	compilable	  [FE]  ComparisonFailure  	72	1	replace
754	[BUG]  [BUGGY]  if(c!=  'n'  &&!Character.isUnicodeIdentifierPart(c))  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&!Character.isUnicodeIdentifierPart(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&!Character.isUnicodeIdentifierPart(c))  {	  if(c!=    'n'    &&!Character.isSynthetic(c))    {    	compilable	  [FE]  ComparisonFailure  	72	1	replace
755	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  {  ':')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  ':')  {  if(c!=  '?'  ||  c  {  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    ':')    {    if(c!=  '?'  ||  c  {  ':')  {	  	non-compiled	[CE]  ')'  expected	107	None	add
756	[BUG]  [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isDigit(c))  {  [CE]  cannot  find  symbol  Decoder  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Decoder.isUnicodeBlock(c)||!Character.isDigit(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDigit(c))    {    	non-compiled	[CE]  cannot  find  symbol  Decoder	113	None	replace
757	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  ')')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  ')')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
758	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  ')')  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  ')')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  ')')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
759	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
760	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    'n'  &&!Character.isISOControl(c))  {  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    	compilable	  [FE]  ComparisonFailure  	36	1	replace
761	[BUG]  [BUGGY]  if(c!=  ':')  {  If(c!=  ';')  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':')  {  If(c!=  ';')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':')  {  If(c!=  ';')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
762	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  ';')  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  ';')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c!=  ';')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
763	[BUG]  [BUGGY]  if(c!=  '[')  {  If(c!=  ']')  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '[')  {  If(c!=  ']')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '[')  {  If(c!=  ']')  {	  if(c!=    '?')    {    If(c!=    '?')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
764	[BUG]  [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isDefined(c))  {  [CE]  cannot  find  symbol  Decoder  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Decoder.isUnicodeBlock(c)||!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Decoder.isUnicodeBlock(c)||!Character.isDefined(c))  {	  if(!Character.isUnicodeBlock(c)||!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  Decoder	112	None	replace
765	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isISOControl(c)||  Character.UnicodeBlock.of(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isISOControl(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	85	None	replace
766	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	111	None	replace
767	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isISOControl(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  '.class'  expected	111	None	replace
768	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isScalar(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isScalar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.isScalar(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(char))    {    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
769	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
770	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
771	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
772	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'A'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
773	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
774	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'f')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'f')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'a'  &&  c  <  =  'z'  ||  c  >=  'a'  &&  c  <  =  'f')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
775	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c).charValue());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toUpperCase(c).charValue());  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toUpperCase(c).charValue());	  sb.append(Character.toUpperCase(c));    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
776	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
777	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
778	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isStatic(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isStatic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.isStatic(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
779	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isScalar(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isScalar(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.isScalar(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
780	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isLetter(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.isLetter(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
781	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isLabel(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isLabel(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.isLabel(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
782	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isSynthetic(c))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.isSynthetic(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.isSynthetic(c))  {	  if(!Character.isControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
783	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
784	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
785	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
786	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '?')    {    	compilable	  [FE]  ComparisonFailure  	38	1	replace
787	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  chars[i])  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  chars[i])  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c),  chars[i])  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	96	None	replace
788	[BUG]  [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!Character.isISOControl(c))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isDefined(c)||  Character.UnicodeBlock.of(c)||!Character.isISOControl(c))  {	  if    (!Character.isDefined(c)||    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	96	None	replace
789	[BUG]  [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  {  '+')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  ||  c  ==  '+')  {  if(c!=  '?'  ||  c  {  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    '?'    ||    c    ==    '+')    {    if(c!=  '?'  ||  c  {  '+')  {	  	non-compiled	[CE]  ')'  expected	39	None	add
790	[BUG]  [BUGGY]  if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }  else  {  sb.append('?');  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }  else  {  sb.append('?');  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  sb.append(Character.toUpperCase(c));  continue;  }  else  {  sb.append('?');  }	  sb.append(Character.toUpperCase(c));    continue;    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
791	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  Character.UnicodeBlock.of(c))  {  [CE]  incomparable  types:  char  and  UnicodeBlock  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  Character.UnicodeBlock.of(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  UnicodeBlock	32	None	replace
792	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
793	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
794	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
795	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    ==    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	32	1	replace
796	[BUG]  [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i],  c))  {  [CE]  no  suitable  method  found  for  of(char,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i],  c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isISOControl(c)&&  Character.UnicodeBlock.of(chars[i],  c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock.of(c,    chars[i]))    {    	non-compiled	[CE]  no  suitable  method  found  for  of(char,char)	2	None	replace
797	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
798	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  't')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
799	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
800	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
801	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
802	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c!=  't')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
803	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
804	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  't')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c!=  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
805	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
806	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c!=  'n'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c!=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
807	[BUG]  [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  ||!Character.isISOControl(c))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.')  {  If(c!=  'n'  ||!Character.isISOControl(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.')  {  If(c!=  'n'  ||!Character.isISOControl(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
808	[BUG]  [BUGGY]  If(c!=  'n'  &&!Character.isDigit(c))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  If(c!=  'n'  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	If(c!=  'n'  &&!Character.isDigit(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
809	[BUG]  [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isDigit(c))  {  [CE]  empty  character  literal  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c!=  ''  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c!=  ''  &&!Character.isDigit(c))  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	34	None	replace
810	[BUG]  [BUGGY]  if(c!=  '')  {  If(c!=  ''  ||  c  ==  '')  {  [CE]  empty  character  literal  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '')  {  If(c!=  ''  ||  c  ==  '')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '')  {  If(c!=  ''  ||  c  ==  '')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    If(c!=    'n'    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  empty  character  literal	34	None	replace
811	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isLetter(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isLetter(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isLetter(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	99	None	replace
812	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '-'  ||  c!=  '+')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
813	[BUG]  [BUGGY]  if(c!=  '-'  ||  c!=  '+')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '-'  ||  c!=  '+')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '-'  ||  c!=  '+')  {	  if(c!=    'n'    ||    c!=    '.')    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
814	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	31	1	replace
815	[BUG]  [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  ||  c!=  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    &&!Character.isISOControl(c))    {    if(c    >=    'n'    &&!Character.isISOControl(c))    {    	compilable	  [FE]  ComparisonFailure  	31	1	replace
816	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  ':')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
817	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  ':')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  ':')  {	  if(c!=    ''    &&    c!=    '')    {    	compilable	  [FE]  ComparisonFailure  	84	1	replace
818	[BUG]  [BUGGY]  if(c!=  '#'  &&!Character.isUnicode(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  &&!Character.isUnicode(c))  {	  if(c!=    'n'    &&!Character.isUnicode(c))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
819	[BUG]  [BUGGY]  if(!Character.isControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c))  {	  if(!Character.isISOControl(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
820	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isUpperCase(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)&&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)&&!Character.isUpperCase(c))  {	  if(!Character.isUnicodeBlock(c)&&!Character.isISOControl(c))    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
821	[BUG]  [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isUpperCase(c))  {  [CE]  cannot  find  symbol  UNICODE  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isUpperCase(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  cannot  find  symbol  UNICODE	62	None	replace
822	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c);	  if(Character.UnicodeBlock!=    null    &&!Character.isUpperCase(c))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
823	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
824	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)||  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c,  c)||  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c,  c)||  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicodeBlock(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
825	[BUG]  [BUGGY]  if(c!=  '?')  {  sb.append('?');  continue;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  sb.append('?');  continue;  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  sb.append('?');  continue;  }	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
826	[BUG]  [BUGGY]  if(c!=  '?')  {  sb.append('?');  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?')  {  sb.append('?');  }  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?')  {  sb.append('?');  }	  sb.append('?');    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
827	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  &&  c!=  '+'  ||  c  ==  '-')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
828	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  &&  c!=  '+'  ||  c  ==  '-')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
829	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '?'  &&  c!=  '+'  ||  c  ==  ':')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
830	[BUG]  [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  ':')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '?'  &&  c!=  '+'  ||  c  ==  ':')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '?'  &&  c!=  '+'  ||  c  ==  ':')  {	  if(c!=    '?'    &&    c!=    '+')    {    	compilable	  [FE]  ComparisonFailure  	104	1	replace
831	[BUG]  [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isDigit(c))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.UnicodeBlock.isUnicodeBlock(c)||!Character.UnicodeBlock.isDigit(c))  {	  if    (!Character.UnicodeBlock.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
832	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  'n'  &&!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
833	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'n'  &&!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
834	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
835	[BUG]  [BUGGY]  if(c!=  '.'  &&!Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&!Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
836	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
837	[BUG]  [BUGGY]  if(c!=  '.'  &&  Character.isWhitespace(c))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  Character.isWhitespace(c))  {	  if(c!=    'n'    &&!Character.isWhitespace(c))    {    	compilable	  [FE]  ComparisonFailure  	115	1	replace
838	[BUG]  [BUGGY]  if(c!=  '#'  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
839	[BUG]  [BUGGY]  if(c!=  'e'  &&!Character.isUnicodeBlock(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'e'  &&!Character.isUnicodeBlock(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'e'  &&!Character.isUnicodeBlock(c))  {	  if(c!=    'n'    &&!Character.isUnicodeBlock(c))    {    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
840	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.of(s))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
841	[BUG]  [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.from(c))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.from(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c)&&  Character.UnicodeBlock.from(c))  {	  if    (!Character.isUnicode(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
842	[BUG]  [BUGGY]  if(!Character.isUnicodeBlock(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeBlock(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeBlock(c)||  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);	  if    (!Character.isUnicodeBlock(c)&&    Character.UnicodeBlock    block    =    Character.UnicodeBlock.of(c);    	non-compiled	[CE]  ')'  expected	11	None	replace
843	[BUG]  [BUGGY]  if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock.of(c))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock.of(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicode(c,  c)&&  Character.UnicodeBlock.of(c))  {	  if    (!Character.isUnicode(c,    c))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
844	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(s))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(s))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.of(s))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
845	[BUG]  [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.from(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.from(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUnicodeControl(c)&&  Character.UnicodeBlock.from(c))  {	  if(!Character.isUnicodeControl(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
846	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  Character.UnicodeBlock.of(c);	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
847	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  c!=  '-')  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  c!=  '-')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c)||  c!=  '-')  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	86	None	replace
848	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c),  c)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c),  c)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isDefined(c),  c)  {	  if(Character.UnicodeBlock!=    null    &&!Character.isDefined(c))    {    	non-compiled	[CE]  ')'  expected	86	None	replace
849	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c).charValue());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  sb.append(Character.toLowerCase(c).charValue());  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	sb.append(Character.toLowerCase(c).charValue());	  sb.append(Character.toLowerCase(c));    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
850	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  '.'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
851	[BUG]  [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '.'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '.'  &&  c!=  'n'  &&!Character.isUpperCase(c))  {	  if(c!=    'n'    &&!Character.isUpperCase(c))    {    	compilable	  [FE]  ComparisonFailure  	69	1	replace
852	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c)||!Character.isDefined(c))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c)||!Character.isDefined(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(c)||!Character.isDefined(c))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	76	None	replace
853	[BUG]  [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(char))  {  [CE]  '.class'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(char))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isDefined(c)&&  Character.UnicodeBlock.of(char))  {	  if(!Character.isDefined(c)&&    Character.UnicodeBlock.of(c))    {    	non-compiled	[CE]  '.class'  expected	76	None	replace
854	[BUG]  [BUGGY]  if(c!=  '#'  &&  c!='<  ')  {  [CE]  unclosed  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  '#'  &&  c!='<  ')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  '#'  &&  c!='<  ')  {	  if(c!=    '#')    {    	non-compiled	[CE]  unclosed  character  literal	92	None	replace
855	[BUG]  [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].startsWith(c))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUnicodeBlock(c)&&!chars[i].startsWith(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUnicodeBlock(c)&&!chars[i].startsWith(c))  {	  if    (!Character.isUnicodeBlock(c)&&!chars[i].equals(c))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
856	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isDigit(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isDigit(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
857	[BUG]  [BUGGY]  if(c!=  null  &&!Character.isUnicode(c))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  null  &&!Character.isUnicode(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  null  &&!Character.isUnicode(c))  {	  if(c!=    null    &&!Character.isISOControl(c))    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	60	None	replace
858	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  &&  c!=  '#')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
859	[BUG]  [BUGGY]  if(c!=  ':'  &&  c!=  '#')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '#')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  c!=  '#')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
860	[BUG]  [BUGGY]  if(c!=  ':'  &&  Character.UnicodeBlock.isDigit(c))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  Character.UnicodeBlock.isDigit(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  Character.UnicodeBlock.isDigit(c))  {	  if(c!=    ':')    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
861	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '%')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  &&  c!=  '%')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
862	[BUG]  [BUGGY]  if(c!=  ':'  &&  c!=  '%')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  c!=  '%')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  c!=  '%')  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
863	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  ':'  &&!Character.isUpperCase(c))  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
864	[BUG]  [BUGGY]  if(c!=  ':'  &&!Character.isUpperCase(c))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&!Character.isUpperCase(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&!Character.isUpperCase(c))  {	  if(c!=    ':')    {    	compilable	  [FE]  ComparisonFailure  	47	1	replace
865	[BUG]  [BUGGY]  if(c!=  ':'  &&  Character.UnicodeBlock.isWhitespace(c))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  ':'  &&  Character.UnicodeBlock.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  ':'  &&  Character.UnicodeBlock.isWhitespace(c))  {	  if(c!=    ':')    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
866	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'n'  &&  c!=  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
867	[BUG]  [BUGGY]  if(c!=  'n'  &&  c!=  'r')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  &&  c!=  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'n'  &&  c!=  'r')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
868	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'r'  ||  c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	add	if(c!=  'r'  ||  c!=  'n')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
869	[BUG]  [BUGGY]  if(c!=  'r'  ||  c!=  'n')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'r'  ||  c!=  'n')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  'r'  ||  c!=  'n')  {	  if(c!=    'n'    ||    c!=    'r')    {    	compilable	  [FE]  ComparisonFailure  	90	1	replace
870	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(chars.length);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(chars.length);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(chars.length);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
871	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c));	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
872	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c));	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
873	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c),  Character.toLowerCase(c));  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c),  Character.toLowerCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(Character.toLowerCase(c),  Character.toLowerCase(c));	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
874	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  Character.toUpperCase(c));	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
875	[BUG]  [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  chars[i]);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  chars[i]);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuffer  sb  =  new  StringBuffer(Character.toUpperCase(c),  chars[i]);	  StringBuffer    sb    =    new    StringBuffer();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
876	[BUG]  [BUGGY]  if(!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c),  s)  {  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c),  s)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isUpperCase(c)||  Character.UnicodeBlock.of(c),  s)  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
877	[BUG]  [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  s)  {  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  s)  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(!Character.isControl(c)&&  Character.UnicodeBlock.of(c),  s)  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(c),    s)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
878	[BUG]  [BUGGY]  if  (!Character.isUpperCase(c)||!chars[i].equals(c))  {  [CE]  char  cannot  be  dereferenced  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isUpperCase(c)||!chars[i].equals(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isUpperCase(c)||!chars[i].equals(c))  {	  if    (!Character.isUnicode(c)||!chars[i].equals(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	10	None	replace
879	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  {  'r')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  if(c!=  'n'  ||  c  {  'r')  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=    'n'    ||    c    ==    'r')    {    if(c!=  'n'  ||  c  {  'r')  {	  	non-compiled	[CE]  ')'  expected	44	None	add
880	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars.length);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars.length);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(chars.length);	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
881	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c),  Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c),  Character.toUpperCase(c));  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c),  Character.toUpperCase(c));	  StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
882	[BUG]  [BUGGY]  if  (!Character.isControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if  (!Character.isControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if  (!Character.isControl(c)&&  Character.UnicodeBlock.of(chars[i]))  {	  if    (!Character.isISOControl(c)||    Character.UnicodeBlock.of(chars[i]))    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
883	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c);  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isSynthetic(c)||  Character.UnicodeBlock.of(c);	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
884	[BUG]  [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isVoid(c))  {  [CE]  cannot  find  symbol  UnicodeBlock  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(Character.UnicodeBlock!=  null  &&!Character.isVoid(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(Character.UnicodeBlock!=  null  &&!Character.isVoid(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isSynthetic(c))    {    	non-compiled	[CE]  cannot  find  symbol  UnicodeBlock	63	None	replace
885	[BUG]  [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isWhitespace(c))  {  [CE]  cannot  find  symbol  UNICODE  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];      [BUGGY]  if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isWhitespace(c))  {  [BUGGY]      Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	278	278	1	replace	if(c!=  Character.UnicodeBlock.UNICODE  &&!Character.isWhitespace(c))  {	  if(Character.UnicodeBlock!=    null    &&!Character.isWhitespace(c))    {    	non-compiled	[CE]  cannot  find  symbol  UNICODE	100	None	replace
