bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    final  char  c  =(char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
2	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  Final  char  c  =(char)chars[i];  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  Final  char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    Final  char  c  =(char)chars[i];	  	non-compiled	[CE]  not  a  statement	6	None	add
3	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(Char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(Char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    final  char  c  =(Char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
4	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  final  String  c  =(char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  final  String  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    final  String  c  =(char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
5	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  char  c  =(char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    char  c  =(char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
6	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  String  c  =(char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  String  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    String  c  =(char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
7	[BUG]  [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    char  c  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
8	[BUG]  [BUGGY]  char  c  =  chars[i];  String  c  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  String  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    String  c  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
9	[BUG]  [BUGGY]  char  c  =  chars[i];  Character  c  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  Character  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    Character  c  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
10	[BUG]  [BUGGY]  char  c  =  chars[i];  Char  c  =  chars[i];  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  Char  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    Char  c  =  chars[i];	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
11	[BUG]  [BUGGY]  char  c  =  chars[i];  int  c  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  int  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    int  c  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
12	[BUG]  [BUGGY]  char  c  =  chars[i];  final  char  c  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  final  char  c  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    final  char  c  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
13	[BUG]  [BUGGY]  char  c  =  chars[i];  char  ch  =  chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  char  ch  =  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    char  ch  =  chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
14	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i  +  1);  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i  +  1);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i  +  1);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
15	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i]);  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i]);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i]);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  ')'  expected	4	None	replace
16	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i++);  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i++);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i++);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
17	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i,  len);  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i,  len);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i,  len);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
18	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i));  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i));	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i).toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i).toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i).toCharArray();	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
20	[BUG]  [BUGGY]  final  String  c  =  chars[i]  +  1;  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  +  1;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  +  1;	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  incompatible  types	3	None	replace
21	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  2;  [CE]  possible  loss  of  precision  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  2;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  2;	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
22	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  3;  [CE]  possible  loss  of  precision  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  3;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  3;	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
23	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  4;  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  4;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  4;	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
24	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  1L;  [CE]  possible  loss  of  precision  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  1L;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  1L;	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
25	[BUG]  [BUGGY]  final  String  c  =  chars[i].toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i].toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i].toCharArray();	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
26	[BUG]  [BUGGY]  final  char  c  =  s[i].toCharArray();  [CE]  array  required,  but  String  found  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  s[i].toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  s[i].toCharArray();	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  array  required,  but  String  found	8	None	replace
27	[BUG]  [BUGGY]  final  char  c  =  chars[i].toCharArray(s);  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].toCharArray(s);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].toCharArray(s);	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
28	[BUG]  [BUGGY]  final  char  c  =  chars[i],  s.toCharArray();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i],  s.toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i],  s.toCharArray();	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  ';'  expected	8	None	replace
29	[BUG]  [BUGGY]  final  char  c  =  chars[i].toString();  [CE]  char  cannot  be  dereferenced  [FE]                          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].toString();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].toString();	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
30	[BUG]  [BUGGY]  final  char  c  =  chars[i].toCharArray()  +  1;  [CE]  char  cannot  be  dereferenced  [FE]                            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].toCharArray()  +  1;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].toCharArray()  +  1;	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  s.charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	char  c  =  s.charAt(i);	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
32	[BUG]  [BUGGY]  char  c  =  s.charAt(i);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  s.charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  s.charAt(i);	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
33	[BUG]  [BUGGY]  char  c  =  chars[i].charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i].charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i].charAt(i);	      	non-compiled	[CE]  char  cannot  be  dereferenced	9	None	replace
34	[BUG]  [BUGGY]  String  c  =  s.charAt(i);  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  String  c  =  s.charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	String  c  =  s.charAt(i);	      	non-compiled	[CE]  incompatible  types	9	None	replace
35	[BUG]  [BUGGY]  String  c  =  s.substring(i  +  1,  len);  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]                          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  String  c  =  s.substring(i  +  1,  len);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	String  c  =  s.substring(i  +  1,  len);	      	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	9	None	replace
36	[BUG]  [BUGGY]  String  c  =  s.toString();  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]                            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  String  c  =  s.toString();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	String  c  =  s.toString();	      	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	9	None	replace
37	[BUG]  [BUGGY]  char  c  =  s.charAt(i).toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]                              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  s.charAt(i).toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  s.charAt(i).toCharArray();	      	non-compiled	[CE]  char  cannot  be  dereferenced	9	None	replace
38	[BUG]  [BUGGY]  final  String  c  =  chars[i].trim();  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i].trim();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i].trim();	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
39	[BUG]  [BUGGY]  final  char  c  =  chars[i].trim().toLowerCase();  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].trim().toLowerCase();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].trim().toLowerCase();	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
40	[BUG]  [BUGGY]  final  char  c  =  chars[i].trim().charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].trim().charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].trim().charAt(i);	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
41	[BUG]  [BUGGY]  final  char  c  =  chars[i].trim().toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].trim().toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].trim().toCharArray();	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
42	[BUG]  [BUGGY]  char  c  =  chars[i]  +  1;  [CE]  possible  loss  of  precision  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i]  +  1;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i]  +  1;	  char    c    =    chars[i];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	char  c  =(char)chars[i];	  char    c    =    chars[i];    	compilable	  [FE]  ComparisonFailure  	2	1	replace
44	[BUG]  [BUGGY]  char  c  =(char)chars[i];  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(char)chars[i];	  char    c    =    chars[i];    	compilable	  [FE]  ComparisonFailure  	2	1	replace
45	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	char  c  =  chars[i  +  1];	  char    c    =    chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
46	[BUG]  [BUGGY]  char  c  =  chars[i  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i  +  1];	  char    c    =    chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	1	replace
47	[BUG]  [BUGGY]  char  c  =  chars[i]  *  2;  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i]  *  2;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i]  *  2;	  char    c    =    chars[i];    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
48	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  final  char  c  =  chars[i  +  1];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  final  char  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    final  char  c  =  chars[i  +  1];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
49	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  Final  char  c  =  chars[i  +  1];  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  Final  char  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    Final  char  c  =  chars[i  +  1];	  	non-compiled	[CE]  not  a  statement	10	None	add
50	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  final  char  c  =  chars[i  +  2];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  final  char  c  =  chars[i  +  2];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    final  char  c  =  chars[i  +  2];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
51	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  char  c  =  chars[i  +  1];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  char  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    char  c  =  chars[i  +  1];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
52	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  final  String  c  =  chars[i  +  1];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  final  String  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    final  String  c  =  chars[i  +  1];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
53	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  String  c  =  chars[i  +  1];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  String  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    String  c  =  chars[i  +  1];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
54	[BUG]  [BUGGY]  final  String  c  =(String)chars[i];  [CE]  inconvertible  types  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =(String)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =(String)chars[i];	  final    char    c    =(char)chars[i];    	non-compiled	[CE]  inconvertible  types	7	None	replace
55	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =(char)chars[i  +  1];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
56	[BUG]  [BUGGY]  final  char  c  =(char)chars[i  +  1];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[i  +  1];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
57	[BUG]  [BUGGY]  final  char  c  =(char)chars[i]  +  1;  [CE]  possible  loss  of  precision  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i]  +  1;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[i]  +  1;	  final    char    c    =(char)chars[i];    	non-compiled	[CE]  possible  loss  of  precision	7	None	replace
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  Character  c  =(Character)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	Character  c  =(Character)chars[i];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ComparisonFailure  	7	1	replace
59	[BUG]  [BUGGY]  Character  c  =(Character)chars[i];  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  Character  c  =(Character)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	Character  c  =(Character)chars[i];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ComparisonFailure  	7	1	replace
60	[BUG]  [BUGGY]  Char  c  =(char)chars[i];  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  Char  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	Char  c  =(char)chars[i];	  final    char    c    =(char)chars[i];    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
61	[BUG]  [BUGGY]  final  String  c  =  chars[i].toLowerCase();  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i].toLowerCase();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i].toLowerCase();	  final    String    c    =    chars[i];    	non-compiled	[CE]  char  cannot  be  dereferenced	5	None	replace
62	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + "n   ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + "n   ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + "n   ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
63	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ".null ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ".null ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ".null ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
64	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ".n   ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ".n   ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ".n   ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
65	[BUG]  [BUGGY]  final  char  c  =  chars[i]  + ".null ";  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  + ".null ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  + ".null ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  incompatible  types	12	None	replace
66	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  *  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =  chars[i  *  1];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ComparisonFailure  	11	1	replace
67	[BUG]  [BUGGY]  final  char  c  =  chars[i  *  1];  [FE]  ComparisonFailure  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  *  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  *  1];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ComparisonFailure  	11	1	replace
68	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  3];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =  chars[i  +  3];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
69	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  3];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  3];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  +  3];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
70	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  2];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =  chars[i  +  2];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
71	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  2];  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  2];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  +  2];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
72	[BUG]  [BUGGY]  final  String  c  =  chars[i  +  1];  [CE]  incompatible  types  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i  +  1];	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  incompatible  types	11	None	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  11];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =  chars[i  +  11];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
74	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  11];  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  11];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  +  11];	  final    char    c    =    chars[i    +    1];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	replace
75	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1]+ "n ";  [CE]  incompatible  types  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1]+ "n ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  +  1]+ "n ";	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  incompatible  types	11	None	replace
76	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1]+'.';  [CE]  possible  loss  of  precision  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1]+'.';  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i  +  1]+'.';	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
77	[BUG]  [BUGGY]  final  String  c  =  chars[i],  s.toCharArray();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i],  s.toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i],  s.toCharArray();	  final    String    c    =    chars[i];    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[0];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =(char)chars[0];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ComparisonFailure  	7	1	replace
79	[BUG]  [BUGGY]  final  char  c  =(char)chars[0];  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[0];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[0];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ComparisonFailure  	7	1	replace
80	[BUG]  [BUGGY]  final  char  c  =(char)chars[i].toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i].toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[i].toCharArray();	  final    char    c    =(char)chars[i];    	non-compiled	[CE]  char  cannot  be  dereferenced	7	None	replace
81	[BUG]  [BUGGY]  final  char  c  =  chars[i  +  1];  final  int  c  =  chars[i  +  1];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i  +  1];  final  int  c  =  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =    chars[i    +    1];    final  int  c  =  chars[i  +  1];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	10	None	add
82	[BUG]  [BUGGY]  final  char  c  =  chars[i].toCharArray(len);  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].toCharArray(len);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].toCharArray(len);	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
83	[BUG]  [BUGGY]  final  char  c  =  chars[i].toCharArray().trim();  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].toCharArray().trim();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].toCharArray().trim();	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
84	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  final  int  c  =(char)chars[i];  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  final  int  c  =(char)chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    final  int  c  =(char)chars[i];	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	6	None	add
85	[BUG]  [BUGGY]  char  c  =(char)chars[i].charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(char)chars[i].charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(char)chars[i].charAt(i);	      	non-compiled	[CE]  char  cannot  be  dereferenced	9	None	replace
86	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  '0';  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  '0';  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  '0';	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
87	[BUG]  [BUGGY]  final  char  c  =  chars[i].substring(i  +  1,  len);  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].substring(i  +  1,  len);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].substring(i  +  1,  len);	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
88	[BUG]  [BUGGY]  final  char  c  =  chars[i].substring(i);  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].substring(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].substring(i);	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
89	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i];  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i];	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  ')'  expected	4	None	replace
90	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i).charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i).charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i).charAt(i);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
91	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(i)+  1;  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(i)+  1;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(i)+  1;	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
92	[BUG]  [BUGGY]  char  c  =  chars[i]  + "n ";  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i]  + "n ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i]  + "n ";	  char    c    =    chars[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
93	[BUG]  [BUGGY]  char  c  =  chars[i]  + ";n ";  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i]  + ";n ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  chars[i]  + ";n ";	  char    c    =    chars[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
94	[BUG]  [BUGGY]  final  String  c  =  chars[i]  +   "null ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  +   "null ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  +   "null ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
95	[BUG]  [BUGGY]  final  String  c  =  chars[i]  +   "none ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  +   "none ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  +   "none ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
96	[BUG]  [BUGGY]  final  String  c  =  chars[i]  +   "no ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  +   "no ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  +   "no ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
97	[BUG]  [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  s.toCharArray();  [CE]  incomparable  types:  char  and  <null>  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  s.toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(chars[i]!=  null)?  chars[i]  :  s.toCharArray();	  char    c    =    chars[i];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	2	None	replace
98	[BUG]  [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  s.toString();  [CE]  incomparable  types:  char  and  <null>  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  s.toString();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(chars[i]!=  null)?  chars[i]  :  s.toString();	  char    c    =    chars[i];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	2	None	replace
99	[BUG]  [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  chars[i];  [CE]  incomparable  types:  char  and  <null>  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(chars[i]!=  null)?  chars[i]  :  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(chars[i]!=  null)?  chars[i]  :  chars[i];	  char    c    =    chars[i];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	2	None	replace
100	[BUG]  [BUGGY]  char  c  =(chars[i]!=  null)?  s  :  chars[i];  [CE]  incomparable  types:  char  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =(chars[i]!=  null)?  s  :  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =(chars[i]!=  null)?  s  :  chars[i];	  char    c    =    chars[i];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	2	None	replace
101	[BUG]  [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(char)chars[i].;  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i];  final  char  c  =(char)chars[i].;  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final    char    c    =(char)chars[i];    final  char  c  =(char)chars[i].;	  	non-compiled	[CE]  <identifier>  expected	6	None	add
102	[BUG]  [BUGGY]  final  String  c  =  chars[i].charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i].charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i].charAt(i);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
103	[BUG]  [BUGGY]  final  char  c  =  chars[i].charAt(len);  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].charAt(len);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].charAt(len);	  final    char    c    =    chars[i].charAt(i);    	non-compiled	[CE]  char  cannot  be  dereferenced	4	None	replace
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  Character  c  =  s.charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	Character  c  =  s.charAt(i);	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
105	[BUG]  [BUGGY]  Character  c  =  s.charAt(i);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  Character  c  =  s.charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	Character  c  =  s.charAt(i);	      	compilable	  [FE]  ComparisonFailure  	9	1	replace
106	[BUG]  [BUGGY]  char  c  =  s.toCharArray();  [CE]  incompatible  types  [FE]                      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  s.toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char  c  =  s.toCharArray();	      	non-compiled	[CE]  incompatible  types	9	None	replace
107	[BUG]  [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  chars[i  +  1];  [CE]  incomparable  types:  char  and  <null>  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  chars[i  +  1];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  chars[i  +  1];	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
108	[BUG]  [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toString();  [CE]  incomparable  types:  char  and  <null>  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toString();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toString();	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
109	[BUG]  [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toCharArray();  [CE]  incomparable  types:  char  and  <null>  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toCharArray();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(chars[i  +  1]!=  null)?  chars[i  +  1]  :  s.toCharArray();	  final    char    c    =    chars[i    +    1];    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
110	[BUG]  [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i].charAt(i);  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i].charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    char  c  =  chars[i].charAt(i);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
111	[BUG]  [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i].charValue();  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  char  c  =  chars[i];  char  c  =  chars[i].charValue();  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	char    c    =    chars[i];    char  c  =  chars[i].charValue();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	1	None	add
112	[BUG]  [BUGGY]  final  char  c  =  chars[i].trim().replace('.',  '/');  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].trim().replace('.',  '/');  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].trim().replace('.',  '/');	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
113	[BUG]  [BUGGY]  final  char  c  =  chars[i].trim().replace('',  '/');  [CE]  empty  character  literal  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].trim().replace('',  '/');  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].trim().replace('',  '/');	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  empty  character  literal	13	None	replace
114	[BUG]  [BUGGY]  final  char  c  =  chars[i].replace('.',  '/');  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].replace('.',  '/');  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].replace('.',  '/');	  final    char    c    =    chars[i].trim();    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
115	[BUG]  [BUGGY]  final  char  c  =  chars[i].getChars(i);  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i].getChars(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i].getChars(i);	  final    char    c    =    chars[i].toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
116	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ",null ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ",null ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ",null ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
117	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ".no ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ".no ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ".no ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
118	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ".none ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ".none ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ".none ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
119	[BUG]  [BUGGY]  final  String  c  =  chars[i]  + ".next ";  [CE]  no  suitable  method  found  for  isISOControl(String)  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i]  + ".next ";  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i]  + ".next ";	  final    char    c    =    chars[i]    +   "n   ";    	non-compiled	[CE]  no  suitable  method  found  for  isISOControl(String)	12	None	replace
120	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  chars[i];  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  chars[i];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  chars[i];	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
121	[BUG]  [BUGGY]  final  char  c  =  chars[i]  +  '.';  [CE]  possible  loss  of  precision  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =  chars[i]  +  '.';  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =  chars[i]  +  '.';	  final    char    c    =    chars[i]    +    1;    	non-compiled	[CE]  possible  loss  of  precision	3	None	replace
122	[BUG]  [BUGGY]  final  String  c  =  chars[i],  s.toCharArray());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i],  s.toCharArray());  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i],  s.toCharArray());	  final    String    c    =    chars[i];    	non-compiled	[CE]  ';'  expected	5	None	replace
123	[BUG]  [BUGGY]  final  String  c  =  chars[i].replace('.',  '/');  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i].replace('.',  '/');  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i].replace('.',  '/');	  final    String    c    =    chars[i];    	non-compiled	[CE]  char  cannot  be  dereferenced	5	None	replace
124	[BUG]  [BUGGY]  final  String  c  =  chars[i],  s.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  String  c  =  chars[i],  s.toString());  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  String  c  =  chars[i],  s.toString());	  final    String    c    =    chars[i];    	non-compiled	[CE]  ';'  expected	5	None	replace
125	[BUG]  [BUGGY]  final  char  c  =(char)chars[i].charAt(i);  [CE]  char  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i].charAt(i);  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[i].charAt(i);	  final    char    c    =(char)chars[i];    	non-compiled	[CE]  char  cannot  be  dereferenced	7	None	replace
126	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i  *  len];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	add	final  char  c  =(char)chars[i  *  len];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
127	[BUG]  [BUGGY]  final  char  c  =(char)chars[i  *  len];  [FE]  ArrayIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {    [BUGGY]  final  char  c  =(char)chars[i  *  len];  [BUGGY]    if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {  sb.append(c);  continue;  }  }  sb.append('?');  }  return  sb.toString();  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	277	277	1	replace	final  char  c  =(char)chars[i  *  len];	  final    char    c    =(char)chars[i];    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	7	1	replace
