bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  chars.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
2	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  c.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	218	None	replace
3	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  chars[i]);	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	218	None	replace
4	[BUG]  [BUGGY]  sb.append(':');  sb.append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block.charAt(i  +  1));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
5	[BUG]  [BUGGY]  sb.append(':');  sb.append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block.charAt(i),  c);	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
6	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(chars[i]);	  sb.append(':');    sb.append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	218	1	replace
7	[BUG]  [BUGGY]  sb.append(':');  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(chars[i]);	  sb.append(':');    sb.append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	218	1	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append(']');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
9	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(']');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append('[');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append('[');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
11	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append('[');  sb.append(':');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append('[');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append('[');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
12	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  String  sb  =(String)block.clone();  sb.append(']');  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  String  sb  =(String)block.clone();  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    String  sb  =(String)block.clone();  sb.append(']');  sb.append(':');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	35	None	add
13	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  String  sb.append(']');  sb.append(':');  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  String  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    String  sb.append(']');  sb.append(':');	  	non-compiled	[CE]  ';'  expected	35	None	add
14	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append('].');  sb.append(':');  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append('].');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append('].');  sb.append(':');	  	non-compiled	[CE]  unclosed  character  literal	35	None	add
15	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']').  sb.append(':');  [CE]  cannot  find  symbol  sb  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']').  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(']').  sb.append(':');	  	non-compiled	[CE]  cannot  find  symbol  sb	35	None	add
16	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append( "]');  sb.append(':');  [CE]  unclosed  string  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append( "]');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append( "]');  sb.append(':');	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
17	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append(':');  return  sb.toString();  [CE]  unreachable  statement  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append(':');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(']');  sb.append(':');  return  sb.toString();	  	non-compiled	[CE]  unreachable  statement	35	None	add
18	[BUG]  [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	120	None	replace
19	[BUG]  [BUGGY]  String  sb  =  s.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  s.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  s.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	120	None	replace
20	[BUG]  [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	120	None	replace
21	[BUG]  [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  s.append('?');  if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	120	None	replace
22	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
23	[BUG]  [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null  ||  sb.length()  ==  0)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  s.append('?');  if(sb!=  null  ||  sb.length()  ==  0)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  s.append('?');  if(sb!=  null  ||  sb.length()  ==  0)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	120	None	replace
24	[BUG]  [BUGGY]  sb.append('/'  +  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  chars.charAt(i));	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
25	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i),  c);	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  chars[i]);	  sb.append('/'    +    block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	167	1	replace
27	[BUG]  [BUGGY]  sb.append('/'  +  chars[i]);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  chars[i]);	  sb.append('/'    +    block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	167	1	replace
28	[BUG]  [BUGGY]  sb.append('/'  +  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  c.charAt(i));	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	167	None	replace
29	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i),  len);	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
30	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i++));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i++));	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block.toString());    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	16	1	add
32	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	16	1	add
33	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  String  sb.append(':').append(block.toString());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  String  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    String  sb.append(':').append(block.toString());	  	non-compiled	[CE]  ';'  expected	16	None	add
34	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  StringBuilder  sb.append(':').append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  StringBuilder  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    StringBuilder  sb.append(':').append(block.toString());	  	non-compiled	[CE]  ';'  expected	16	None	add
35	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(lock.toString());  [CE]  cannot  find  symbol  lock  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(lock.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(lock.toString());	  	non-compiled	[CE]  cannot  find  symbol  lock	16	None	add
36	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(block.toString());  continue;	  	non-compiled	[CE]  unreachable  statement	16	None	add
37	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString();  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(block.toString();	  	non-compiled	[CE]  ')'  expected	16	None	add
38	[BUG]  [BUGGY]  sb.append(']');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');  sb.append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');  sb.append(block.charAt(i));	  sb.append(']');    sb.append('_');    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
39	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	150	None	replace
40	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	150	None	replace
41	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	150	None	replace
42	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	150	None	replace
43	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(0));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	150	None	replace
44	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
45	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ").append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ").append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS ").append(block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
46	[BUG]  [BUGGY]  sb.append(':');  sb.append(c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	203	None	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i]);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	compilable	  [FE]  ComparisonFailure  	203	1	replace
48	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i]);  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i]);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	compilable	  [FE]  ComparisonFailure  	203	1	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
50	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
52	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
53	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	non-compiled	[CE]  unclosed  string  literal	116	None	add
54	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }	  	non-compiled	[CE]  unclosed  character  literal	116	None	add
55	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
56	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	non-compiled	[CE]  unclosed  character  literal	116	None	add
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
58	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');  sb.append(c);	  sb.append(']');    sb.append('].');    	compilable	  [FE]  ComparisonFailure  	34	1	replace
60	[BUG]  [BUGGY]  sb.append(']');  sb.append(c);  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');  sb.append(c);	  sb.append(']');    sb.append('].');    	compilable	  [FE]  ComparisonFailure  	34	1	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toLowerCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(Character.toLowerCase(c));	  sb.append(']');    sb.append('].');    	compilable	  [FE]  ComparisonFailure  	34	1	replace
62	[BUG]  [BUGGY]  sb.append(Character.toLowerCase(c));  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toLowerCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Character.toLowerCase(c));	  sb.append(']');    sb.append('].');    	compilable	  [FE]  ComparisonFailure  	34	1	replace
63	[BUG]  [BUGGY]  sb.append(c.toString());  [CE]  char  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.toString());	  sb.append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	127	None	replace
64	[BUG]  [BUGGY]  sb.append(':').append(block,  c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
65	[BUG]  [BUGGY]  sb.append(':').append(c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
66	[BUG]  [BUGGY]  sb.append(':').append(c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c,  block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
67	[BUG]  [BUGGY]  sb.append(':').append(block!=  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block!=  null?  null  :  block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
68	[BUG]  [BUGGY]  sb.append(':').append(chars[block.toCharArray());  [CE]  ']'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  ']'  expected	13	None	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
70	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
71	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
72	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
73	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
74	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  string  literal	114	None	add
75	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	114	None	add
76	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('? "');  }  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('? "');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('? "');  }	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
77	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
78	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  unclosed  character  literal  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
79	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
80	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
81	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
82	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
83	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i  +  1),  block.charAt(i  +  1));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  c  +  1);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
85	[BUG]  [BUGGY]  sb.append('/'  +  c  +  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  c  +  1);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
86	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  i);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
87	[BUG]  [BUGGY]  sb.append('/'  +  i);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  i);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
88	[BUG]  [BUGGY]  sb.append('/'  +  block);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block);	  sb.append('/'    +    c);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	109	None	replace
89	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(c);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
90	[BUG]  [BUGGY]  sb.append('/').append(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(c);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append(':');    sb.append(block);  sb.append(block).append(':');	  	compilable	  [FE]  ComparisonFailure  	10	1	add
92	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block).append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    sb.append(block);  sb.append(block).append(':');	  	compilable	  [FE]  ComparisonFailure  	10	1	add
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append(':');    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
94	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
95	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(block!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append(':');    if(block!=  null)  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
96	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(block!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(block!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    if(block!=  null)  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
97	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  String  sb.append(block);  sb.append(block).append(':');  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  String  sb.append(block);  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    String  sb.append(block);  sb.append(block).append(':');	  	non-compiled	[CE]  ';'  expected	10	None	add
98	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append(':');    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
99	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  continue;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block).append(':');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
100	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('/');	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
101	[BUG]  [BUGGY]  sb.append('/');  final  String  sb  =(String)block.clone();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  final  String  sb  =(String)block.clone();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  final  String  sb  =(String)block.clone();  sb.append('/');	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
102	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
103	[BUG]  [BUGGY]  final  String  sb  =(String)block.clone();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.clone();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.clone();  sb.append('/');	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
104	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('/',  sb);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('/',  sb);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('/',  sb);	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
105	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
106	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
107	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append('[');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
108	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append('[');  sb.append('_');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append('[');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
109	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  String  sb  =(String)block.clone();  sb.append(']');  sb.append('_');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  String  sb  =(String)block.clone();  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    String  sb  =(String)block.clone();  sb.append(']');  sb.append('_');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	128	None	add
110	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  String  sb.append(']');  sb.append('_');  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  String  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    String  sb.append(']');  sb.append('_');	  	non-compiled	[CE]  ';'  expected	128	None	add
111	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append('].');  sb.append('_');  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append('].');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append('].');  sb.append('_');	  	non-compiled	[CE]  unclosed  character  literal	128	None	add
112	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']').  sb.append('_');  [CE]  cannot  find  symbol  sb  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']').  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append(']').  sb.append('_');	  	non-compiled	[CE]  cannot  find  symbol  sb	128	None	add
113	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append( "]');  sb.append('_');  [CE]  unclosed  string  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append( "]');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append( "]');  sb.append('_');	  	non-compiled	[CE]  unclosed  string  literal	128	None	add
114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
115	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
116	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
117	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
118	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
119	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
121	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
123	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
125	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append(':');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
127	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append(':');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block);    sb.append(':').append(block);	  	compilable	  [FE]  ComparisonFailure  	152	1	add
129	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block);	  	compilable	  [FE]  ComparisonFailure  	152	1	add
130	[BUG]  [BUGGY]  sb.append(':').append(block);  String  sb.append(':').append(block);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  String  sb.append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    String  sb.append(':').append(block);	  	non-compiled	[CE]  ';'  expected	152	None	add
131	[BUG]  [BUGGY]  sb.append(':').append(block);  StringBuilder  sb.append(':').append(block);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  StringBuilder  sb.append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    StringBuilder  sb.append(':').append(block);	  	non-compiled	[CE]  ';'  expected	152	None	add
132	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block;  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block;	  	non-compiled	[CE]  ')'  expected	152	None	add
133	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block,  c);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	152	None	add
134	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block));	  	non-compiled	[CE]  ';'  expected	152	None	add
135	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append(']');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append(']');	  sb.append('[');    String    sb    =(String)block.clone();    sb.append(']');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	90	None	replace
136	[BUG]  [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  sb.append(']');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  final  String  sb  =(String)block.clone();  sb.append(']');	  sb.append('[');    String    sb    =(String)block.clone();    sb.append(']');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	90	None	replace
137	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.clone());  [CE]  clone()  has  protected  access  in  Object  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.clone());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.clone());	  sb.append('[');    String    sb    =(String)block.clone();    sb.append(']');    	non-compiled	[CE]  clone()  has  protected  access  in  Object	90	None	replace
138	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('n');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
139	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('n');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('n');    if(block!=  null)  {  sb.append(block);  sb.append(block).append('n');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
141	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    if(block!=  null)  {  sb.append(block);  sb.append(block).append('n');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
142	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  String  sb.append(block);  sb.append(block).append('n');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  String  sb.append(block);  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    String  sb.append(block);  sb.append(block).append('n');	  	non-compiled	[CE]  ';'  expected	7	None	add
143	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('m');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
144	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('m');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('m');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
145	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('r');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
146	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('r');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('r');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
147	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    sb.append('/'  +  block.toString());	  	compilable	  [FE]  ComparisonFailure  	168	1	add
148	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  block.toString());	  	compilable	  [FE]  ComparisonFailure  	168	1	add
149	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  StringBuilder  sb.append('/'  +  block.toString());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  StringBuilder  sb.append('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    StringBuilder  sb.append('/'  +  block.toString());	  	non-compiled	[CE]  ';'  expected	168	None	add
150	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  StringBuffer  sb.append('/'  +  block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  StringBuffer  sb.append('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    StringBuffer  sb.append('/'  +  block.toString());	  	non-compiled	[CE]  ';'  expected	168	None	add
151	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  String  sb.append('/'  +  block.toString());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  String  sb.append('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    String  sb.append('/'  +  block.toString());	  	non-compiled	[CE]  ';'  expected	168	None	add
152	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  StringBuilder  sb  =  new  StringBuilder('/'  +  block.toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  StringBuilder  sb  =  new  StringBuilder('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    StringBuilder  sb  =  new  StringBuilder('/'  +  block.toString());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	168	None	add
153	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  Block.toString());  [CE]  cannot  find  symbol  Block  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  Block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  Block.toString());	  	non-compiled	[CE]  cannot  find  symbol  Block	168	None	add
154	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString());  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString());  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  block.toString());  continue;	  	non-compiled	[CE]  unreachable  statement	168	None	add
155	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString();  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  block.toString();	  	non-compiled	[CE]  ')'  expected	168	None	add
156	[BUG]  [BUGGY]  sb.append('?').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  chars.charAt(i));	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
157	[BUG]  [BUGGY]  sb.append('?').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  c.charAt(i));	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	52	None	replace
158	[BUG]  [BUGGY]  sb.append('?').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  chars[i]);	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	52	None	replace
159	[BUG]  [BUGGY]  sb.append('?');  sb.append('?').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append('?').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append('?').append(block,  chars.charAt(i));	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(chars[i]);	  sb.append('?');    sb.append('?').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	52	1	replace
161	[BUG]  [BUGGY]  sb.append('?').append(chars[i]);  [FE]  ComparisonFailure  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(chars[i]);	  sb.append('?');    sb.append('?').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	52	1	replace
162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(c);	  sb.append(':');    StringBuilder    sb.append(':');    	compilable	  [FE]  ComparisonFailure  	28	1	replace
163	[BUG]  [BUGGY]  sb.append(':').append(c);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c);	  sb.append(':');    StringBuilder    sb.append(':');    	compilable	  [FE]  ComparisonFailure  	28	1	replace
164	[BUG]  [BUGGY]  StringBuilder  sb.append(':');  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb.append(':');	  sb.append(':');    StringBuilder    sb.append(':');    	non-compiled	[CE]  ';'  expected	28	None	replace
165	[BUG]  [BUGGY]  final  StringBuilder  sb.append(':');  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  StringBuilder  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  StringBuilder  sb.append(':');	  sb.append(':');    StringBuilder    sb.append(':');    	non-compiled	[CE]  ';'  expected	28	None	replace
166	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
167	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
168	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
169	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
170	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	add
171	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	229	None	add
172	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('[');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
173	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('[');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
175	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
176	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	229	None	add
177	[BUG]  [BUGGY]  sb.append(Block.UnicodeBlock.SEPARATOR);  [CE]  package  Block  does  not  exist  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Block.UnicodeBlock.SEPARATOR);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Block.UnicodeBlock.SEPARATOR);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SEPARATOR);    	non-compiled	[CE]  package  Block  does  not  exist	214	None	replace
178	[BUG]  [BUGGY]  sb.append(block,  Block.UnicodeBlock.SEPARATOR);  [CE]  package  Block  does  not  exist  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Block.UnicodeBlock.SEPARATOR);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Block.UnicodeBlock.SEPARATOR);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SEPARATOR);    	non-compiled	[CE]  package  Block  does  not  exist	214	None	replace
179	[BUG]  [BUGGY]  sb.append(block.charAt(i),  block.SEPARATOR);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  block.SEPARATOR);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  block.SEPARATOR);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
180	[BUG]  [BUGGY]  sb.append('#').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#').append(block.charAt(i));	  sb.append('#');    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#'  +  c);	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
182	[BUG]  [BUGGY]  sb.append('#'  +  c);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#'  +  c);	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#').append(block.toString());	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
184	[BUG]  [BUGGY]  sb.append('#').append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#').append(block.toString());	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#').append(c);	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
186	[BUG]  [BUGGY]  sb.append('#').append(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#').append(c);	  sb.append('#');    	compilable	  [FE]  ComparisonFailure  	81	1	replace
187	[BUG]  [BUGGY]  sb.append('#').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#').append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#').append(block.toCharArray());	  sb.append('#');    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
188	[BUG]  [BUGGY]  sb.append('/');  final  StringBuilder  sb.append('/');  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  final  StringBuilder  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  final  StringBuilder  sb.append('/');	  sb.append('/');    StringBuilder    sb.append('/');    	non-compiled	[CE]  ';'  expected	62	None	replace
189	[BUG]  [BUGGY]  sb.append(':').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
190	[BUG]  [BUGGY]  sb.append(':').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	12	None	replace
191	[BUG]  [BUGGY]  sb.append(':').append(chars[block.charAt(i));  [CE]  ']'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[block.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  ']'  expected	12	None	replace
192	[BUG]  [BUGGY]  sb.append(':').append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c,  block.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
193	[BUG]  [BUGGY]  sb.append(':').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars[i]);	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	12	None	replace
194	[BUG]  [BUGGY]  sb.append(':').append(chars[block.charAt(i)]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[block.charAt(i)]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[block.charAt(i)]);	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
195	[BUG]  [BUGGY]  sb.append(block,  s,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,String,boolean)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,String,boolean)	6	None	replace
196	[BUG]  [BUGGY]  sb.append(block,  c,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char,boolean)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char,boolean)	6	None	replace
197	[BUG]  [BUGGY]  sb.append(c,  block);  sb.append(block,  false);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block);  sb.append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block);  sb.append(block,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	6	None	replace
198	[BUG]  [BUGGY]  sb.append(block,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	6	None	replace
199	[BUG]  [BUGGY]  sb.append(block,  s);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,String)	6	None	replace
200	[BUG]  [BUGGY]  sb.append(block,  i,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  i,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  i,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,boolean)	6	None	replace
201	[BUG]  [BUGGY]  sb.append(s,  block,  false);  [CE]  no  suitable  method  found  for  append(String,UnicodeBlock,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(s,  block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(s,  block,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(String,UnicodeBlock,boolean)	6	None	replace
202	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
203	[BUG]  [BUGGY]  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
204	[BUG]  [BUGGY]  sb.append('/').append(c.toString());  [CE]  char  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(c.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	64	None	replace
205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(block!=  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
206	[BUG]  [BUGGY]  sb.append('/').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block!=  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
207	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(block  ==  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
208	[BUG]  [BUGGY]  sb.append('/').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block  ==  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
209	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');  sb.append('/').append(block!=  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
210	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append('/').append(block!=  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
211	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');  sb.append('/').append(block  ==  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
212	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append('/').append(block  ==  null?  null  :  block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
213	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append( ": ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append( ": ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append( ": ");	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	162	None	replace
214	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ": ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ": ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ": ");	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	162	None	replace
215	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append(':');	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	162	None	replace
216	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append(c);	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	162	None	replace
217	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
218	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
219	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	add
220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
221	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
222	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
223	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
224	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(c);  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
225	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(c);  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
226	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
227	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
228	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(c);  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
229	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(c);  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
230	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i)));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
231	[BUG]  [BUGGY]  sb.append('[').append(c.charAt(i)));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
232	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i  +  1)));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i  +  1)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i  +  1)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
233	[BUG]  [BUGGY]  sb.append('[').append(c,  block.charAt(i)));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c,  block.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c,  block.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
234	[BUG]  [BUGGY]  sb.append('[').append(c).append(block.charAt(i)));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c).append(block.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c).append(block.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
235	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i)+  1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i)+  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i)+  1));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
236	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
237	[BUG]  [BUGGY]  sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
238	[BUG]  [BUGGY]  sb.append(':').append(chars[i  +  1].append(block.charAt(i  +  1)  ==  ':');  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i  +  1].append(block.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i  +  1].append(block.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  ')'  expected	160	None	replace
239	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i  +  1);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i  +  1);	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  ')'  expected	160	None	replace
240	[BUG]  [BUGGY]  sb.append(':').append(block,  c.charAt(i  +  1)  ==  ':');  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  char  cannot  be  dereferenced	160	None	replace
241	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  chars.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
242	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block!=  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
243	[BUG]  [BUGGY]  sb.append(':').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block!=  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
244	[BUG]  [BUGGY]  sb.append(':').append(c.toString());  [CE]  char  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	27	None	replace
245	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c).append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(c).append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
246	[BUG]  [BUGGY]  sb.append(':').append(c).append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c).append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c).append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
247	[BUG]  [BUGGY]  sb.append(':').append(chars[i].toString());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i].toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i].toString());	  sb.append(':');    sb.append(':').append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	27	None	replace
248	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ": ").append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
249	[BUG]  [BUGGY]  sb.append( ": ").append(block.toString());  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ").append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
250	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
251	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
252	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i).toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
253	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i)).toString();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i)).toString();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i)).toString();  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
254	[BUG]  [BUGGY]  sb.append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
255	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.toString());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
256	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
257	[BUG]  [BUGGY]  sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
258	[BUG]  [BUGGY]  sb.append(':').append(chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i],  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
259	[BUG]  [BUGGY]  sb.append(':').append(block,  c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	25	None	replace
260	[BUG]  [BUGGY]  sb.append(':').append(c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	25	None	replace
261	[BUG]  [BUGGY]  sb.append(':').append(chars[i]).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i]).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i]).append(block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
262	[BUG]  [BUGGY]  sb.append('?',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block.charAt(i));	  sb.append('?');    sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    sb.append('[');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
264	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append('[');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
266	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
267	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
268	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
269	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
270	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
271	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
272	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
274	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
276	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  return  sb.toString();  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('[');  sb.append(c);  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
278	[BUG]  [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
279	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.clone();  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.clone();  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =(String)block.clone();  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
280	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb.append(':'  +  c);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb.append(':'  +  c);	  	non-compiled	[CE]  ';'  expected	18	None	add
281	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.getValue();  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.getValue();  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =(String)block.getValue();  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
282	[BUG]  [BUGGY]  sb.append(':'  +  c);  StringBuilder  sb.append(':'  +  c);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  StringBuilder  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    StringBuilder  sb.append(':'  +  c);	  	non-compiled	[CE]  ';'  expected	18	None	add
283	[BUG]  [BUGGY]  sb.append(':'  +  c);  StringBuffer  sb.append(':'  +  c);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  StringBuffer  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    StringBuffer  sb.append(':'  +  c);	  	non-compiled	[CE]  ';'  expected	18	None	add
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
285	[BUG]  [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	18	1	add
286	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.clone();  sb.append( ":'  +  c);  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =(String)block.clone();  sb.append( ":'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =(String)block.clone();  sb.append( ":'  +  c);	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
287	[BUG]  [BUGGY]  sb.append('/');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append(block.charAt(i));	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
288	[BUG]  [BUGGY]  sb.append('/',  block.toString());  [CE]  no  suitable  method  found  for  append(char,String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.toString());	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,String)	222	None	replace
289	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.charAt(i  +  1))  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.charAt(i  +  1))  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.charAt(i  +  1))  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  ';'  expected	123	None	replace
290	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(c);	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
291	[BUG]  [BUGGY]  sb.append('?').append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c);	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
292	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
293	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
294	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
295	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
296	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
297	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
298	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
299	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
300	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
301	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
302	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
303	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
304	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	186	None	add
305	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
306	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i),  block.charAt(i));  [CE]  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  	201	None	replace
307	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS "  +  charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
308	[BUG]  [BUGGY]  sb.append(':',  block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  block.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
309	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").append(chars[i],  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
310	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  chars.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
311	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  c.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	130	None	replace
312	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  chars[i]);	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	130	None	replace
313	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.charAt(i  +  1));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
314	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append(chars[i]);	  sb.append('?');    sb.append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	130	1	replace
315	[BUG]  [BUGGY]  sb.append('?');  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(chars[i]);	  sb.append('?');    sb.append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	130	1	replace
316	[BUG]  [BUGGY]  sb.append('?');  sb.append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c,  block.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
317	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
318	[BUG]  [BUGGY]  sb.append('/');  final  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  final  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  final  String  sb  =  new  String(block.charAt(i));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
319	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
320	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
321	[BUG]  [BUGGY]  sb.append('/');  final  String  sb  =  new  String(block.charAt(i));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  final  String  sb  =  new  String(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  final  String  sb  =  new  String(block.charAt(i));	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
322	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append(block);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
323	[BUG]  [BUGGY]  sb.append(c).append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append(block);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
324	[BUG]  [BUGGY]  sb.append(':').append(block,  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c);	  sb.append(':').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	153	None	replace
325	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(chars[i]);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
326	[BUG]  [BUGGY]  sb.append(':').append(chars[i]);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i]);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
327	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append(':').append(block);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
328	[BUG]  [BUGGY]  sb.append(c).append(':').append(block);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append(':').append(block);	  sb.append(':').append(block);    	compilable	  [FE]  ComparisonFailure  	153	1	replace
329	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append(   ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(   ".]   ");    sb.append(']');  sb.append(   ".] ");	  	compilable	  [FE]  ComparisonFailure  	211	1	add
330	[BUG]  [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append(   ".] ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append(   ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(   ".]   ");    sb.append(']');  sb.append(   ".] ");	  	compilable	  [FE]  ComparisonFailure  	211	1	add
331	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[].]  ]  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append( ",.]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(   ".]   ");    sb.append(']');  sb.append( ",.]   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[].]  ]  	211	1	add
332	[BUG]  [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append( ",.]   ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[].]  ]  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   ".]   ");  sb.append(']');  sb.append( ",.]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(   ".]   ");    sb.append(']');  sb.append( ",.]   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[].]  ]  	211	1	add
333	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
334	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
335	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  String  sb.append('[');  sb.append('[').append('[');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  String  sb.append('[');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    String  sb.append('[');  sb.append('[').append('[');	  	non-compiled	[CE]  ';'  expected	139	None	add
336	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append( "[');  sb.append('[').append('[');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append( "[');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append( "[');  sb.append('[').append('[');	  	non-compiled	[CE]  unclosed  string  literal	139	None	add
337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(']');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append('[');    sb.append(']');  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
338	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(']');  sb.append('[').append('[');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(']');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append(']');  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
339	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append( ".[');  sb.append('[').append('[');  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append( ".[');  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append( ".[');  sb.append('[').append('[');	  	non-compiled	[CE]  unclosed  string  literal	139	None	add
340	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('['].append('[');  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('['].append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('['].append('[');	  	non-compiled	[CE]  ')'  expected	139	None	add
341	[BUG]  [BUGGY]  sb.append('N').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N').append(block.charAt(i));	  sb.append('N');    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
342	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N').append(block.toString());	  sb.append('N');    	compilable	  [FE]  ComparisonFailure  	79	1	replace
343	[BUG]  [BUGGY]  sb.append('N').append(block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N').append(block.toString());	  sb.append('N');    	compilable	  [FE]  ComparisonFailure  	79	1	replace
344	[BUG]  [BUGGY]  sb.append('N').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N').append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N').append(block.toCharArray());	  sb.append('N');    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
345	[BUG]  [BUGGY]  sb.append('N',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N',  block.charAt(i));	  sb.append('N');    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
346	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    sb.append('?');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
347	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('?');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
348	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
349	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
350	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
351	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
352	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
353	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  System.arraycopy(chars,  0,  chars,  0,  chars.length);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
354	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
355	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
356	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
357	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
358	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
359	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
360	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
361	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  return  sb.toString();  }  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
362	[BUG]  [BUGGY]  sb.append(chars[i],  0,  block.length);  [CE]  cannot  find  symbol  length  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i],  0,  block.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i],  0,  block.length);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
363	[BUG]  [BUGGY]  sb.append(block,  i,  0,  len);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int,int)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  i,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  i,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int,int)	9	None	replace
364	[BUG]  [BUGGY]  sb.append(block,  chars[i],  0,  len);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char,int,int)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars[i],  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars[i],  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char,int,int)	9	None	replace
365	[BUG]  [BUGGY]  sb.append(block,  s,  0,  len);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,String,int,int)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,String,int,int)	9	None	replace
366	[BUG]  [BUGGY]  sb.append(block,  0,  len,  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int,char)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  0,  len,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  0,  len,  c);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int,char)	9	None	replace
367	[BUG]  [BUGGY]  sb.append(c,  block,  0,  len);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int,int)  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int,int)	9	None	replace
368	[BUG]  [BUGGY]  sb.append(block,  0,  len);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)	9	None	replace
369	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.toCharArray());	  sb.append('[');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
370	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.charAt(i).toString());	  sb.append('[');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
371	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.charAt(i),  c);	  sb.append('[');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
372	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');  sb.append(block.toString());	  sb.append('[');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	197	1	replace
373	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.toString());	  sb.append('[');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	197	1	replace
374	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(',');	  sb.append('n');    sb.append('n');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	66	1	replace
375	[BUG]  [BUGGY]  sb.append(',');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(',');	  sb.append('n');    sb.append('n');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	66	1	replace
376	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
377	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
378	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
379	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
380	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	223	None	add
381	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	223	None	add
382	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
383	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
384	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	223	None	add
385	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	223	None	add
386	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    sb.append('#');	  	compilable	  [FE]  ComparisonFailure  	80	1	add
387	[BUG]  [BUGGY]  sb.append('#');  sb.append('#');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    sb.append('#');	  	compilable	  [FE]  ComparisonFailure  	80	1	add
388	[BUG]  [BUGGY]  sb.append('#');  String  sb  =(String)block.clone();  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =(String)block.clone();  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =(String)block.clone();  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
389	[BUG]  [BUGGY]  sb.append('#');  String  sb  =(String)block.getValue();  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =(String)block.getValue();  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =(String)block.getValue();  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
390	[BUG]  [BUGGY]  sb.append('#');  StringBuilder  sb  =  new  StringBuilder(s.length()  +  1);  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  StringBuilder  sb  =  new  StringBuilder(s.length()  +  1);  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    StringBuilder  sb  =  new  StringBuilder(s.length()  +  1);  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
391	[BUG]  [BUGGY]  sb.append('#');  StringBuilder  sb.append('#');  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  StringBuilder  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    StringBuilder  sb.append('#');	  	non-compiled	[CE]  ';'  expected	80	None	add
392	[BUG]  [BUGGY]  sb.append('#');  sb.append('#').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  sb.append('#').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    sb.append('#').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
393	[BUG]  [BUGGY]  sb.append('#');  String  sb  =(String)block.getValue();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =(String)block.getValue();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =(String)block.getValue();  sb.append(c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
394	[BUG]  [BUGGY]  sb.append('#');  StringBuffer  sb.append('#');  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  StringBuffer  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    StringBuffer  sb.append('#');	  	non-compiled	[CE]  ';'  expected	80	None	add
395	[BUG]  [BUGGY]  sb.append(block,  c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	124	None	replace
396	[BUG]  [BUGGY]  sb.append(c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	124	None	replace
397	[BUG]  [BUGGY]  sb.append(chars[i].toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	124	None	replace
398	[BUG]  [BUGGY]  sb.append(c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
399	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS "  +  chars.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
400	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").append(block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
401	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
402	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS "  +  chars.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS "  +  chars.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS "  +  chars.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
403	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ").charAt(i).toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ").charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS ").charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  	206	None	replace
404	[BUG]  [BUGGY]  sb.append(':');  sb.append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
405	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append( ".s.IFJDCS ").toString();	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	compilable	  [FE]  ComparisonFailure  	206	1	replace
406	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").toString();  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").toString();	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	compilable	  [FE]  ComparisonFailure  	206	1	replace
407	[BUG]  [BUGGY]  sb.append('n');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append(block.charAt(i));	  sb.append('n');    sb.append('N');    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
408	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');  sb.append(c);	  sb.append('n');    sb.append('N');    	compilable	  [FE]  ComparisonFailure  	74	1	replace
409	[BUG]  [BUGGY]  sb.append('n');  sb.append(c);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append(c);	  sb.append('n');    sb.append('N');    	compilable	  [FE]  ComparisonFailure  	74	1	replace
410	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	219	1	add
411	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	219	1	add
412	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	219	1	add
413	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	219	1	add
414	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	219	None	add
415	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	219	None	add
416	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    sb.append('?');  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
417	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('?');  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
418	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
419	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
420	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
421	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  continue;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
422	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
423	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
424	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
425	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
426	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('? "');  sb.append('?');  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('? "');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('? "');  sb.append('?');	  	non-compiled	[CE]  unclosed  character  literal	47	None	add
427	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  String  sb.append('?');  sb.append('?');  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  String  sb.append('?');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    String  sb.append('?');  sb.append('?');	  	non-compiled	[CE]  ';'  expected	47	None	add
428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
429	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  return  sb.toString();  }  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append('?');  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	47	1	add
430	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');  sb.append(chars[i]);	  sb.append('n');    sb.append('r');    	compilable	  [FE]  ComparisonFailure  	72	1	replace
431	[BUG]  [BUGGY]  sb.append('n');  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append(chars[i]);	  sb.append('n');    sb.append('r');    	compilable	  [FE]  ComparisonFailure  	72	1	replace
432	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
433	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
434	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
435	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/'  +  s);  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/'  +  s);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/'  +  s);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	228	None	replace
436	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
437	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
438	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
439	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
440	[BUG]  [BUGGY]  sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
441	[BUG]  [BUGGY]  sb.append(block.substring(i  +  1,  block.length()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
442	[BUG]  [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
443	[BUG]  [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
444	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()),  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  block.length()),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(i  +  1,  block.length()),  c);	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	154	None	replace
445	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append(   "]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   "]   ");    sb.append(   "]   ");	  	compilable	  [FE]  ComparisonFailure  	103	1	add
446	[BUG]  [BUGGY]  sb.append(   "]   ");  sb.append(   "]   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append(   "]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   "]   ");    sb.append(   "]   ");	  	compilable	  [FE]  ComparisonFailure  	103	1	add
447	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   "]   ");    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	103	1	add
448	[BUG]  [BUGGY]  sb.append(   "]   ");  sb.append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   "]   ");    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	103	1	add
449	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   "]   ");    sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	103	1	add
450	[BUG]  [BUGGY]  sb.append(   "]   ");  sb.append( ".] ");  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   "]   ");    sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	103	1	add
451	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]    [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append( ",]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   "]   ");    sb.append( ",]   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]    	103	1	add
452	[BUG]  [BUGGY]  sb.append(   "]   ");  sb.append( ",]   ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]    [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   "]   ");  sb.append( ",]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   "]   ");    sb.append( ",]   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]    	103	1	add
453	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.toCharArray());	  sb.append('?');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
454	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.charAt(i).toString());	  sb.append('?');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append(block.toString());	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
456	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.toString());	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
457	[BUG]  [BUGGY]  sb.append('/',  c,  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  c,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  c,  block);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	107	None	replace
458	[BUG]  [BUGGY]  sb.append('/',  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  c);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	107	None	replace
459	[BUG]  [BUGGY]  sb.append('/',  block,  c);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block,  c);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)	107	None	replace
460	[BUG]  [BUGGY]  sb.append('/',  chars[i]);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  chars[i]);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	107	None	replace
461	[BUG]  [BUGGY]  sb.append('/',  chars[i],  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  chars[i],  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  chars[i],  block);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	107	None	replace
462	[BUG]  [BUGGY]  sb.append('/',  block,  i);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block,  i);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)	107	None	replace
463	[BUG]  [BUGGY]  sb.append('/',  i,  block);  [CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  i,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  i,  block);	  sb.append('/',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)	107	None	replace
464	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	78	1	add
465	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	78	1	add
466	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.clone();  sb.append('N');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.clone();  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.clone();  sb.append('N');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
467	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.getValue();  sb.append('N');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.getValue();  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.getValue();  sb.append('N');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
468	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.toCharArray();  sb.append('N');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.toCharArray();  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.toCharArray();  sb.append('N');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
469	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.get(i);  sb.append('N');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.get(i);  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.get(i);  sb.append('N');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
470	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.getValue();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.getValue();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.getValue();  sb.append(c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
471	[BUG]  [BUGGY]  sb.append('N');  StringBuilder  sb.append('N');  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  StringBuilder  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    StringBuilder  sb.append('N');	  	non-compiled	[CE]  ';'  expected	78	None	add
472	[BUG]  [BUGGY]  sb.append('N');  String  sb  =(String)block.clone();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =(String)block.clone();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =(String)block.clone();  sb.append(c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
473	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append('n');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
474	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
475	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  String  sb.append('n');  sb.append('N');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  String  sb.append('n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    String  sb.append('n');  sb.append('N');	  	non-compiled	[CE]  ';'  expected	73	None	add
476	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('N');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append('N');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
477	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('N');  sb.append('N');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('N');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('N');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
478	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('m');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append('m');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
479	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('m');  sb.append('N');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('m');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('m');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
480	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n');  sb.append('N');  continue;	  	non-compiled	[CE]  unreachable  statement	73	None	add
481	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('r');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append('r');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
482	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('r');  sb.append('N');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('r');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('r');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
483	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n';  sb.append('N');  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n';  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n';  sb.append('N');	  	non-compiled	[CE]  ')'  expected	73	None	add
484	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('f');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append('f');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
485	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('f');  sb.append('N');  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('f');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('f');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
486	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
487	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
488	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':').  sb.append(':');  sb.append(':');  [CE]  cannot  find  symbol  sb  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':').  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':').  sb.append(':');  sb.append(':');	  	non-compiled	[CE]  cannot  find  symbol  sb	20	None	add
489	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  String  sb.append(':');  sb.append(':');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  String  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    String  sb.append(':');  sb.append(':');	  	non-compiled	[CE]  ';'  expected	20	None	add
490	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ":');  sb.append(':');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ":');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append( ":');  sb.append(':');	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
491	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');  continue;	  	non-compiled	[CE]  unreachable  statement	20	None	add
492	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    sb.append(c);  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
493	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(c);  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
494	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':';  sb.append(':');  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':';  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':';  sb.append(':');	  	non-compiled	[CE]  ')'  expected	20	None	add
495	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  return  sb.toString();  [CE]  unreachable  statement  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');  return  sb.toString();	  	non-compiled	[CE]  unreachable  statement	20	None	add
496	[BUG]  [BUGGY]  sb.append('?').append(block,  c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  c.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	43	None	replace
497	[BUG]  [BUGGY]  sb.append('?').append(c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	43	None	replace
498	[BUG]  [BUGGY]  sb.append('?').append(c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c,  block.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
499	[BUG]  [BUGGY]  sb.append('?').append(chars[block.toCharArray());  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(chars[block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(chars[block.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  ']'  expected	43	None	replace
500	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('/');	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
501	[BUG]  [BUGGY]  sb.append('/');  final  String  sb  =(String)block.getValue();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  final  String  sb  =(String)block.getValue();  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  final  String  sb  =(String)block.getValue();  sb.append('/');	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
502	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
503	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  block.getValue();  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
504	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
505	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ":n ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ":n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =(String)block.clone();  sb.append( ":n ");	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":n   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	161	None	replace
506	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append( ":n ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append( ":n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append( ":n ");	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":n   ");    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	161	None	replace
507	[BUG]  [BUGGY]  sb.append('/').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  chars.charAt(i));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
508	[BUG]  [BUGGY]  sb.append('/').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  c.charAt(i));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	106	None	replace
509	[BUG]  [BUGGY]  sb.append('/').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  chars[i]);	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	106	None	replace
510	[BUG]  [BUGGY]  sb.append('/').append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.charAt(i  +  1));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
511	[BUG]  [BUGGY]  sb.append('/').append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(c,  block.charAt(i));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
512	[BUG]  [BUGGY]  sb.append('/').append(block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.charAt(i,  len));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
513	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i),  c);	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
514	[BUG]  [BUGGY]  sb.append('/',  block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block,  chars.charAt(i));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
515	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i  +  1));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
516	[BUG]  [BUGGY]  sb.append('/',  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  chars.charAt(i));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
517	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i),  len);	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
518	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
519	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
520	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
521	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
522	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
523	[BUG]  [BUGGY]  sb.append(block.charAt(i),  block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  block.charAt(i).toCharArray());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
524	[BUG]  [BUGGY]  sb.append('[').append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c,  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
525	[BUG]  [BUGGY]  sb.append('[').append(chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(chars[i].charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	88	None	replace
526	[BUG]  [BUGGY]  sb.append('[').append(c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	88	None	replace
527	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(chars[i]);	  sb.append('[');    sb.append('[').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	88	1	replace
528	[BUG]  [BUGGY]  sb.append('[').append(chars[i]);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(chars[i]);	  sb.append('[');    sb.append('[').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	88	1	replace
529	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append('[').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append('[').append(block,  c.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	88	None	replace
530	[BUG]  [BUGGY]  sb.append(block,  Character.UnicodeBlock.SOURCENAME);  [CE]  cannot  find  symbol  SOURCENAME  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Character.UnicodeBlock.SOURCENAME);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Character.UnicodeBlock.SOURCENAME);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SOURCENAME);    	non-compiled	[CE]  cannot  find  symbol  SOURCENAME	215	None	replace
531	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i),  c);	  sb.append('[').append(c);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
532	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i),  block.charAt(i));	  sb.append('[').append(c);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
533	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('[');	  sb.append('[').append(c);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
534	[BUG]  [BUGGY]  sb.append(c).append('[');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('[');	  sb.append('[').append(c);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
535	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');  sb.append(chars[i]);	  sb.append('[');    sb.append('_');    	compilable	  [FE]  ComparisonFailure  	195	1	replace
536	[BUG]  [BUGGY]  sb.append('[');  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(chars[i]);	  sb.append('[');    sb.append('_');    	compilable	  [FE]  ComparisonFailure  	195	1	replace
537	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( "]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( "]   ");	  	compilable	  [FE]  ComparisonFailure  	37	1	add
538	[BUG]  [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( "]   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( "]   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( "]   ");	  	compilable	  [FE]  ComparisonFailure  	37	1	add
539	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	37	1	add
540	[BUG]  [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ".] ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	37	1	add
541	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]]  ]  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ",] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( ",] ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]]  ]  	37	1	add
542	[BUG]  [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ",] ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]]  ]  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(   "]   ");  sb.append(']');  sb.append( ",] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(   "]   ");    sb.append(']');  sb.append( ",] ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[]]  ]  	37	1	add
543	[BUG]  [BUGGY]  sb.append(']',  c,  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  c,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  c,  block);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	125	None	replace
544	[BUG]  [BUGGY]  sb.append(']',  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  c);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	125	None	replace
545	[BUG]  [BUGGY]  sb.append(']',  block,  c);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  block,  c);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)	125	None	replace
546	[BUG]  [BUGGY]  sb.append(']',  chars[i],  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  chars[i],  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  chars[i],  block);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	125	None	replace
547	[BUG]  [BUGGY]  sb.append('[',  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[',  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[',  c);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	125	None	replace
548	[BUG]  [BUGGY]  sb.append(c,  ']',  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  ']',  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  ']',  block);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	125	None	replace
549	[BUG]  [BUGGY]  sb.append(']',  i,  block);  [CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  i,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  i,  block);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)	125	None	replace
550	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
551	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
552	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
553	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
554	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
555	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
556	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
557	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
558	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
559	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
560	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
561	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
562	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
563	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
564	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('+');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('+');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
565	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('+');  }  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('+');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('+');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
566	[BUG]  [BUGGY]  sb.append('[').append(block,  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  c);	  sb.append('[').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	145	None	replace
567	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "[] ");	  sb.append(   "]   ");    	compilable	  [FE]  ComparisonFailure  	104	1	replace
568	[BUG]  [BUGGY]  sb.append( "[] ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "[] ");	  sb.append(   "]   ");    	compilable	  [FE]  ComparisonFailure  	104	1	replace
569	[BUG]  [BUGGY]  sb.append('?').append(c.toString());  [CE]  char  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c.toString());	  sb.append('?').append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	46	None	replace
570	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block!=  null?  null  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
571	[BUG]  [BUGGY]  sb.append('?').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block!=  null?  null  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
572	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block.toString()  +  1);	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
573	[BUG]  [BUGGY]  sb.append('?').append(block.toString()  +  1);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString()  +  1);	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block  ==  null?  null  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
575	[BUG]  [BUGGY]  sb.append('?').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block  ==  null?  null  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
576	[BUG]  [BUGGY]  sb.append('?').append(block.getName());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.getName());	  sb.append('?').append(block.toString());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
577	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =(String)block.clone();  sb.append(':');	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	22	None	replace
578	[BUG]  [BUGGY]  final  String  sb  =(String)block.clone();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.clone();  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.clone();  sb.append(':');	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	22	None	replace
579	[BUG]  [BUGGY]  final  String  sb  =(String)block.clone();  final  char  sb.append(':');  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.clone();  final  char  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.clone();  final  char  sb.append(':');	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  ';'  expected	22	None	replace
580	[BUG]  [BUGGY]  sb.append(']').append(block,  c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  c.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	105	None	replace
581	[BUG]  [BUGGY]  sb.append(']').append(c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(c.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	105	None	replace
582	[BUG]  [BUGGY]  sb.append(']').append(c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(c,  block.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
583	[BUG]  [BUGGY]  sb.append(']').append(block!=  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block!=  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block!=  null?  null  :  block.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
584	[BUG]  [BUGGY]  sb.append(']').append(chars[block.toCharArray());  [CE]  ']'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(chars[block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(chars[block.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  ']'  expected	105	None	replace
585	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']').append(block.toString());	  sb.append(']').append(block.toCharArray());    	compilable	  [FE]  ComparisonFailure  	105	1	replace
586	[BUG]  [BUGGY]  sb.append(']').append(block.toString());  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block.toString());	  sb.append(']').append(block.toCharArray());    	compilable	  [FE]  ComparisonFailure  	105	1	replace
587	[BUG]  [BUGGY]  sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
588	[BUG]  [BUGGY]  sb.append('?').append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
589	[BUG]  [BUGGY]  sb.append('?');  sb.append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c,  Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
590	[BUG]  [BUGGY]  sb.append('?',  c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
591	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  c.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	173	None	replace
592	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	174	1	add
593	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	174	1	add
594	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	non-compiled	[CE]  unclosed  string  literal	174	None	add
595	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
596	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  	174	1	add
597	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  	174	1	add
598	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	174	1	add
599	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	174	1	add
600	[BUG]  [BUGGY]  final  StringBuilder  sb  =  new  StringBuilder();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  StringBuilder  sb  =  new  StringBuilder();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  StringBuilder  sb  =  new  StringBuilder();	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
601	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i]);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(chars[i]);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
602	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(100);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(100);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(100);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
603	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(c);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
604	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(128);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(128);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(128);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
605	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars.length);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(chars.length);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
606	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(64);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(64);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(64);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
607	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
608	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
609	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
610	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
611	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
612	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  string  literal	118	None	add
613	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
614	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
615	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(c);  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
616	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  character  literal	118	None	add
617	[BUG]  [BUGGY]  sb.append('n');  continue;  [CE]  unreachable  statement  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  continue;	  sb.append('n');    sb.append('n');    continue;    	non-compiled	[CE]  unreachable  statement	75	None	replace
618	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
619	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
620	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	63	1	add
621	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	63	1	add
622	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  String  sb.append('/');  sb.append('/').append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  String  sb.append('/');  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    String  sb.append('/');  sb.append('/').append(block.toString());	  	non-compiled	[CE]  ';'  expected	63	None	add
623	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "/');  sb.append('/').append(block.toString());  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "/');  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append( "/');  sb.append('/').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
624	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(lock.toString());  [CE]  cannot  find  symbol  lock  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(lock.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(lock.toString());	  	non-compiled	[CE]  cannot  find  symbol  lock	63	None	add
625	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "./');  sb.append('/').append(block.toString());  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "./');  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append( "./');  sb.append('/').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
626	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	63	1	add
627	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  return  sb.toString();  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  return  sb.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    if(!Character.isISOControl(c))  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  return  sb.toString();  }	  	compilable	  [FE]  ComparisonFailure  	63	1	add
628	[BUG]  [BUGGY]  sb.append('[');  sb.append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block,  chars.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
629	[BUG]  [BUGGY]  sb.append('[');  sb.append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block,  c.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	133	None	replace
630	[BUG]  [BUGGY]  sb.append('[');  sb.append(c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(c.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	133	None	replace
631	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.charAt(i  +  1));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
632	[BUG]  [BUGGY]  sb.append('[');  sb.append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(c,  block.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
633	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
634	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
635	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(0));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
636	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
637	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('[');	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
638	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
639	[BUG]  [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  final  String  sb  =(String)block.clone();  sb.append('[');	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
640	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
641	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  s  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  s  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  s	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  not  a  statement	86	None	replace
642	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
643	[BUG]  [BUGGY]  sb.append(']');  sb.append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');  sb.append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');  sb.append(block.toCharArray());	  sb.append(']');    sb.append('[');    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
644	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('-');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('-');	  sb.append('n');    if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    	compilable	  [FE]  ComparisonFailure  	189	1	replace
645	[BUG]  [BUGGY]  sb.append('-');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('-');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('-');	  sb.append('n');    if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    	compilable	  [FE]  ComparisonFailure  	189	1	replace
646	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('+');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('+');	  sb.append('n');    if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    	compilable	  [FE]  ComparisonFailure  	189	1	replace
647	[BUG]  [BUGGY]  sb.append('+');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('+');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('+');	  sb.append('n');    if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    	compilable	  [FE]  ComparisonFailure  	189	1	replace
648	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append(']');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
649	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(']');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
650	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
651	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append('[');  sb.append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
652	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  String  sb.append(']');  sb.append(']');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  String  sb.append(']');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    String  sb.append(']');  sb.append(']');	  	non-compiled	[CE]  ';'  expected	30	None	add
653	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "]');  sb.append(']');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "]');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append( "]');  sb.append(']');	  	non-compiled	[CE]  unclosed  string  literal	30	None	add
654	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append('].');  sb.append(']');  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append('].');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append('].');  sb.append(']');	  	non-compiled	[CE]  unclosed  character  literal	30	None	add
655	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
656	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(c);  sb.append(']');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
657	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']').  sb.append(']');  [CE]  cannot  find  symbol  sb  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']').  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(']').  sb.append(']');	  	non-compiled	[CE]  cannot  find  symbol  sb	30	None	add
658	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ", ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	171	1	replace
659	[BUG]  [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ", ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	171	1	replace
660	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
661	[BUG]  [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
662	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString()).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block.toString()).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
663	[BUG]  [BUGGY]  sb.append('?').append(block.toString()).append('?');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString()).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString()).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
664	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(';');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(';');	  sb.append('n');    StringBuilder    sb.append('n');    	compilable	  [FE]  ComparisonFailure  	67	1	replace
665	[BUG]  [BUGGY]  sb.append(';');  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(';');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(';');	  sb.append('n');    StringBuilder    sb.append('n');    	compilable	  [FE]  ComparisonFailure  	67	1	replace
666	[BUG]  [BUGGY]  String  sb  =  new  String(chars.substring(0,  len));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(chars.substring(0,  len));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(chars.substring(0,  len));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
667	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(0,  i));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(0,  i));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(0,  i));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
668	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(0,  len));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
669	[BUG]  [BUGGY]  String  sb  =  new  String(block.substring(0,  len));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.substring(0,  len));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.substring(0,  len));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
670	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(0,  len)+  1);  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(0,  len)+  1);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(0,  len)+  1);  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
671	[BUG]  [BUGGY]  String  sb  =  new  String(chars.substring(0,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(chars.substring(0,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(chars.substring(0,  len));	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
672	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('n');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
673	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n');  sb.append('r');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('n');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
674	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  String  sb.append('n');  sb.append('r');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  String  sb.append('n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    String  sb.append('n');  sb.append('r');	  	non-compiled	[CE]  ';'  expected	71	None	add
675	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('m');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('m');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
676	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('m');  sb.append('r');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('m');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('m');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
677	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('r');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
678	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('r');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('r');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
679	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('N');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('N');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
680	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('N');  sb.append('r');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('N');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('N');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
681	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n';  sb.append('r');  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n';  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('n';  sb.append('r');	  	non-compiled	[CE]  ')'  expected	71	None	add
682	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n');  sb.append('r');  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('n');  sb.append('r');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('n');  sb.append('r');  continue;	  	non-compiled	[CE]  unreachable  statement	71	None	add
683	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('t');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('t');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
684	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('t');  sb.append('r');  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('t');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('t');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
685	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
686	[BUG]  [BUGGY]  sb.append(c).append('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
687	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
688	[BUG]  [BUGGY]  sb.append(chars[i]).append('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
689	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n').append(c);	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
690	[BUG]  [BUGGY]  sb.append('n').append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n').append(c);	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
691	[BUG]  [BUGGY]  sb.append(block.charAt(i)).append('n');  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i)).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i)).append('n');	  sb.append(block);    sb.append(block).append('n');    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
692	[BUG]  [BUGGY]  sb.append(block,  c).append('n');  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c).append('n');	  sb.append(block);    sb.append(block).append('n');    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	8	None	replace
693	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
694	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
695	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
696	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
697	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	231	None	add
698	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	231	None	add
699	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	231	None	add
700	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
701	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
702	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
703	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
704	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i).toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	111	None	replace
705	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c.toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c.toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
706	[BUG]  [BUGGY]  sb.append(c.charAt(i).toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.charAt(i).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	111	None	replace
707	[BUG]  [BUGGY]  sb.append(block.charAt(i),  block.toCharArray());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  block.toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
708	[BUG]  [BUGGY]  sb.append(s.charAt(i).toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(s.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(s.charAt(i).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	111	None	replace
709	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c).toCharArray());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  ';'  expected	111	None	replace
710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'  +  c  +  1);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
711	[BUG]  [BUGGY]  sb.append(':'  +  c  +  1);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'  +  c  +  1);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
712	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'  +  chars[i]);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
713	[BUG]  [BUGGY]  sb.append(':'  +  chars[i]);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'  +  chars[i]);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
714	[BUG]  [BUGGY]  sb.append(':'  +  block);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'  +  block);	  sb.append(':'    +    c);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	19	None	replace
715	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'  +  i);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
716	[BUG]  [BUGGY]  sb.append(':'  +  i);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'  +  i);	  sb.append(':'    +    c);    	compilable	  [FE]  ComparisonFailure  	19	1	replace
717	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
718	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
719	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
720	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
721	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	add
722	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  unclosed  string  literal	122	None	add
723	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  unclosed  character  literal	122	None	add
724	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	122	None	add
725	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('? "');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  unclosed  character  literal	122	None	add
726	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append(c);	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
727	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append(c);	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
728	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
729	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append(s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append(s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =(String)block.getValue();  sb.append(s);	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
730	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append(c,  s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append(c,  s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append(c,  s);	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
731	[BUG]  [BUGGY]  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.toCharArray());  sb.append(':');	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
732	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =  new  String(block.toCharArray());  sb.append(':');	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
733	[BUG]  [BUGGY]  String  sb  =  new  String(block.toCharArray());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.toCharArray());	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
734	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =  new  String(block.toCharArray());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =  new  String(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =  new  String(block.toCharArray());	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
735	[BUG]  [BUGGY]  String  sb  =  new  String(block.toString());  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.toString());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.toString());  sb.append(':');	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
736	[BUG]  [BUGGY]  final  char  sb  =  new  String(block.toCharArray());  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  char  sb  =  new  String(block.toCharArray());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  char  sb  =  new  String(block.toCharArray());  sb.append(':');	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
737	[BUG]  [BUGGY]  sb.append(':',  c.charAt(i),  block);  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  c.charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  c.charAt(i),  block);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  char  cannot  be  dereferenced	210	None	replace
738	[BUG]  [BUGGY]  sb.append(':',  chars[i]);  sb.append( ".s.IFJDCS   ".charAt(i),  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  chars[i]);  sb.append( ".s.IFJDCS   ".charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  chars[i]);  sb.append( ".s.IFJDCS   ".charAt(i),  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	210	None	replace
739	[BUG]  [BUGGY]  sb.append(':');  sb.append(c, ".s.IFJDCS ".charAt(i),  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c, ".s.IFJDCS ".charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c, ".s.IFJDCS ".charAt(i),  block);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	210	None	replace
740	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  block,  c);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  block,  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)	210	None	replace
741	[BUG]  [BUGGY]  sb.append(':',  len);  sb.append( ".s.IFJDCS ".charAt(i),  c);  [CE]  no  suitable  method  found  for  append(char,int)  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  len);  sb.append( ".s.IFJDCS ".charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  len);  sb.append( ".s.IFJDCS ".charAt(i),  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	210	None	replace
742	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i)).append(':');  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
743	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".s.IFJDCS ".charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  StringIndexOutOfBoundsException  	205	1	replace
744	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".s.IFJDCS ".charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  StringIndexOutOfBoundsException  	205	1	replace
745	[BUG]  [BUGGY]  sb.append(':');  sb.append(block.charAt(i)).append(':');  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block.charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block.charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
746	[BUG]  [BUGGY]  sb.append(':');  sb.append(c,  block.charAt(i)).append(':');  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c,  block.charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c,  block.charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
747	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(chars[i]).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
748	[BUG]  [BUGGY]  sb.append(':');  sb.append(chars[i]).append(':');  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(chars[i]).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
749	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append( ".s.IFJDCS ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
750	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(':');  [FE]  ComparisonFailure  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
751	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(chars[i]);	  sb.append('/');    sb.append('/').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	61	1	replace
752	[BUG]  [BUGGY]  sb.append('/').append(chars[i]);  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(chars[i]);	  sb.append('/');    sb.append('/').append(block.charAt(i));    	compilable	  [FE]  ComparisonFailure  	61	1	replace
753	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append('[');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    sb.append('[');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
754	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  sb.append('[');  sb.append(',');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append('[');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    sb.append('[');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
755	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
756	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
757	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
758	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
759	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]          org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
760	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]          org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
761	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
762	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
763	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]              org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
764	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]              org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
765	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	198	1	add
766	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(s.length()  ==  0)  {  sb.append('[');  sb.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	198	1	add
767	[BUG]  [BUGGY]  sb.append('?',  c,  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  c,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  c,  block);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	44	None	replace
768	[BUG]  [BUGGY]  sb.append('?',  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  c);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	44	None	replace
769	[BUG]  [BUGGY]  sb.append('?',  block,  c);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block,  c);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,char)	44	None	replace
770	[BUG]  [BUGGY]  sb.append('?',  chars[i]);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  chars[i]);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	44	None	replace
771	[BUG]  [BUGGY]  sb.append('?',  i,  block);  [CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  i,  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  i,  block);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int,UnicodeBlock)	44	None	replace
772	[BUG]  [BUGGY]  sb.append('?',  block,  i);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block,  i);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)	44	None	replace
773	[BUG]  [BUGGY]  sb.append('?',  chars[i],  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  chars[i],  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  chars[i],  block);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	44	None	replace
774	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block).append('?');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
775	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block).append('?');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
776	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('?');    if(block!=  null)  {  sb.append(block);  sb.append(block).append('?');  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
777	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(block!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    if(block!=  null)  {  sb.append(block);  sb.append(block).append('?');  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
778	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  String  sb.append(block);  sb.append(block).append('?');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  String  sb.append(block);  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    String  sb.append(block);  sb.append(block).append('?');	  	non-compiled	[CE]  ';'  expected	3	None	add
779	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('!');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block).append('!');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
780	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('!');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('!');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block).append('!');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
781	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('? "');  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block).append('? "');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block).append('? "');	  	non-compiled	[CE]  unclosed  character  literal	3	None	add
782	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block.toString());    sb.append('?').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	45	1	add
783	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('?').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	45	1	add
784	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  StringBuilder  sb.append('?').append(block.toString());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  StringBuilder  sb.append('?').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    StringBuilder  sb.append('?').append(block.toString());	  	non-compiled	[CE]  ';'  expected	45	None	add
785	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  String  sb.append('?').append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  String  sb.append('?').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    String  sb.append('?').append(block.toString());	  	non-compiled	[CE]  ';'  expected	45	None	add
786	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('? "').append(block.toString());  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('? "').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('? "').append(block.toString());	  	non-compiled	[CE]  unclosed  character  literal	45	None	add
787	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('??').append(block.toString());  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('??').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('??').append(block.toString());	  	non-compiled	[CE]  unclosed  character  literal	45	None	add
788	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(lock.toString());  [CE]  cannot  find  symbol  lock  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(lock.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('?').append(lock.toString());	  	non-compiled	[CE]  cannot  find  symbol  lock	45	None	add
789	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block.toString());    sb.append('[').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	100	1	add
790	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append('[').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	100	1	add
791	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  StringBuilder  sb.append('[').append(block.toString());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  StringBuilder  sb.append('[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    StringBuilder  sb.append('[').append(block.toString());	  	non-compiled	[CE]  ';'  expected	100	None	add
792	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  String  sb.append('[').append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  String  sb.append('[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    String  sb.append('[').append(block.toString());	  	non-compiled	[CE]  ';'  expected	100	None	add
793	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(lock.toString());  [CE]  cannot  find  symbol  lock  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(lock.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append('[').append(lock.toString());	  	non-compiled	[CE]  cannot  find  symbol  lock	100	None	add
794	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString());  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString());  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append('[').append(block.toString());  continue;	  	non-compiled	[CE]  unreachable  statement	100	None	add
795	[BUG]  [BUGGY]  sb.append('?').append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c,  block.charAt(i));	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
796	[BUG]  [BUGGY]  sb.append('?').append(c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c.charAt(i));	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	42	None	replace
797	[BUG]  [BUGGY]  sb.append('?').append(chars[block.charAt(i)]);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(chars[block.charAt(i)]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(chars[block.charAt(i)]);	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
798	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
799	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
800	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
801	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
802	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
803	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
804	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	add
805	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
806	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
807	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
808	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
809	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
810	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
811	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(')');    sb.append(']');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
812	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']');  sb.append(')');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append(']');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
813	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append('[');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(')');    sb.append('[');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
814	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append('[');  sb.append(')');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append('[');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append('[');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
815	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  String  sb.append(']');  sb.append(')');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  String  sb.append(']');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    String  sb.append(']');  sb.append(')');	  	non-compiled	[CE]  ';'  expected	39	None	add
816	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append('].');  sb.append(')');  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append('].');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append('].');  sb.append(')');	  	non-compiled	[CE]  unclosed  character  literal	39	None	add
817	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']');  sb.append(')';  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']');  sb.append(')';  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append(']');  sb.append(')';	  	non-compiled	[CE]  ')'  expected	39	None	add
818	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']').  sb.append(')');  [CE]  cannot  find  symbol  sb  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(']').  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append(']').  sb.append(')');	  	non-compiled	[CE]  cannot  find  symbol  sb	39	None	add
819	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append( "]');  sb.append(')');  [CE]  unclosed  string  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append( "]');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append( "]');  sb.append(')');	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
820	[BUG]  [BUGGY]  sb.append('[').append(chars[i].charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(chars[i].charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(chars[i].charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	89	None	replace
821	[BUG]  [BUGGY]  sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
822	[BUG]  [BUGGY]  sb.append('[').append(c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	89	None	replace
823	[BUG]  [BUGGY]  sb.append('[').append(block,  c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  c.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	89	None	replace
824	[BUG]  [BUGGY]  sb.append('[').append(chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(chars[i],  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
825	[BUG]  [BUGGY]  sb.append('[').append(c,  block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c,  block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c,  block.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
826	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(   ":   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   ":   ");    sb.append(   ":   ");	  	compilable	  [FE]  ComparisonFailure  	14	1	add
827	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append(   ":   ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(   ":   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append(   ":   ");	  	compilable	  [FE]  ComparisonFailure  	14	1	add
828	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append( ".:   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   ":   ");    sb.append( ".:   ");	  	compilable	  [FE]  ComparisonFailure  	14	1	add
829	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append( ".:   ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append( ".:   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append( ".:   ");	  	compilable	  [FE]  ComparisonFailure  	14	1	add
830	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   ":   ");    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	14	1	add
831	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append(':');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	14	1	add
832	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[:    [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append( ",:   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(   ":   ");    sb.append( ",:   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[:    	14	1	add
833	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append( ",:   ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[:    [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append( ",:   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append( ",:   ");	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[:    	14	1	add
834	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append(   ": ".);  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(   ": ".);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append(   ": ".);	  	non-compiled	[CE]  <identifier>  expected	14	None	add
835	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
836	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
837	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append( ":');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [CE]  unclosed  string  literal  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append( ":');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append( ":');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	non-compiled	[CE]  unclosed  string  literal	207	None	add
838	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ArrayStoreException  	207	1	add
839	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ArrayStoreException  	207	1	add
840	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append( ": ");  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append( ": ");  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
841	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append( ": ");  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append( ": ");  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append( ": ");  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
842	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
843	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
844	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  system.arraycopy(chars,  0,  sb,  0,  len);  [CE]  cannot  find  symbol  system  [FE]              ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append(':');  system.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append(':');  system.arraycopy(chars,  0,  sb,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  system	207	None	add
845	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append( ":');  System.arraycopy(chars,  0,  sb,  0,  len);  [CE]  unclosed  string  literal  [FE]                ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  sb.append( ":');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(':');  sb.append( ":');  System.arraycopy(chars,  0,  sb,  0,  len);	  	non-compiled	[CE]  unclosed  string  literal	207	None	add
846	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	148	None	replace
847	[BUG]  [BUGGY]  sb.append(block.charAt(i),  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
848	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	148	None	replace
849	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	148	None	replace
850	[BUG]  [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.charAt(i),  block.charAt(0).toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.charAt(i),  block.charAt(0).toString());  sb.append('/');	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	148	None	replace
851	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    sb.append(block);  sb.append(block);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
852	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    sb.append(block);  sb.append(block);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
853	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
854	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
855	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
856	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
857	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(block!=  null)  {  sb.append(block);  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
858	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(block!=  null)  {  sb.append(block);  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
859	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(block!=  null)  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
860	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(block!=  null)  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(block!=  null)  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
861	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
862	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
863	[BUG]  [BUGGY]  sb.append(chars.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars.charAt(i,  len));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
864	[BUG]  [BUGGY]  sb.append(block.charAt(i,  c));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i,  c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i,  c));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
865	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i,  len));  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i,  len));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  char  cannot  be  dereferenced	92	None	replace
866	[BUG]  [BUGGY]  sb.append(block.charAt(i,  len  +  1));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i,  len  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i,  len  +  1));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
867	[BUG]  [BUGGY]  sb.append(chars[i],  block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i],  block.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i],  block.charAt(i,  len));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
868	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i,  len));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
869	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
870	[BUG]  [BUGGY]  sb.append('?',  block.toString());  [CE]  no  suitable  method  found  for  append(char,String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block.toString());	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  no  suitable  method  found  for  append(char,String)	117	None	replace
871	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(c).append('?');	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
872	[BUG]  [BUGGY]  sb.append('?').append(c).append('?');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c).append('?');	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
873	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i++));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
874	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i++));  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  char  cannot  be  dereferenced	112	None	replace
875	[BUG]  [BUGGY]  sb.append(c.charAt(i++));  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  char  cannot  be  dereferenced	112	None	replace
876	[BUG]  [BUGGY]  sb.append(block.charAt(i++),  c);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i++),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i++),  c);	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
877	[BUG]  [BUGGY]  sb.append(c,  block.charAt(i++));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
878	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]).append('[');	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
879	[BUG]  [BUGGY]  sb.append(chars[i]).append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]).append('[');	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
880	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
881	[BUG]  [BUGGY]  sb.append(c).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
882	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
883	[BUG]  [BUGGY]  sb.append(chars[i]).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
884	[BUG]  [BUGGY]  sb.append(block.charAt(i)).append('?');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i)).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i)).append('?');	  sb.append(block);    sb.append(block).append('?');    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
885	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    sb.append('/'  +  c);	  	compilable	  [FE]  ComparisonFailure  	108	1	add
886	[BUG]  [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    sb.append('/'  +  c);	  	compilable	  [FE]  ComparisonFailure  	108	1	add
887	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb.append('/'  +  c);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb.append('/'  +  c);	  	non-compiled	[CE]  ';'  expected	108	None	add
888	[BUG]  [BUGGY]  sb.append('/'  +  c);  StringBuilder  sb.append('/'  +  c);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  StringBuilder  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    StringBuilder  sb.append('/'  +  c);	  	non-compiled	[CE]  ';'  expected	108	None	add
889	[BUG]  [BUGGY]  sb.append('/'  +  c);  StringBuffer  sb.append('/'  +  c);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  StringBuffer  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    StringBuffer  sb.append('/'  +  c);	  	non-compiled	[CE]  ';'  expected	108	None	add
890	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =(String)block.clone();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
891	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =(String)block.getValue();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =(String)block.getValue();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =(String)block.getValue();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
892	[BUG]  [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    sb.append('/'  +  c);  continue;	  	non-compiled	[CE]  unreachable  statement	108	None	add
893	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	108	1	add
894	[BUG]  [BUGGY]  sb.append('/'  +  c);  sb.append(':'  +  c);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    sb.append(':'  +  c);	  	compilable	  [FE]  ComparisonFailure  	108	1	add
895	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    sb.append('?').append(block);	  	compilable	  [FE]  ComparisonFailure  	141	1	add
896	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('?').append(block);	  	compilable	  [FE]  ComparisonFailure  	141	1	add
897	[BUG]  [BUGGY]  sb.append('?').append(block);  String  sb.append('?').append(block);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  String  sb.append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    String  sb.append('?').append(block);	  	non-compiled	[CE]  ';'  expected	141	None	add
898	[BUG]  [BUGGY]  sb.append('?').append(block);  StringBuilder  sb.append('?').append(block);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  StringBuilder  sb.append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    StringBuilder  sb.append('?').append(block);	  	non-compiled	[CE]  ';'  expected	141	None	add
899	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('? "').append(block);  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('? "').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('? "').append(block);	  	non-compiled	[CE]  unclosed  character  literal	141	None	add
900	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('??').append(block);  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('??').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('??').append(block);	  	non-compiled	[CE]  unclosed  character  literal	141	None	add
901	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block;  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('?').append(block;	  	non-compiled	[CE]  ')'  expected	141	None	add
902	[BUG]  [BUGGY]  sb.append( ": ").append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ").append(block.charAt(i));	  sb.append(   ":   ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
903	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ":n ");	  sb.append(   ":   ");    	compilable	  [FE]  ComparisonFailure  	15	1	replace
904	[BUG]  [BUGGY]  sb.append( ":n ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ":n ");	  sb.append(   ":   ");    	compilable	  [FE]  ComparisonFailure  	15	1	replace
905	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ": ").append(c);	  sb.append(   ":   ");    	compilable	  [FE]  ComparisonFailure  	15	1	replace
906	[BUG]  [BUGGY]  sb.append( ": ").append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ").append(c);	  sb.append(   ":   ");    	compilable	  [FE]  ComparisonFailure  	15	1	replace
907	[BUG]  [BUGGY]  sb.append('/').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.charAt(i),  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
908	[BUG]  [BUGGY]  sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
909	[BUG]  [BUGGY]  sb.append('/').append(chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(chars[i],  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
910	[BUG]  [BUGGY]  sb.append('/').append(block,  c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  c.charAt(i),  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	60	None	replace
911	[BUG]  [BUGGY]  sb.append('/').append(c.charAt(i),  block.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(c.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(c.charAt(i),  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	60	None	replace
912	[BUG]  [BUGGY]  sb.append('/').append(chars[i]).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(chars[i]).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(chars[i]).append(block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
913	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);    sb.append(chars[i]);	  	compilable	  [FE]  ComparisonFailure  	82	1	add
914	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(chars[i]);	  	compilable	  [FE]  ComparisonFailure  	82	1	add
915	[BUG]  [BUGGY]  sb.append(chars[i]);  final  char[]  chars  =  block.toCharArray();  sb.append(chars[i]);  [CE]  variable  chars  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  final  char[]  chars  =  block.toCharArray();  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    final  char[]  chars  =  block.toCharArray();  sb.append(chars[i]);	  	non-compiled	[CE]  variable  chars  is  already  defined  in  method  sanitize(String)	82	None	add
916	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	82	1	add
917	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	82	1	add
918	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.SPECIALS,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.SPECIALS,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.SPECIALS,  chars[i]);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	82	None	add
919	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);    sb.append(chars[i]).append('?');	  	compilable	  [FE]  ComparisonFailure  	82	1	add
920	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]).append('?');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(chars[i]).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(chars[i]).append('?');	  	compilable	  [FE]  ComparisonFailure  	82	1	add
921	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(chars[i]));	  	compilable	  [FE]  ComparisonFailure  	82	1	add
922	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]));  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(chars[i]));	  	compilable	  [FE]  ComparisonFailure  	82	1	add
923	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(c));	  	compilable	  [FE]  ComparisonFailure  	82	1	add
924	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(c));  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(c));	  	compilable	  [FE]  ComparisonFailure  	82	1	add
925	[BUG]  [BUGGY]  sb.append(chars[i]);  String  sb.append(chars[i]);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  String  sb.append(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    String  sb.append(chars[i]);	  	non-compiled	[CE]  ';'  expected	82	None	add
926	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);    sb.append('[').append(block);	  	compilable	  [FE]  ComparisonFailure  	144	1	add
927	[BUG]  [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    sb.append('[').append(block);	  	compilable	  [FE]  ComparisonFailure  	144	1	add
928	[BUG]  [BUGGY]  sb.append('[').append(block);  String  sb.append('[').append(block);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  String  sb.append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    String  sb.append('[').append(block);	  	non-compiled	[CE]  ';'  expected	144	None	add
929	[BUG]  [BUGGY]  sb.append('[').append(block);  StringBuilder  sb.append('[').append(block);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  StringBuilder  sb.append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    StringBuilder  sb.append('[').append(block);	  	non-compiled	[CE]  ';'  expected	144	None	add
930	[BUG]  [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    sb.append('[').append(block));	  	non-compiled	[CE]  ';'  expected	144	None	add
931	[BUG]  [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block;  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    sb.append('[').append(block;	  	non-compiled	[CE]  ')'  expected	144	None	add
932	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
933	[BUG]  [BUGGY]  sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
934	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
935	[BUG]  [BUGGY]  sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
936	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ", ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	175	1	replace
937	[BUG]  [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS);  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ", ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	175	1	replace
938	[BUG]  [BUGGY]  sb.append('n');  sb.append('f',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('f',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('f',  block.charAt(i));	  sb.append('n');    sb.append('f');    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
939	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');  sb.append(block.toString());	  sb.append('n');    sb.append('f');    	compilable	  [FE]  ComparisonFailure  	77	1	replace
940	[BUG]  [BUGGY]  sb.append('n');  sb.append(block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append(block.toString());	  sb.append('n');    sb.append('f');    	compilable	  [FE]  ComparisonFailure  	77	1	replace
941	[BUG]  [BUGGY]  sb.append('n');  sb.append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append(block.toCharArray());	  sb.append('n');    sb.append('f');    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
942	[BUG]  [BUGGY]  sb.append('['  +  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  chars.charAt(i));	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
943	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i),  c);	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
944	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i)+  1));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i)+  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i)+  1));	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  ';'  expected	143	None	replace
945	[BUG]  [BUGGY]  sb.append('['  +  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  c.charAt(i));	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	143	None	replace
946	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i)+  1);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i)+  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i)+  1);	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
947	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i),  len);	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
948	[BUG]  [BUGGY]  sb.append('N');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');  sb.append(block.charAt(i));	  sb.append('n');    sb.append('m');    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
949	[BUG]  [BUGGY]  sb.append( "[');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "[');	  sb.append('[');    sb.append(   ".[');    	non-compiled	[CE]  unclosed  string  literal	193	None	replace
950	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
951	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
952	[BUG]  [BUGGY]  sb.append('?');  else  {  sb.append(block.charAt(i));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  else  {  sb.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
953	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
954	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }  [CE]  class  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  class  expected	121	None	replace
955	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
956	[BUG]  [BUGGY]  sb.append('/'  +  c.toString());  [CE]  char  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  c.toString());	  sb.append('/'    +    block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	169	None	replace
957	[BUG]  [BUGGY]  sb.append('/'  +  block.getName());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.getName());	  sb.append('/'    +    block.toString());    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
958	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  block.toString()  +  1);	  sb.append('/'    +    block.toString());    	compilable	  [FE]  ComparisonFailure  	169	1	replace
959	[BUG]  [BUGGY]  sb.append('/'  +  block.toString()  +  1);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.toString()  +  1);	  sb.append('/'    +    block.toString());    	compilable	  [FE]  ComparisonFailure  	169	1	replace
960	[BUG]  [BUGGY]  sb.append('/'  +  chars[i].toString());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  chars[i].toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  chars[i].toString());	  sb.append('/'    +    block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	169	None	replace
961	[BUG]  [BUGGY]  sb.append(block,  c.getName());  [CE]  char  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c.getName());	  sb.append(block.getName());    	non-compiled	[CE]  char  cannot  be  dereferenced	200	None	replace
962	[BUG]  [BUGGY]  sb.append(block.getName(),  c);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.getName(),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.getName(),  c);	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
963	[BUG]  [BUGGY]  sb.append(c.getName());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.getName());	  sb.append(block.getName());    	non-compiled	[CE]  char  cannot  be  dereferenced	200	None	replace
964	[BUG]  [BUGGY]  sb.append(block.getName()  + ": ");  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.getName()  + ": ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.getName()  + ": ");	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
965	[BUG]  [BUGGY]  sb.append(block.getName()  +  1);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.getName()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.getName()  +  1);	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
966	[BUG]  [BUGGY]  sb.append('[').append(block,  c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  c.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	97	None	replace
967	[BUG]  [BUGGY]  sb.append('[').append(c.toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	97	None	replace
968	[BUG]  [BUGGY]  sb.append('[').append(c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c,  block.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
969	[BUG]  [BUGGY]  sb.append('[').append(block!=  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block!=  null?  null  :  block.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
970	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
971	[BUG]  [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
972	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
973	[BUG]  [BUGGY]  sb.append(':');  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
974	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
975	[BUG]  [BUGGY]  sb.append(':').append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
976	[BUG]  [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [CE]  cannot  find  symbol  length  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	208	None	replace
977	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(c);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ComparisonFailure  	208	1	replace
978	[BUG]  [BUGGY]  sb.append(':');  sb.append(c);  [FE]  ComparisonFailure  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ComparisonFailure  	208	1	replace
979	[BUG]  [BUGGY]  sb.append(':',  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]              ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	208	None	replace
980	[BUG]  [BUGGY]  sb.append(c.charAt(i),  block);  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.charAt(i),  block);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  char  cannot  be  dereferenced	91	None	replace
981	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c,  s);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c,  s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c,  s);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
982	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i),  c);  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i),  c);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  char  cannot  be  dereferenced	91	None	replace
983	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i),  c);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
984	[BUG]  [BUGGY]  sb.append(chars[i],  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i],  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i],  block.charAt(i),  c);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
985	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i),  block);  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i),  block);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  char  cannot  be  dereferenced	91	None	replace
986	[BUG]  [BUGGY]  sb.append('?');  sb  =(String)block.clone();  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb  =(String)block.clone();	  sb.append('?');    String    sb    =(String)block.clone();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	55	None	replace
987	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.clone();	  sb.append('?');    String    sb    =(String)block.clone();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	55	None	replace
988	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.toString();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =(String)block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =(String)block.toString();	  sb.append('?');    String    sb    =(String)block.clone();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	55	None	replace
989	[BUG]  [BUGGY]  final  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.clone();	  sb.append('?');    String    sb    =(String)block.clone();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	55	None	replace
990	[BUG]  [BUGGY]  sb.append(block.substring(i  +  1,  block.length()  -  1));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(i  +  1,  block.length()  -  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(i  +  1,  block.length()  -  1));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()    -    1));    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
991	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append(':');	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
992	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =(String)block.getValue();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =(String)block.getValue();  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =(String)block.getValue();  sb.append(':');	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
993	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
994	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =  block.getValue();  sb.append(':');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =  block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  String  sb  =  block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
995	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  for(int  i  =  0;  i  <  len;  ++i)  {	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
996	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
997	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
998	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
999	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i));  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
1000	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(. ".s.IFJDCS   ".charAt(i));  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(. ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append(. ".s.IFJDCS   ".charAt(i));	  	non-compiled	[CE]  illegal  start  of  expression	202	None	add
1001	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(... ".s.IFJDCS   ".charAt(i));  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(... ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append(... ".s.IFJDCS   ".charAt(i));	  	non-compiled	[CE]  illegal  start  of  expression	202	None	add
1002	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block  ==  null?  null  :  block.toString());	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1003	[BUG]  [BUGGY]  sb.append(':').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block  ==  null?  null  :  block.toString());	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1004	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block.toString()  +  1);	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1005	[BUG]  [BUGGY]  sb.append(':').append(block.toString()  +  1);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString()  +  1);	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1006	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block!=  null? "null "  :  block.toString());	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1007	[BUG]  [BUGGY]  sb.append(':').append(block!=  null? "null "  :  block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block!=  null? "null "  :  block.toString());	  sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	17	1	replace
1008	[BUG]  [BUGGY]  sb.append('/').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.toCharArray());	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
1009	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1010	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1011	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	180	1	add
1012	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	180	1	add
1013	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1014	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1015	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1016	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1017	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	180	None	add
1018	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1019	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1020	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append('?');  sb.append(   ".prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
1021	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(c).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append('?');  sb.append(   ".prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
1022	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( "?');  sb.append(   ".prototype.   ").append(c).append('?');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( "?');  sb.append(   ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append( "?');  sb.append(   ".prototype.   ").append(c).append('?');	  	non-compiled	[CE]  unclosed  string  literal	176	None	add
1023	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append(. ".prototype.   ").append(c).append('?');  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append(. ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append('?');  sb.append(. ".prototype.   ").append(c).append('?');	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
1024	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  0??  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append('?');  sb.append( ",.prototype.   ").append(c).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  0??  	176	1	add
1025	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(c).append('?');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  0??  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append('?');  sb.append( ",.prototype.   ").append(c).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  0??  	176	1	add
1026	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append( ".prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
1027	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( ".prototype.   ").append(c).append('?');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( ".prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append( ".prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
1028	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1029	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1030	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	227	None	add
1031	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1032	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1033	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }	  	non-compiled	[CE]  unclosed  string  literal	227	None	add
1034	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(c);  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(c);  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1035	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(c);  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(c);  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(c);  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1036	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	227	None	add
1037	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1038	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1039	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "?' ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "?' ");	  sb.append('?');    sb.append(   "?');    	compilable	  [FE]  ComparisonFailure  	53	1	replace
1040	[BUG]  [BUGGY]  sb.append( "?' ");  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "?' ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "?' ");	  sb.append('?');    sb.append(   "?');    	compilable	  [FE]  ComparisonFailure  	53	1	replace
1041	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1042	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1043	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  System.arraycopy(chars,  0,  block,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1044	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  block,  0,  len);  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(chars,  0,  block,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1045	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [CE]  cannot  find  symbol  length  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  block.length);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	132	None	replace
1046	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1047	[BUG]  [BUGGY]  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1048	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1049	[BUG]  [BUGGY]  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1050	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('[');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
1051	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append(']');  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
1052	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('[');    sb.append('[');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
1053	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append('[');  sb.append('[');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append('[');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
1054	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  String  sb.append(']');  sb.append('[');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  String  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    String  sb.append(']');  sb.append('[');	  	non-compiled	[CE]  ';'  expected	32	None	add
1055	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append('].');  sb.append('[');  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append('].');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append('].');  sb.append('[');	  	non-compiled	[CE]  unclosed  character  literal	32	None	add
1056	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append(']').  sb.append('[');  [CE]  cannot  find  symbol  sb  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append(']').  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append(']').  sb.append('[');	  	non-compiled	[CE]  cannot  find  symbol  sb	32	None	add
1057	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append( "]');  sb.append('[');  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append( "]');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append( "]');  sb.append('[');	  	non-compiled	[CE]  unclosed  string  literal	32	None	add
1058	[BUG]  [BUGGY]  sb.append(block.charAt(i  +  1),  c);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i  +  1),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i  +  1),  c);	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1059	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i  +  1]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i  +  1]);	  sb.append(block.charAt(i    +    1));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
1060	[BUG]  [BUGGY]  sb.append(chars[i  +  1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i  +  1]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i  +  1]);	  sb.append(block.charAt(i    +    1));    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	94	1	replace
1061	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i  +  1));	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1062	[BUG]  [BUGGY]  sb.append(block.charAt(i  +  1),  len);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i  +  1),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i  +  1),  len);	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1063	[BUG]  [BUGGY]  sb.append(chars[i  +  1],  block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i  +  1],  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i  +  1],  block.charAt(i  +  1));	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1064	[BUG]  [BUGGY]  sb.append(c.charAt(i  +  1));  [CE]  char  cannot  be  dereferenced  [FE]                              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c.charAt(i  +  1));	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  char  cannot  be  dereferenced	94	None	replace
1065	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('e');	  sb.append('n');    sb.append('e');    	compilable	  [FE]  ComparisonFailure  	166	1	replace
1066	[BUG]  [BUGGY]  sb.append('e');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('e');	  sb.append('n');    sb.append('e');    	compilable	  [FE]  ComparisonFailure  	166	1	replace
1067	[BUG]  [BUGGY]  sb.append('n');  sb.append('e',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('e',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('e',  block.charAt(i));	  sb.append('n');    sb.append('e');    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1068	[BUG]  [BUGGY]  sb.append('n');  sb.append('e').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('e').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('e').append(block.charAt(i));	  sb.append('n');    sb.append('e');    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1069	[BUG]  [BUGGY]  sb.append('[').append(c.toString());  [CE]  char  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c.toString());	  sb.append('[').append(block.toString());    	non-compiled	[CE]  char  cannot  be  dereferenced	101	None	replace
1070	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block!=  null?  null  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1071	[BUG]  [BUGGY]  sb.append('[').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block!=  null?  null  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1072	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block.toString()  +  1);	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1073	[BUG]  [BUGGY]  sb.append('[').append(block.toString()  +  1);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString()  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString()  +  1);	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1074	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block  ==  null?  null  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1075	[BUG]  [BUGGY]  sb.append('[').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block  ==  null?  null  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1076	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block!=  null? "null "  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1077	[BUG]  [BUGGY]  sb.append('[').append(block!=  null? "null "  :  block.toString());  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block!=  null? "null "  :  block.toString());	  sb.append('[').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	101	1	replace
1078	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1079	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1080	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1081	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1082	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1083	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1084	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	add
1085	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	221	None	add
1086	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	non-compiled	[CE]  unclosed  string  literal	221	None	add
1087	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1088	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1089	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1090	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1091	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  String  sb.append('n');  sb.append('k');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  String  sb.append('n');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    String  sb.append('n');  sb.append('k');	  	non-compiled	[CE]  ';'  expected	163	None	add
1092	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('m');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('m');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1093	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('m');  sb.append('k');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('m');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('m');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1094	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('r');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('r');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1095	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('r');  sb.append('k');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('r');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('r');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1096	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');  continue;	  	non-compiled	[CE]  unreachable  statement	163	None	add
1097	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('N');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('N');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1098	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('N');  sb.append('k');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('N');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('N');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1099	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('k');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('k');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1100	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('k');  sb.append('k');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('k');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('k');  sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	163	1	add
1101	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n';  sb.append('k');  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n';  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n';  sb.append('k');	  	non-compiled	[CE]  ')'  expected	163	None	add
1102	[BUG]  [BUGGY]  sb.append(']',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  block.charAt(i));	  sb.append(']');    sb.append(']');    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "['] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "['] ");	  sb.append('[');    sb.append(   "[');    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1104	[BUG]  [BUGGY]  sb.append( "['] ");  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "['] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "['] ");	  sb.append('[');    sb.append(   "[');    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1105	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append('n');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1106	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('n');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1107	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  String  sb.append('n');  sb.append('n');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  String  sb.append('n');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    String  sb.append('n');  sb.append('n');	  	non-compiled	[CE]  ';'  expected	65	None	add
1108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('N');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append('N');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1109	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('N');  sb.append('n');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('N');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('N');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1110	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  StringBuilder  sb.append('n');  sb.append('n');  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  StringBuilder  sb.append('n');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    StringBuilder  sb.append('n');  sb.append('n');	  	non-compiled	[CE]  ';'  expected	65	None	add
1111	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n');  continue;  [CE]  unreachable  statement  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('n');  sb.append('n');  continue;	  	non-compiled	[CE]  unreachable  statement	65	None	add
1112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('m');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append('m');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1113	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('m');  sb.append('n');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('m');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('m');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append('r');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1115	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('r');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('r');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1116	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n';  sb.append('n');  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n';  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('n';  sb.append('n');	  	non-compiled	[CE]  ')'  expected	65	None	add
1117	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1118	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1119	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( "?');  System.arraycopy(block,  0,  sb,  0,  len);  [CE]  unclosed  string  literal  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( "?');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( "?');  System.arraycopy(block,  0,  sb,  0,  len);	  	non-compiled	[CE]  unclosed  string  literal	131	None	add
1120	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('? "');  System.arraycopy(block,  0,  sb,  0,  len);  [CE]  unclosed  character  literal  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('? "');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('? "');  System.arraycopy(block,  0,  sb,  0,  len);	  	non-compiled	[CE]  unclosed  character  literal	131	None	add
1121	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(char,  0,  sb,  0,  len);  [CE]  '.class'  expected  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(char,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(char,  0,  sb,  0,  len);	  	non-compiled	[CE]  '.class'  expected	131	None	add
1122	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append(c);  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append(c);  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1123	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append(c);  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]            ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append(c);  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append(c);  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1124	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(lock,  0,  sb,  0,  len);  [CE]  cannot  find  symbol  lock  [FE]              ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(lock,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(lock,  0,  sb,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  lock	131	None	add
1125	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  sb,  1,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1126	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  1,  len);  [FE]  ArrayStoreException  [FE]                ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  sb,  1,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1127	[BUG]  [BUGGY]  sb.append(':').append(block.toLowerCase());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1128	[BUG]  [BUGGY]  sb.append(':').append(c,  block.toLowerCase());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(c,  block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(c,  block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1129	[BUG]  [BUGGY]  sb.append(':').append(chars[block.toLowerCase());  [CE]  ']'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  ']'  expected	159	None	replace
1130	[BUG]  [BUGGY]  sb.append(':').append(block,  c.toLowerCase());  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  c.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  c.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  char  cannot  be  dereferenced	159	None	replace
1131	[BUG]  [BUGGY]  sb.append(':').append(chars[i]).append(block.toLowerCase());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i]).append(block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i]).append(block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1132	[BUG]  [BUGGY]  sb.append(':').append(chars[i].append(block.toLowerCase());  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(chars[i].append(block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(chars[i].append(block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  ')'  expected	159	None	replace
1133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1134	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1135	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append( ":');  sb.append(':').append(block.toString());  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append( ":');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append( ":');  sb.append(':').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
1136	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  String  sb.append(':');  sb.append(':').append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  String  sb.append(':');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    String  sb.append(':');  sb.append(':').append(block.toString());	  	non-compiled	[CE]  ';'  expected	26	None	add
1137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(c);  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':').append(block.toString());    sb.append(c);  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1138	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(c);  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(c);  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(c);  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1139	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(lock.toString());  [CE]  cannot  find  symbol  lock  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(lock.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append(':').append(lock.toString());	  	non-compiled	[CE]  cannot  find  symbol  lock	26	None	add
1140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(';');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':').append(block.toString());    sb.append(';');  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1141	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(';');  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(';');  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(';');  sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':').append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1143	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':').append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
1144	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.clone();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	49	None	replace
1145	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.clone();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.clone();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.clone();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.clone();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	49	None	replace
1146	[BUG]  [BUGGY]  final  String  sb  =(String)block.clone();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.clone();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.clone();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.clone();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	49	None	replace
1147	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1148	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1149	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1150	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb  ==  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1152	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1153	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	add
1154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1155	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('0');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1157	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1159	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1160	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toUpperCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(Character.toUpperCase(c));	  sb.append(':');    sb.append(   ":');    	compilable	  [FE]  ComparisonFailure  	209	1	replace
1161	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c));  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toUpperCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Character.toUpperCase(c));	  sb.append(':');    sb.append(   ":');    	compilable	  [FE]  ComparisonFailure  	209	1	replace
1162	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1163	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1165	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1166	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	225	None	add
1167	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	225	None	add
1168	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/	  	non-compiled	[CE]  unclosed  character  literal	225	None	add
1169	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	225	None	add
1170	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [CE]  unclosed  string  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	non-compiled	[CE]  unclosed  string  literal	225	None	add
1171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1172	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1173	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  String  sb  =(String)block.clone();  sb.append('n');  sb.append('e');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  String  sb  =(String)block.clone();  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    String  sb  =(String)block.clone();  sb.append('n');  sb.append('e');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	165	None	add
1174	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  String  sb.append('n');  sb.append('e');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  String  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    String  sb.append('n');  sb.append('e');	  	non-compiled	[CE]  ';'  expected	165	None	add
1175	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('m');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('m');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1176	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('m');  sb.append('e');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('m');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('m');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1177	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('r');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('r');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1178	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('r');  sb.append('e');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('r');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('r');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1179	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  return  sb.toString();  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');  return  sb.toString();	  	non-compiled	[CE]  unreachable  statement	165	None	add
1180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('N');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('N');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1181	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('N');  sb.append('e');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('N');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('N');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1182	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n';  sb.append('e');  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n';  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('n';  sb.append('e');	  	non-compiled	[CE]  ')'  expected	165	None	add
1183	[BUG]  [BUGGY]  sb.append('[').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  chars.charAt(i));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1184	[BUG]  [BUGGY]  sb.append('[').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  c.charAt(i));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	96	None	replace
1185	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i,  len));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1186	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i  +  1));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('_');    sb.append('[');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1188	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append('[');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1189	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  String  sb  =(String)block.clone();  sb.append('[');  sb.append('_');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  String  sb  =(String)block.clone();  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    String  sb  =(String)block.clone();  sb.append('[');  sb.append('_');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	194	None	add
1190	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  String  sb.append('[');  sb.append('_');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  String  sb.append('[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    String  sb.append('[');  sb.append('_');	  	non-compiled	[CE]  ';'  expected	194	None	add
1191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('_');    sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1192	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append(']');  sb.append('_');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1193	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[').  sb.append('_');  [CE]  cannot  find  symbol  sb  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[').  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append('[').  sb.append('_');	  	non-compiled	[CE]  cannot  find  symbol  sb	194	None	add
1194	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append( "[');  sb.append('_');  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append( "[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append( "[');  sb.append('_');	  	non-compiled	[CE]  unclosed  string  literal	194	None	add
1195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
1196	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
1197	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  String  sb.append('/');  sb.append('/');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  String  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    String  sb.append('/');  sb.append('/');	  	non-compiled	[CE]  ';'  expected	56	None	add
1198	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  StringBuilder  sb.append('/');  sb.append('/');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  StringBuilder  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    StringBuilder  sb.append('/');  sb.append('/');	  	non-compiled	[CE]  ';'  expected	56	None	add
1199	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/').  sb.append('/');  [CE]  cannot  find  symbol  sb  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/').  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/').  sb.append('/');	  	non-compiled	[CE]  cannot  find  symbol  sb	56	None	add
1200	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( "/');  sb.append('/');  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( "/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( "/');  sb.append('/');	  	non-compiled	[CE]  unclosed  string  literal	56	None	add
1201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append(':');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append(':');  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
1202	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append(':');  sb.append('/');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append(':');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append(':');  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
1203	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');  continue;	  	non-compiled	[CE]  unreachable  statement	56	None	add
1204	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/';  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/';  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/';	  	non-compiled	[CE]  ')'  expected	56	None	add
1205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    sb.append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	126	1	add
1206	[BUG]  [BUGGY]  sb.append(block.toString());  sb.append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    sb.append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	126	1	add
1207	[BUG]  [BUGGY]  sb.append(block.toString());  StringBuilder  sb.append(block.toString());  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  StringBuilder  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    StringBuilder  sb.append(block.toString());	  	non-compiled	[CE]  ';'  expected	126	None	add
1208	[BUG]  [BUGGY]  sb.append(block.toString());  StringBuffer  sb.append(block.toString());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  StringBuffer  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    StringBuffer  sb.append(block.toString());	  	non-compiled	[CE]  ';'  expected	126	None	add
1209	[BUG]  [BUGGY]  sb.append(block.toString());  String  sb  =  new  String(block.toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  String  sb  =  new  String(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    String  sb  =  new  String(block.toString());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	126	None	add
1210	[BUG]  [BUGGY]  sb.append(block.toString());  String  sb.append(block.toString());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  String  sb.append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    String  sb.append(block.toString());	  	non-compiled	[CE]  ';'  expected	126	None	add
1211	[BUG]  [BUGGY]  sb.append(block.toString());  String  sb  =  block.toString();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  String  sb  =  block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    String  sb  =  block.toString();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	126	None	add
1212	[BUG]  [BUGGY]  sb.append(block.toString());  sb.append(block.toString());  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  sb.append(block.toString());  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    sb.append(block.toString());  continue;	  	non-compiled	[CE]  unreachable  statement	126	None	add
1213	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.getValue();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1214	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1215	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue()  +  1;  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue()  +  1;  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =(String)block.getValue()  +  1;  sb.append('?');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1216	[BUG]  [BUGGY]  final  String  sb  =(String)block.getValue();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =(String)block.getValue();  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =(String)block.getValue();  sb.append('?');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1217	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1218	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append(':');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1219	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ".s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append( ".s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1220	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ".s.IFJDCS   ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ".s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append( ".s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1221	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ":');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ":');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append( ":');  sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');	  	non-compiled	[CE]  unclosed  string  literal	204	None	add
1222	[BUG]  [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [CE]  cannot  find  symbol  SIGNATURES  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SIGNATURES).append('?');    	non-compiled	[CE]  cannot  find  symbol  SIGNATURES	172	None	replace
1223	[BUG]  [BUGGY]  sb.append('?').append(block.charAt(i)).append('?');  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.charAt(i)).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.charAt(i)).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1224	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".prototype. ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
1225	[BUG]  [BUGGY]  sb.append( ".prototype. ").append(c).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".prototype. ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
1226	[BUG]  [BUGGY]  sb.append('?').append(block,  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  c);	  sb.append('?').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	142	None	replace
1227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append(']');    sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1228	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1229	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  String  sb.append('[');  sb.append('[').append(']');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  String  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    String  sb.append('[');  sb.append('[').append(']');	  	non-compiled	[CE]  ';'  expected	136	None	add
1230	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append( "[');  sb.append('[').append(']');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append( "[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append( "[');  sb.append('[').append(']');	  	non-compiled	[CE]  unclosed  string  literal	136	None	add
1231	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append( ".[');  sb.append('[').append(']');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append( ".[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append( ".[');  sb.append('[').append(']');	  	non-compiled	[CE]  unclosed  string  literal	136	None	add
1232	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(']');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append(']');    sb.append(']');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1233	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(']');  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(']');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append(']');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1234	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('['].append(']');  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('['].append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append('[');  sb.append('['].append(']');	  	non-compiled	[CE]  ')'  expected	136	None	add
1235	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[').append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append(']');    sb.append('[').append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1236	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[').append('[').append(']');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[').append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append('[').append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
1237	[BUG]  [BUGGY]  sb.append(Block.UnicodeBlock.DEFAULT);  [CE]  package  Block  does  not  exist  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Block.UnicodeBlock.DEFAULT);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Block.UnicodeBlock.DEFAULT);	  sb.append(block);    sb.append(    Block.UnicodeBlock.DEFAULT);    	non-compiled	[CE]  package  Block  does  not  exist	213	None	replace
1238	[BUG]  [BUGGY]  sb.append(block,  Block.UnicodeBlock.DEFAULT);  [CE]  package  Block  does  not  exist  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Block.UnicodeBlock.DEFAULT);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Block.UnicodeBlock.DEFAULT);	  sb.append(block);    sb.append(    Block.UnicodeBlock.DEFAULT);    	non-compiled	[CE]  package  Block  does  not  exist	213	None	replace
1239	[BUG]  [BUGGY]  sb.append(Block.UnicodeBlock.DEFAULT,  c);  [CE]  package  Block  does  not  exist  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Block.UnicodeBlock.DEFAULT,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Block.UnicodeBlock.DEFAULT,  c);	  sb.append(block);    sb.append(    Block.UnicodeBlock.DEFAULT);    	non-compiled	[CE]  package  Block  does  not  exist	213	None	replace
1240	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
1241	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append('?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
1242	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( "?');  sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	non-compiled	[CE]  unclosed  string  literal	170	None	add
1243	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
1244	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
1245	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(']');    sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
1246	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[');  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
1247	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  String  sb.append('[');  sb.append(']');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  String  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    String  sb.append('[');  sb.append(']');	  	non-compiled	[CE]  ';'  expected	134	None	add
1248	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(']');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(']');    sb.append(']');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
1249	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append(']');  sb.append(']');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(']');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append(']');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
1250	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append( "[');  sb.append(']');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append( "[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append( "[');  sb.append(']');	  	non-compiled	[CE]  unclosed  string  literal	134	None	add
1251	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[').  sb.append(']');  [CE]  cannot  find  symbol  sb  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[').  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append('[').  sb.append(']');	  	non-compiled	[CE]  cannot  find  symbol  sb	134	None	add
1252	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append( ".[');  sb.append(']');  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append( ".[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append( ".[');  sb.append(']');	  	non-compiled	[CE]  unclosed  string  literal	134	None	add
1253	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[');  sb.append('].');  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[');  sb.append('].');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append('[');  sb.append('].');	  	non-compiled	[CE]  unclosed  character  literal	134	None	add
1254	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i  +  1));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i  +  1));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	95	None	replace
1255	[BUG]  [BUGGY]  sb.append(chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i],  block.charAt(i));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1256	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i)+  1));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i)+  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i)+  1));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  ';'  expected	95	None	replace
1257	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i],  block));  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(i],  block));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i],  block));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  ')'  expected	95	None	replace
1258	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
1259	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	220	1	replace
1260	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	220	1	replace
1261	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	220	1	replace
1262	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	220	1	replace
1263	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
1264	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('[');	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	87	None	replace
1265	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	87	None	replace
1266	[BUG]  [BUGGY]  sb.append('[');  final  String  sb  =(String)block.getValue();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  final  String  sb  =(String)block.getValue();  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  final  String  sb  =(String)block.getValue();  sb.append('[');	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	87	None	replace
1267	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	87	None	replace
1268	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  sb.append(c);  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	87	None	replace
1269	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('[',  s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('[',  s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('[',  s);	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	87	None	replace
1270	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('n');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1271	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('n');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1272	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  String  sb.append('n');  sb.append('f');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  String  sb.append('n');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    String  sb.append('n');  sb.append('f');	  	non-compiled	[CE]  ';'  expected	76	None	add
1273	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('m');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('m');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1274	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('m');  sb.append('f');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('m');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('m');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('r');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('r');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1276	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('r');  sb.append('f');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('r');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('r');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('N');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('N');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1278	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('N');  sb.append('f');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('N');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('N');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1279	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n';  sb.append('f');  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n';  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('n';  sb.append('f');	  	non-compiled	[CE]  ')'  expected	76	None	add
1280	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('n');  sb.append('f');  continue;	  	non-compiled	[CE]  unreachable  statement	76	None	add
1281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('f');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('f');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1282	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('f');  sb.append('f');  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('f');  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('f');  sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	76	1	add
1283	[BUG]  [BUGGY]  sb.append(']').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  chars.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1284	[BUG]  [BUGGY]  sb.append(']').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  c.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	102	None	replace
1285	[BUG]  [BUGGY]  sb.append(']').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  chars[i]);	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	102	None	replace
1286	[BUG]  [BUGGY]  sb.append(']').append(chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(chars[i].charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	102	None	replace
1287	[BUG]  [BUGGY]  sb.append(']').append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(c,  block.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1288	[BUG]  [BUGGY]  sb.append(']').append(block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block.charAt(i,  len));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1289	[BUG]  [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(s.substring(i  +  1,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(s.substring(i  +  1,  len));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    len));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	157	None	replace
1290	[BUG]  [BUGGY]  sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c);  String  sb  =  new  String(s.substring(i  +  1,  len));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    len));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	157	None	replace
1291	[BUG]  [BUGGY]  sb.append(block.substring(i  +  1,  len));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(i  +  1,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(i  +  1,  len));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    len));    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1292	[BUG]  [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =  new  String(s.substring(i  +  1,  len));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    len));    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	157	None	replace
1293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1294	[BUG]  [BUGGY]  sb.append(c).append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1295	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1296	[BUG]  [BUGGY]  sb.append(chars[i]).append(':');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1297	[BUG]  [BUGGY]  sb.append(block.charAt(i)).append(':');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i)).append(':');	  sb.append(block);    sb.append(block).append(':');    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1298	[BUG]  [BUGGY]  sb.append(block,  c).append(':');  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c).append(':');	  sb.append(block);    sb.append(block).append(':');    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	11	None	replace
1299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(c);    sb.append('[').append(c);	  	compilable	  [FE]  ComparisonFailure  	98	1	add
1300	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append('[').append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append('[').append(c);	  	compilable	  [FE]  ComparisonFailure  	98	1	add
1301	[BUG]  [BUGGY]  sb.append('[').append(c);  String  sb.append('[').append(c);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  String  sb.append('[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    String  sb.append('[').append(c);	  	non-compiled	[CE]  ';'  expected	98	None	add
1302	[BUG]  [BUGGY]  sb.append('[').append(c);  StringBuilder  sb.append('[').append(c);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  StringBuilder  sb.append('[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    StringBuilder  sb.append('[').append(c);	  	non-compiled	[CE]  ';'  expected	98	None	add
1303	[BUG]  [BUGGY]  sb.append('[').append(c);  StringBuffer  sb.append('[').append(c);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  StringBuffer  sb.append('[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    StringBuffer  sb.append('[').append(c);	  	non-compiled	[CE]  ';'  expected	98	None	add
1304	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append('[').append(c));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append('[').append(c));	  	non-compiled	[CE]  ';'  expected	98	None	add
1305	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append('[').append(char);  [CE]  '.class'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(char);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append('[').append(char);	  	non-compiled	[CE]  '.class'  expected	98	None	add
1306	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('n');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1307	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('n');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1308	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('m');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('m');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1309	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('m');  sb.append('m');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('m');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('m');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1310	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  String  sb.append('n');  sb.append('m');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  String  sb.append('n');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    String  sb.append('n');  sb.append('m');	  	non-compiled	[CE]  ';'  expected	69	None	add
1311	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('r');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('r');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1312	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('r');  sb.append('m');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('r');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('r');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1313	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('N');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('N');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1314	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('N');  sb.append('m');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('N');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('N');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1315	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  continue;  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('n');  sb.append('m');  continue;	  	non-compiled	[CE]  unreachable  statement	69	None	add
1316	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n';  sb.append('m');  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n';  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('n';  sb.append('m');	  	non-compiled	[CE]  ')'  expected	69	None	add
1317	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('f');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('f');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1318	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('f');  sb.append('m');  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('f');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('f');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1319	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[');    sb.append('[');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1320	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append('[');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1321	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[').  sb.append('[');  sb.append('[');  [CE]  cannot  find  symbol  sb  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[').  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append('[').  sb.append('[');  sb.append('[');	  	non-compiled	[CE]  cannot  find  symbol  sb	84	None	add
1322	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  String  sb.append('[');  sb.append('[');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  String  sb.append('[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    String  sb.append('[');  sb.append('[');	  	non-compiled	[CE]  ';'  expected	84	None	add
1323	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1324	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append(']');  sb.append('[');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1325	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append( "[');  sb.append('[');  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append( "[');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append( "[');  sb.append('[');	  	non-compiled	[CE]  unclosed  string  literal	84	None	add
1326	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  return  sb.toString();  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append('[');  sb.append('[');  return  sb.toString();	  	non-compiled	[CE]  unreachable  statement	84	None	add
1327	[BUG]  [BUGGY]  sb.append('n');  sb.append('k').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('k').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('k').append(block.charAt(i));	  sb.append('n');    sb.append('k');    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1328	[BUG]  [BUGGY]  sb.append('n');  sb.append('k',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('k',  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('k',  block.charAt(i));	  sb.append('n');    sb.append('k');    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1329	[BUG]  [BUGGY]  sb.append('n');  sb.append('k'  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');  sb.append('k'  +  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');  sb.append('k'  +  block.charAt(i));	  sb.append('n');    sb.append('k');    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1330	[BUG]  [BUGGY]  sb.append(chars,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars,  block.charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1331	[BUG]  [BUGGY]  sb.append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars[i]);	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	93	None	replace
1332	[BUG]  [BUGGY]  sb.append(block,  chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars[i].charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	93	None	replace
1333	[BUG]  [BUGGY]  sb.append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c.charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	93	None	replace
1334	[BUG]  [BUGGY]  sb.append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block.charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1335	[BUG]  [BUGGY]  sb.append(c,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  chars.charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1336	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	226	None	replace
1337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	226	1	replace
1338	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	226	1	replace
1339	[BUG]  [BUGGY]  sb.append(block,  Character.UnicodeBlock.SEPARATOR);  [CE]  cannot  find  symbol  SEPARATOR  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Character.UnicodeBlock.SEPARATOR);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Character.UnicodeBlock.SEPARATOR);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  SEPARATOR	214	None	replace
1340	[BUG]  [BUGGY]  sb.append(block.toString());  final  String  sb  =  new  String(block.toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  final  String  sb  =  new  String(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    final  String  sb  =  new  String(block.toString());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	126	None	add
1341	[BUG]  [BUGGY]  sb.append(block.toString());  String  sb  =  getString(block.toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  String  sb  =  getString(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    String  sb  =  getString(block.toString());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	126	None	add
1342	[BUG]  [BUGGY]  sb.append(block.toString());  sb.append(  Block.toString());  [CE]  cannot  find  symbol  Block  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  sb.append(  Block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    sb.append(  Block.toString());	  	non-compiled	[CE]  cannot  find  symbol  Block	126	None	add
1343	[BUG]  [BUGGY]  sb.append(block.toString());  sb.append(block.toString();  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  sb.append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    sb.append(block.toString();	  	non-compiled	[CE]  ')'  expected	126	None	add
1344	[BUG]  [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  String  sb  =(String)block.clone();	  sb.append('[');    String    sb    =(String)block.clone();    sb.append(']');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	90	None	replace
1345	[BUG]  [BUGGY]  sb.append(block,  0,  block.length);  [CE]  cannot  find  symbol  length  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  0,  block.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  0,  block.length);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
1346	[BUG]  [BUGGY]  sb.append(c,  block);  sb.append(block,  0,  len);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block);  sb.append(block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block);  sb.append(block,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	9	None	replace
1347	[BUG]  [BUGGY]  sb.append('?',  '/');  sb.append(block,  0,  len);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  '/');  sb.append(block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  '/');  sb.append(block,  0,  len);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	9	None	replace
1348	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	58	None	replace
1349	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
1350	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	58	None	replace
1351	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
1352	[BUG]  [BUGGY]  sb.append('[').append(block,  i);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  i);	  sb.append('[').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int)	145	None	replace
1353	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(0));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(0));	  sb.append('[').append(block);    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
1354	[BUG]  [BUGGY]  sb.append(block,  Character.UnicodeBlock.SPECIALS);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,UnicodeBlock)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Character.UnicodeBlock.SPECIALS);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SPECIALS);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,UnicodeBlock)	155	None	replace
1355	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('r');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
1356	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('m');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('r');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('r');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
1357	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('f');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append('f');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
1358	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append('f');  sb.append('r');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append('f');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append('f');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
1359	[BUG]  [BUGGY]  sb.append(block!=  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block!=  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block!=  null?  null  :  block.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1360	[BUG]  [BUGGY]  sb.append(block,  s.toCharArray());  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])	124	None	replace
1361	[BUG]  [BUGGY]  sb.append(block  ==  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block  ==  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block  ==  null?  null  :  block.toCharArray());	  sb.append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1362	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(16);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(16);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(16);	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
1363	[BUG]  [BUGGY]  sb.append(chars[block.charAt(i  +  1)]);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[block.charAt(i  +  1)]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[block.charAt(i  +  1)]);	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1364	[BUG]  [BUGGY]  sb.append(block.charAt(i  +  1)+  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i  +  1)+  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i  +  1)+  1);	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1365	[BUG]  [BUGGY]  sb.append(c,  block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  block.charAt(i  +  1));	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
1366	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	add
1367	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1368	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1369	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	178	None	add
1370	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	178	None	add
1371	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1372	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
1373	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	178	None	add
1374	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	178	None	add
1375	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.toString();  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(block.toString();	  	non-compiled	[CE]  ')'  expected	63	None	add
1376	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(  Block.toString());  [CE]  cannot  find  symbol  Block  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(  Block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(  Block.toString());	  	non-compiled	[CE]  cannot  find  symbol  Block	63	None	add
1377	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append( "./').append(block.toString());  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append( "./').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append( "./').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	63	None	add
1378	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.getString());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.getString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(block.getString());	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
1379	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append( ":').append(block.toString());  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append( ":').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append( ":').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
1380	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.toString();  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append(':').append(block.toString();	  	non-compiled	[CE]  ')'  expected	26	None	add
1381	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append( ".append(block.toString());  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append( ".append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append( ".append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
1382	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':';  sb.append(':').append(block.toString());  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':';  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':';  sb.append(':').append(block.toString());	  	non-compiled	[CE]  ')'  expected	26	None	add
1383	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.getString());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':');  sb.append(':').append(block.getString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':');  sb.append(':').append(block.getString());	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
1384	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	73	None	add
1385	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n').  sb.append('N');  sb.append('N');  [CE]  cannot  find  symbol  sb  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n').  sb.append('N');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n').  sb.append('N');  sb.append('N');	  	non-compiled	[CE]  cannot  find  symbol  sb	73	None	add
1386	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append('n');  sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append('n');  sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	73	None	add
1387	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	119	1	replace
1388	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	119	1	replace
1389	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block!=  null?  null  :  block.toString());	  sb.append(block.toString());    	compilable	  [FE]  ComparisonFailure  	127	1	replace
1390	[BUG]  [BUGGY]  sb.append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block!=  null?  null  :  block.toString());	  sb.append(block.toString());    	compilable	  [FE]  ComparisonFailure  	127	1	replace
1391	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block  ==  null?  null  :  block.toString());	  sb.append(block.toString());    	compilable	  [FE]  ComparisonFailure  	127	1	replace
1392	[BUG]  [BUGGY]  sb.append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block  ==  null?  null  :  block.toString());	  sb.append(block.toString());    	compilable	  [FE]  ComparisonFailure  	127	1	replace
1393	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?').  sb.append('?');  sb.append('?');  [CE]  cannot  find  symbol  sb  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?').  sb.append('?');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('?').  sb.append('?');  sb.append('?');	  	non-compiled	[CE]  cannot  find  symbol  sb	47	None	add
1394	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('?');  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	47	None	add
1395	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('? "');  [CE]  unclosed  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('? "');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('?');  sb.append('? "');	  	non-compiled	[CE]  unclosed  character  literal	47	None	add
1396	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('?');  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('?');  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	47	None	add
1397	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append( "?');  sb.append('?');  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append( "?');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append( "?');  sb.append('?');	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
1398	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append('??');  sb.append('?');  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append('??');  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append('??');  sb.append('?');	  	non-compiled	[CE]  unclosed  character  literal	47	None	add
1399	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('k');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('k');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1400	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('k');  sb.append('e');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('k');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('k');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1401	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('e');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('e');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1402	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('e');  sb.append('e');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('e');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('e');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
1403	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1404	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS   ",  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1405	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS   ",  block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS   ",  block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS   ",  block.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1406	[BUG]  [BUGGY]  sb.append(':');  sb.append( ",  block.charAt(i),  block.charAt(i));  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ",  block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ",  block.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  unclosed  string  literal	201	None	replace
1407	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	add
1408	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1409	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('#');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1410	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	add
1411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1412	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	221	1	add
1413	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('#');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	221	None	add
1414	[BUG]  [BUGGY]  sb.append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append(']');    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1415	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1416	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	186	None	add
1417	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb	  	non-compiled	[CE]  ';'  expected	186	None	add
1418	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	186	None	add
1419	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('N');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('N');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1420	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	186	None	add
1421	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('? "');  sb.append(c);  [CE]  unclosed  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('? "');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('? "');  sb.append(c);	  	non-compiled	[CE]  unclosed  character  literal	216	None	add
1422	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  String  sb.append('?');  sb.append(c);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  String  sb.append('?');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    String  sb.append('?');  sb.append(c);	  	non-compiled	[CE]  ';'  expected	216	None	add
1423	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(char);  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(char);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('?');  sb.append(char);	  	non-compiled	[CE]  '.class'  expected	216	None	add
1424	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(C);  [CE]  cannot  find  symbol  C  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  sb.append(C);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('?');  sb.append(C);	  	non-compiled	[CE]  cannot  find  symbol  C	216	None	add
1425	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('!');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    sb.append('!');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
1426	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('!');  sb.append(c);  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('!');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('!');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
1427	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('??');  sb.append(c);  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('??');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('??');  sb.append(c);	  	non-compiled	[CE]  unclosed  character  literal	216	None	add
1428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	216	1	add
1429	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	216	1	add
1430	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	152	None	add
1431	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  null);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,<null>)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append(':').append(block,  null);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append(':').append(block,  null);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,<null>)	152	None	add
1432	[BUG]  [BUGGY]  sb.append('[');  sb.append(c).append(block.charAt(i)));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(c).append(block.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(c).append(block.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
1433	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i++)));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i++)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i++)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
1434	[BUG]  [BUGGY]  sb.append('[');  sb.append(']').append(block.charAt(i)));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(']').append(block.charAt(i)));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(']').append(block.charAt(i)));	  sb.append('[');    sb.append('[').append(block.charAt(i)));    	non-compiled	[CE]  ';'  expected	138	None	replace
1435	[BUG]  [BUGGY]  sb.append('?').append(block,  i);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  i);	  sb.append('?').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int)	142	None	replace
1436	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n';  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('n');  sb.append('n';  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('n');  sb.append('n';	  	non-compiled	[CE]  ')'  expected	65	None	add
1437	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append('r');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1438	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append('r');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append('r');  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
1439	[BUG]  [BUGGY]  sb.append('N'  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N'  +  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N'  +  block.charAt(i));	  sb.append('N');    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1440	[BUG]  [BUGGY]  sb.append('[');  sb.append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block,  s.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	133	None	replace
1441	[BUG]  [BUGGY]  sb.append('[');  sb.append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block,  block.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
1442	[BUG]  [BUGGY]  sb.append('[');  sb.append(block,  len.charAt(i));  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block,  len.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block,  len.charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  int  cannot  be  dereferenced	133	None	replace
1443	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".] ");	  sb.append(']');    sb.append(   ".]   ");    	compilable	  [FE]  ComparisonFailure  	212	1	replace
1444	[BUG]  [BUGGY]  sb.append( ".] ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".] ");	  sb.append(']');    sb.append(   ".]   ");    	compilable	  [FE]  ComparisonFailure  	212	1	replace
1445	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
1446	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
1447	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append('[')  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[');  sb.append('[').append('[')  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append('[');  sb.append('[').append('[')	  	non-compiled	[CE]  ';'  expected	139	None	add
1448	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('?');  sb.append(c);  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1449	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  sb.append(c);  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1450	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1451	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1452	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1453	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append(']');  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
1454	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.toLowerCase();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  String  sb  =(String)block.toLowerCase();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  String  sb  =(String)block.toLowerCase();	  sb.append('?');    String    sb    =(String)block.clone();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	55	None	replace
1455	[BUG]  [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  sb.append('[').append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    sb.append('[').append(block,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	144	None	add
1456	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1457	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(s.substring(i  +  1,  block.length()));  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1458	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i));  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i));  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(block.charAt(i));  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1459	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1460	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1461	[BUG]  [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('#');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('#');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    String  sb  =  new  String(block.charAt(i).toString());  sb.append('#');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	80	None	add
1462	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
1463	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  String  sb  =(String)block.clone();  sb.append('[');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  String  sb  =(String)block.clone();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  String  sb  =(String)block.clone();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
1464	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  sb.append(c);  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
1465	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  s.length);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  s.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb  =(String)block.clone();  sb.append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  s.length);  }	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	86	None	replace
1466	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ",  block.charAt(i),  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1467	[BUG]  [BUGGY]  sb.append(':',  block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  block.charAt(i),  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
1468	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block,  c);  [CE]  no  suitable  method  found  for  append(String,UnicodeBlock,char)  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  block,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ",  block,  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(String,UnicodeBlock,char)	210	None	replace
1469	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,   ".s.IFJDCS ".charAt(i),  c);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char,char)  [FE]                          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,   ".s.IFJDCS ".charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,   ".s.IFJDCS ".charAt(i),  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char,char)	210	None	replace
1470	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block;  sb.append(block).append('?');  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block;  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block;  sb.append(block).append('?');	  	non-compiled	[CE]  ')'  expected	3	None	add
1471	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block2).append('?');  [CE]  cannot  find  symbol  block2  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block);  sb.append(block2).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block);  sb.append(block2).append('?');	  	non-compiled	[CE]  cannot  find  symbol  block2	3	None	add
1472	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i).toCharArray());	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1473	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(len));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(len));	  sb.append('/'    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
1474	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	229	None	add
1475	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	non-compiled	[CE]  unclosed  string  literal	229	None	add
1476	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1477	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append(']');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append(']');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1478	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1479	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1480	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1481	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1482	[BUG]  [BUGGY]  sb.append(Block.UnicodeBlock.SOURCENAME);  [CE]  package  Block  does  not  exist  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Block.UnicodeBlock.SOURCENAME);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Block.UnicodeBlock.SOURCENAME);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SOURCENAME);    	non-compiled	[CE]  package  Block  does  not  exist	215	None	replace
1483	[BUG]  [BUGGY]  sb.append(Block.UnicodeBlock.SOURCENAME,  c);  [CE]  package  Block  does  not  exist  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Block.UnicodeBlock.SOURCENAME,  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Block.UnicodeBlock.SOURCENAME,  c);	  sb.append(block);    sb.append(    Block.UnicodeBlock.SOURCENAME);    	non-compiled	[CE]  package  Block  does  not  exist	215	None	replace
1484	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('?').append(s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('?').append(s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('?').append(s);	  sb.append('?');    String    sb    =(String)block.clone();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	49	None	replace
1485	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('?',  sb);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('?',  sb);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('?',  sb);	  sb.append('?');    String    sb    =(String)block.clone();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	49	None	replace
1486	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('?!').append(block.toString());  [CE]  unclosed  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('?!').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('?!').append(block.toString());	  	non-compiled	[CE]  unclosed  character  literal	45	None	add
1487	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(block.toString();  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('?').append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('?').append(block.toString();	  	non-compiled	[CE]  ')'  expected	45	None	add
1488	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('!').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block.toString());    sb.append('!').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	45	1	add
1489	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append('!').append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append('!').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append('!').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	45	1	add
1490	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }	  sb.append('[');    sb.append('[').append(']');    	compilable	  [FE]  ComparisonFailure  	137	1	replace
1491	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }	  sb.append('[');    sb.append('[').append(']');    	compilable	  [FE]  ComparisonFailure  	137	1	replace
1492	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  else  {  sb.append(']');  }	  sb.append('[');    sb.append('[').append(']');    	compilable	  [FE]  ComparisonFailure  	137	1	replace
1493	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append('[').append(']');  }  else  {  sb.append(']');  }	  sb.append('[');    sb.append('[').append(']');    	compilable	  [FE]  ComparisonFailure  	137	1	replace
1494	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	132	None	replace
1495	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	132	None	replace
1496	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  chars,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  System.arraycopy(block,  0,  chars,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1497	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  chars,  0,  len);  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  chars,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(block,  0,  chars,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
1498	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c,  len);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c,  len);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1499	[BUG]  [BUGGY]  sb.append(block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  len);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1500	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c  +  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c  +  1);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c  +  1);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1501	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	147	None	replace
1502	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
1503	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  sb.toString());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  sb.toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  sb.toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
1504	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i  +  1));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	147	None	replace
1505	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
1506	[BUG]  [BUGGY]  sb.append('[').append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  block.charAt(i));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
1507	[BUG]  [BUGGY]  sb.append('[').append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  s.charAt(i));	  sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	96	None	replace
1508	[BUG]  [BUGGY]  sb.append('[').append(block  ==  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block  ==  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block  ==  null?  null  :  block.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
1509	[BUG]  [BUGGY]  sb.append('[').append(block!=  null? "null "  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block!=  null? "null "  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block!=  null? "null "  :  block.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
1510	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i),  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i),  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i),  block.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
1511	[BUG]  [BUGGY]  sb.append(':').append(block,  i);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  i);	  sb.append(':').append(block);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int)	153	None	replace
1512	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1513	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1514	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append(':').append(block  ==  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1515	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block  ==  null?  null  :  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block  ==  null?  null  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block  ==  null?  null  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1516	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block  ==  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block  ==  null? "null "  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1517	[BUG]  [BUGGY]  sb.append(':').append(block  ==  null? "null "  :  block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block  ==  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block  ==  null? "null "  :  block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
1518	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append(']');  sb.append(')');  }	  sb.append(']');    sb.append(')');    	compilable	  [FE]  ComparisonFailure  	40	1	replace
1519	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(']');  sb.append(')');  }	  sb.append(']');    sb.append(')');    	compilable	  [FE]  ComparisonFailure  	40	1	replace
1520	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append(']');    sb.append(')');    	compilable	  [FE]  ComparisonFailure  	40	1	replace
1521	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append(']');    sb.append(')');    	compilable	  [FE]  ComparisonFailure  	40	1	replace
1522	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }	  sb.append(']');    sb.append(')');    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
1523	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(block,  0,  sb,  0,  block.length);  }  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(block,  0,  sb,  0,  block.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(']');  sb.append(')');  }  else  {  System.arraycopy(block,  0,  sb,  0,  block.length);  }	  sb.append(']');    sb.append(')');    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
1524	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1525	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1526	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1527	[BUG]  [BUGGY]  sb.append('?').append(block!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  ';'  expected	123	None	replace
1528	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1529	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1530	[BUG]  [BUGGY]  sb.append(block.charAt(i));  continue;  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i));  continue;  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i));  continue;	  sb.append('n');    sb.append('n');    continue;    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
1531	[BUG]  [BUGGY]  sb.append('?').append(block!=  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block!=  null?  null  :  block.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1532	[BUG]  [BUGGY]  sb.append('?').append(block  ==  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block  ==  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block  ==  null?  null  :  block.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1533	[BUG]  [BUGGY]  sb.append('?').append(block,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  block.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1534	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  block.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1535	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  s.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	130	None	replace
1536	[BUG]  [BUGGY]  sb.append('?');  sb.append(block,  char.charAt(i));  [CE]  class  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block,  char.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block,  char.charAt(i));	  sb.append('?');    sb.append(block.charAt(i));    	non-compiled	[CE]  class  expected	130	None	replace
1537	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
1538	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
1539	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	114	None	add
1540	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	114	None	add
1541	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	114	None	add
1542	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1543	[BUG]  [BUGGY]  sb.append(block).append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block).append(':');	  sb.append(block);    sb.append(block).append(':');    	compilable	  [FE]  ComparisonFailure  	11	1	replace
1544	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":' ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ":' ");	  sb.append(':');    sb.append(   ":');    	compilable	  [FE]  ComparisonFailure  	209	1	replace
1545	[BUG]  [BUGGY]  sb.append( ":' ");  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":' ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ":' ");	  sb.append(':');    sb.append(   ":');    	compilable	  [FE]  ComparisonFailure  	209	1	replace
1546	[BUG]  [BUGGY]  sb.append('?').append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  block.charAt(i));	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1547	[BUG]  [BUGGY]  sb.append('?').append(block,  len.charAt(i));  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  len.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  len.charAt(i));	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
1548	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    	compilable	  [FE]  ComparisonFailure  	232	1	replace
1549	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    	compilable	  [FE]  ComparisonFailure  	232	1	replace
1550	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('?').append(block,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	141	None	add
1551	[BUG]  [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block));  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  sb.append('?').append(block));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    sb.append('?').append(block));	  	non-compiled	[CE]  ';'  expected	141	None	add
1552	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1553	[BUG]  [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1554	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( "/prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append( "/prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1555	[BUG]  [BUGGY]  sb.append('?');  sb.append( "/prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( "/prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( "/prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1556	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( "nprototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append( "nprototype.   ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1557	[BUG]  [BUGGY]  sb.append('?');  sb.append( "nprototype.   ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( "nprototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( "nprototype.   ").append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
1558	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	non-compiled	[CE]  unclosed  string  literal	231	None	add
1559	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1560	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1561	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1562	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1563	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1564	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1565	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1566	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
1567	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	54	None	replace
1568	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('n');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('n');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	54	None	replace
1569	[BUG]  [BUGGY]  sb  =  new  String(s.substring(i  +  1,  block.length()));  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb  =  new  String(s.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb  =  new  String(s.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	154	None	replace
1570	[BUG]  [BUGGY]  sb.append(block,  s.substring(i  +  1,  block.length()));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s.substring(i  +  1,  block.length()));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s.substring(i  +  1,  block.length()));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    block.length()));    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
1571	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	59	None	replace
1572	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
1573	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	59	None	replace
1574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[ ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "[ ");	  sb.append('[');    sb.append(   "[');    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1575	[BUG]  [BUGGY]  sb.append( "[ ");  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[ ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "[ ");	  sb.append('[');    sb.append(   "[');    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1576	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
1577	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(':');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
1578	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append( ".]');  sb.append(':');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append( ".]');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append( ".]');  sb.append(':');	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
1579	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append( ".:');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(']');  sb.append( ".:');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(']');  sb.append( ".:');	  	non-compiled	[CE]  unclosed  string  literal	35	None	add
1580	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/').append(block);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
1581	[BUG]  [BUGGY]  sb.append('/').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block);	  sb.append('/'    +    c);    	compilable	  [FE]  ComparisonFailure  	109	1	replace
1582	[BUG]  [BUGGY]  sb.append('/')+  block.charAt(i);  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/')+  block.charAt(i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/')+  block.charAt(i);	  sb.append('/'    +    c);    	non-compiled	[CE]  not  a  statement	109	None	replace
1583	[BUG]  [BUGGY]  sb  =  new  String(s.substring(i  +  1,  len));  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb  =  new  String(s.substring(i  +  1,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb  =  new  String(s.substring(i  +  1,  len));	  sb.append(block);    String    sb    =    new    String(s.substring(i    +    1,    len));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	157	None	replace
1584	[BUG]  [BUGGY]  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb  =  new  String(block.charAt(i),  block.charAt(i));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	150	None	replace
1585	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(':');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append(':');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
1586	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append(':');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(':');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append(':');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
1587	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']');  sb.append( "._');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(']');  sb.append( "._');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append(']');  sb.append( "._');	  	non-compiled	[CE]  unclosed  string  literal	128	None	add
1588	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "]n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "]n ");	  sb.append(   "]   ");    	compilable	  [FE]  ComparisonFailure  	104	1	replace
1589	[BUG]  [BUGGY]  sb.append( "]n ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "]n ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "]n ");	  sb.append(   "]   ");    	compilable	  [FE]  ComparisonFailure  	104	1	replace
1590	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
1591	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');	  	non-compiled	[CE]  reached  end  of  file  while  parsing	118	None	add
1592	[BUG]  [BUGGY]  sb.append(']',  block,  i);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']',  block,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  block,  i);	  sb.append(']',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock,int)	125	None	replace
1593	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
1594	[BUG]  [BUGGY]  sb.append(block).append('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block).append('n');	  sb.append(block);    sb.append(block).append('n');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
1595	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	1	None	add
1596	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block,  sb.toString());  sb.append(block);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block,  sb.toString());  sb.append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    sb.append(block,  sb.toString());  sb.append(block);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,String)	1	None	add
1597	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    sb.append(block);  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
1598	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append('?');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    sb.append(block);  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
1599	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  i);	  	compilable	  [FE]  ArrayStoreException  	1	1	add
1600	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  i);  [FE]  ArrayStoreException  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    sb.append(block);  sb.append(block);  System.arraycopy(chars,  0,  sb,  0,  i);	  	compilable	  [FE]  ArrayStoreException  	1	1	add
1601	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    sb.append(']');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1602	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append(',');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    sb.append(']');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1603	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append('[');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    sb.append(']');  sb.append('[');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1604	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append('[');  sb.append(',');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append(']');  sb.append('[');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    sb.append(']');  sb.append('[');  sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1605	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1606	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append('?');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(block!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
1607	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	23	None	replace
1608	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
1609	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  else  {  sb.append(c);  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	23	None	replace
1610	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
1611	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(block!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  if(block!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  if(block!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	220	None	replace
1612	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
1613	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	149	None	replace
1614	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  ')'  expected	149	None	replace
1615	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  ')'  expected	149	None	replace
1616	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  [CE]  reached  end  of  file  while  parsing  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  else  {  for(int  i  =  0;  i  <  len;  i++)	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  reached  end  of  file  while  parsing	149	None	replace
1617	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block  ==  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block  ==  null? "null "  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
1618	[BUG]  [BUGGY]  sb.append('?').append(block  ==  null? "null "  :  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block  ==  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block  ==  null? "null "  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
1619	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block!=  null? "null "  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
1620	[BUG]  [BUGGY]  sb.append('?').append(block!=  null? "null "  :  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block!=  null? "null "  :  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block!=  null? "null "  :  block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
1621	[BUG]  [BUGGY]  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  unclosed  string  literal	121	None	replace
1622	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }  [CE]  class  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  char.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  class  expected	121	None	replace
1623	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i  +  1));  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i  +  1));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i  +  1));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1624	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
1625	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
1626	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
1627	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	190	None	add
1628	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1629	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1630	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(':');  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append(':');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	190	None	add
1631	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  block,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1632	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  block,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?');  System.arraycopy(block,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?');  System.arraycopy(block,  0,  block,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
1633	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?').System.arraycopy(block,  0,  sb,  0,  len);  [CE]  cannot  find  symbol  System  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append('?').System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append('?').System.arraycopy(block,  0,  sb,  0,  len);	  	non-compiled	[CE]  cannot  find  symbol  System	131	None	add
1634	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('_');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('_');    sb.append('_');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1635	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append('_');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('_');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append('_');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
1636	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[_  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(',');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('_');    sb.append(',');  sb.append('_');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[_  	194	1	add
1637	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append(',');  sb.append('_');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[_  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(',');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append(',');  sb.append('_');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[_  	194	1	add
1638	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[';  sb.append('_');  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append('[';  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append('[';  sb.append('_');	  	non-compiled	[CE]  ')'  expected	194	None	add
1639	[BUG]  [BUGGY]  sb.append('#'  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#'  +  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#'  +  block.charAt(i));	  sb.append('#');    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1640	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ",  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS ",  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS ",  block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
1641	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".IFJDCS   ").append(block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".IFJDCS   ").append(block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".IFJDCS   ").append(block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  cannot  find  symbol	206	None	replace
1642	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  ')'  expected	151	None	replace
1643	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  ')'  expected	151	None	replace
1644	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	151	None	replace
1645	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	151	None	replace
1646	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
1647	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	113	None	replace
1648	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('?');  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  ')'  expected	113	None	replace
1649	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
1650	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  else  {  System.arraycopy(chars,  0,	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1651	[BUG]  [BUGGY]  sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1652	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  block.charAt(i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1653	[BUG]  [BUGGY]  sb.append(':').append(block,  i  +  1)  ==  ':');  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  i  +  1)  ==  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  i  +  1)  ==  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  not  a  statement	160	None	replace
1654	[BUG]  [BUGGY]  sb.append(':').append(block  ==  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block  ==  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block  ==  null?  null  :  block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1655	[BUG]  [BUGGY]  sb.append(':').append(block!=  null? "null "  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block!=  null? "null "  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block!=  null? "null "  :  block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1656	[BUG]  [BUGGY]  sb.append(':').append(block,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  block.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
1657	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1658	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
1659	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block;  sb.append(block).append(':');  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block;  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    sb.append(block;  sb.append(block).append(':');	  	non-compiled	[CE]  ')'  expected	10	None	add
1660	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block2).append(':');  [CE]  cannot  find  symbol  block2  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block2).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    sb.append(block);  sb.append(block2).append(':');	  	non-compiled	[CE]  cannot  find  symbol  block2	10	None	add
1661	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block).append( ".:');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block);  sb.append(block).append( ".:');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    sb.append(block);  sb.append(block).append( ".:');	  	non-compiled	[CE]  unclosed  string  literal	10	None	add
1662	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block,  sb.append(block).append(':');  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  sb.append(block,  sb.append(block).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    sb.append(block,  sb.append(block).append(':');	  	non-compiled	[CE]  ')'  expected	10	None	add
1663	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('-');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1664	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
1665	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('-');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('-');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('-');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
1666	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	188	None	add
1667	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	188	None	add
1668	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
1669	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
1670	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('-');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	188	None	add
1671	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(  Block.toString());  [CE]  cannot  find  symbol  Block  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(  Block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(  Block.toString());	  	non-compiled	[CE]  cannot  find  symbol  Block	16	None	add
1672	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.getString());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.getString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(block.getString());	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
1673	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('[').append('].append(']');  [CE]  unclosed  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append('[');  sb.append('[').append('].append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append('[');  sb.append('[').append('].append(']');	  	non-compiled	[CE]  unclosed  character  literal	136	None	add
1674	[BUG]  [BUGGY]  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1675	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1676	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1677	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
1678	[BUG]  [BUGGY]  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1679	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append('/').append(block,  chars.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1680	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append('/').append(block,  chars[i]);	  sb.append('/');    sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	61	None	replace
1681	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
1682	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
1683	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(':');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append(':');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
1684	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(':');  sb.append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(':');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(':');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
1685	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append( ".]');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append(']');  sb.append( ".]');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append(']');  sb.append( ".]');	  	non-compiled	[CE]  unclosed  string  literal	30	None	add
1686	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(block));  [CE]  no  suitable  method  found  for  of(UnicodeBlock)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(block));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(block));	  	non-compiled	[CE]  no  suitable  method  found  for  of(UnicodeBlock)	82	None	add
1687	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]);  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(chars[i]);	  	non-compiled	[CE]  ')'  expected	82	None	add
1688	[BUG]  [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]),  block);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,UnicodeBlock)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  sb.append(Character.UnicodeBlock.of(chars[i]),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    sb.append(Character.UnicodeBlock.of(chars[i]),  block);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,UnicodeBlock)	82	None	add
1689	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append('[').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append('[').append(block,  chars.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1690	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append('[');  sb.append('[');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	84	None	add
1691	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append('[');  sb.append('[');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append('[');  sb.append('[');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	84	None	add
1692	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1693	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1694	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  sb.append(']');  }	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1695	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  sb.append(']');  }	  sb.append('[');    sb.append('[').append('[');    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1696	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append('[').append('[');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }	  sb.append('[');    sb.append('[').append('[');    	non-compiled	[CE]  cannot  find  symbol  length	140	None	replace
1697	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(! ".s.IFJDCS   ".charAt(i));  [CE]  bad  operand  type  char  for  unary  operator  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append(':');  sb.append(! ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append(':');  sb.append(! ".s.IFJDCS   ".charAt(i));	  	non-compiled	[CE]  bad  operand  type  char  for  unary  operator  	202	None	add
1698	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
1699	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
1700	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
1701	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append(block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append(block.toString());  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	116	None	add
1702	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString()  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString()  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString()	  	non-compiled	[CE]  ')'  expected	116	None	add
1703	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  block.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
1704	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  s.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	218	None	replace
1705	[BUG]  [BUGGY]  sb.append(':');  sb.append(block,  Character.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(block,  Character.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block,  Character.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
1706	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1707	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1708	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1709	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1711	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1712	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  if(sb  ==  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	replace
1713	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/').  sb.append('/');  sb.append('/');  [CE]  cannot  find  symbol  sb  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/').  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/').  sb.append('/');  sb.append('/');	  	non-compiled	[CE]  cannot  find  symbol  sb	56	None	add
1714	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	56	None	add
1715	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	56	None	add
1716	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append( "./');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append( "./');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append( "./');	  	non-compiled	[CE]  unclosed  string  literal	56	None	add
1717	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(sb,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(sb,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');  System.arraycopy(sb,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	56	None	add
1718	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(c,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append('/');  sb.append('/');  System.arraycopy(c,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append('/');  sb.append('/');  System.arraycopy(c,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	56	None	add
1719	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	87	None	replace
1720	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
1721	[BUG]  [BUGGY]  sb.append(block,  Character.UnicodeBlock.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  Character.UnicodeBlock.DEFAULT);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  Character.UnicodeBlock.DEFAULT);	  sb.append(block);    sb.append(    Block.UnicodeBlock.DEFAULT);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	213	None	replace
1722	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ",] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ",] ");	  sb.append(']');    sb.append(   "]');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	41	1	replace
1723	[BUG]  [BUGGY]  sb.append( ",] ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ",] ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ",] ");	  sb.append(']');    sb.append(   "]');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	41	1	replace
1724	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('[');  sb.append(c);  }	  sb.append('[');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	197	1	replace
1725	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('[');  sb.append(c);  }	  sb.append('[');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	197	1	replace
1726	[BUG]  [BUGGY]  sb.append('/').append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  block.charAt(i));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1727	[BUG]  [BUGGY]  sb.append('/').append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  s.charAt(i));	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	106	None	replace
1728	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ").append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ").append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".s.IFJDCS ").append(block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1729	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	add
1730	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
1731	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
1732	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	122	None	add
1733	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb	  	non-compiled	[CE]  ';'  expected	122	None	add
1734	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	122	None	add
1735	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n').  sb.append('f');  [CE]  cannot  find  symbol  sb  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n').  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('n').  sb.append('f');	  	non-compiled	[CE]  cannot  find  symbol  sb	76	None	add
1736	[BUG]  [BUGGY]  sb.append(':').append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  block.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1737	[BUG]  [BUGGY]  sb.append(':').append(block,  len.charAt(i));  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  len.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  len.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	replace
1738	[BUG]  [BUGGY]  sb.append(':').append(block,  Block.charAt(i));  [CE]  cannot  find  symbol  Block  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  Block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  Block.charAt(i));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol  Block	12	None	replace
1739	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    sb.append(c);  sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
1740	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(c);  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(c);  sb.append(':');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	20	1	add
1741	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	20	None	add
1742	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append(':');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append(':');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	20	None	add
1743	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append( ".:');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(':');  sb.append( ".:');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(':');  sb.append( ".:');	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
1744	[BUG]  [BUGGY]  sb.append(chars[block.charAt(i++));  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[block.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  ']'  expected	112	None	replace
1745	[BUG]  [BUGGY]  sb.append(chars[block.charAt(i++)]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[block.charAt(i++)]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[block.charAt(i++)]);	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1746	[BUG]  [BUGGY]  sb.append(block,  block.charAt(i++));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  block.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1747	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append('[').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append('[');    sb.append('[').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1748	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i++));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i++));	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1749	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i).toCharArray());	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1750	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(']');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    sb.append(']');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
1751	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append(']');  sb.append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(']');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append(']');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
1752	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  String  sb.append('[');  sb.append(c);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  String  sb.append('[');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    String  sb.append('[');  sb.append(c);	  	non-compiled	[CE]  ';'  expected	196	None	add
1753	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(char);  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(char);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append('[');  sb.append(char);	  	non-compiled	[CE]  '.class'  expected	196	None	add
1754	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(C);  [CE]  cannot  find  symbol  C  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append('[');  sb.append(C);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append('[');  sb.append(C);	  	non-compiled	[CE]  cannot  find  symbol  C	196	None	add
1755	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append('].');  sb.append(c);  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append('].');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append('].');  sb.append(c);	  	non-compiled	[CE]  unclosed  character  literal	196	None	add
1756	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[0  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(',');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    sb.append(',');  sb.append(c);	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[0  	196	1	add
1757	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append(',');  sb.append(c);  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[0  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(',');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append(',');  sb.append(c);	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[0  	196	1	add
1758	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(c);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
1759	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(c);  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
1760	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1761	[BUG]  [BUGGY]  sb.append(block.charAt(i)).toCharArray();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i)).toCharArray();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i)).toCharArray();	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1762	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	78	None	add
1763	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	78	1	add
1764	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	78	1	add
1765	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(block,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	78	None	add
1766	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(s,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(s,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(s,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	78	None	add
1767	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [CE]  cannot  find  symbol  length  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  block.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  block.length);	  	non-compiled	[CE]  cannot  find  symbol  length	78	None	add
1768	[BUG]  [BUGGY]  sb.append('N');  String  sb  =  new  String(block.toCharArray());  sb.append('N');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  String  sb  =  new  String(block.toCharArray());  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    String  sb  =  new  String(block.toCharArray());  sb.append('N');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	78	None	add
1769	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length());	  	compilable	  [FE]  ArrayStoreException  	78	1	add
1770	[BUG]  [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length());  [FE]  ArrayStoreException  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    sb.append('N');  System.arraycopy(chars,  0,  sb,  0,  sb.length());	  	compilable	  [FE]  ArrayStoreException  	78	1	add
1771	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1772	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1773	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?',  block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?',  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?',  block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1774	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
1775	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
1776	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1777	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  if(sb  >=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	replace
1778	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('k');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('k');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1779	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('k');  sb.append('m');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('k');  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('k');  sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	69	1	add
1780	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n').  sb.append('m');  [CE]  cannot  find  symbol  sb  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n').  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('n').  sb.append('m');	  	non-compiled	[CE]  cannot  find  symbol  sb	69	None	add
1781	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append('[').append(C);  [CE]  cannot  find  symbol  C  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(C);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append('[').append(C);	  	non-compiled	[CE]  cannot  find  symbol  C	98	None	add
1782	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append('[').append(e);  [CE]  cannot  find  symbol  e  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append('[').append(e);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append('[').append(e);	  	non-compiled	[CE]  cannot  find  symbol  e	98	None	add
1783	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append(']').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(c);    sb.append(']').append(c);	  	compilable	  [FE]  ComparisonFailure  	98	1	add
1784	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append(']').append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append(']').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append(']').append(c);	  	compilable	  [FE]  ComparisonFailure  	98	1	add
1785	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }	  sb.append(':');    StringBuilder    sb.append(':');    	non-compiled	[CE]  ';'  expected	28	None	replace
1786	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append(':');    StringBuilder    sb.append(':');    	non-compiled	[CE]  	28	None	replace
1787	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  sb.append(c);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(':');  StringBuilder  sb.append(':');  }  else  {  sb.append(c);  }	  sb.append(':');    StringBuilder    sb.append(':');    	non-compiled	[CE]  ';'  expected	28	None	replace
1788	[BUG]  [BUGGY]  sb.append(block[i].charAt(i));  [CE]  array  required,  but  UnicodeBlock  found  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block[i].charAt(i));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  array  required,  but  UnicodeBlock  found	95	None	replace
1789	[BUG]  [BUGGY]  sb.append(c,  chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  chars[i].charAt(i));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	95	None	replace
1790	[BUG]  [BUGGY]  sb.append('?',  block);  sb.append(block,  false);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  block);  sb.append(block,  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block);  sb.append(block,  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	6	None	replace
1791	[BUG]  [BUGGY]  sb.append(block,  true);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  true);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  true);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	6	None	replace
1792	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(  Block.toString());  [CE]  cannot  find  symbol  Block  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(  Block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append('[').append(  Block.toString());	  	non-compiled	[CE]  cannot  find  symbol  Block	100	None	add
1793	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString();  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append('[').append(block.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append('[').append(block.toString();	  	non-compiled	[CE]  ')'  expected	100	None	add
1794	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
1795	[BUG]  [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	108	None	add
1796	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i));  sb.append('/'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i));  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =  new  String(block.charAt(i));  sb.append('/'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
1797	[BUG]  [BUGGY]  sb.append('/'  +  c);  final  char  c  =  block.charAt(i);  sb.append('/'  +  c);  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  final  char  c  =  block.charAt(i);  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    final  char  c  =  block.charAt(i);  sb.append('/'  +  c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	108	None	add
1798	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =  new  String(block.charAt(i).toString());  sb.append('/'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
1799	[BUG]  [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.toString());  sb.append('/'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  String  sb  =  new  String(block.toString());  sb.append('/'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    String  sb  =  new  String(block.toString());  sb.append('/'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	108	None	add
1800	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	108	1	add
1801	[BUG]  [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    sb.append('/'  +  c);  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	108	1	add
1802	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1803	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i));  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i));  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.charAt(i));  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1804	[BUG]  [BUGGY]  sb.append(':'  +  c);  final  char  c  =  block.charAt(i);  sb.append(':'  +  c);  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  final  char  c  =  block.charAt(i);  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    final  char  c  =  block.charAt(i);  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	18	None	add
1805	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i).toString());  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i).toString());  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.charAt(i).toString());  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1806	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1807	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.toString());  sb.append(':'  +  c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.toString());  sb.append(':'  +  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.toString());  sb.append(':'  +  c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1808	[BUG]  [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    String  sb  =  new  String(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	18	None	add
1809	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    	compilable	  [FE]  ComparisonFailure  	230	1	replace
1810	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    	compilable	  [FE]  ComparisonFailure  	230	1	replace
1811	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	230	None	replace
1812	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(']');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    	compilable	  [FE]  ComparisonFailure  	230	1	replace
1813	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(']');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    	compilable	  [FE]  ComparisonFailure  	230	1	replace
1814	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[]  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(',');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(']');    sb.append(',');  sb.append(']');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[]  	134	1	add
1815	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append(',');  sb.append(']');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[]  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(',');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append(',');  sb.append(']');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[]  	134	1	add
1816	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[';  sb.append(']');  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append('[';  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append('[';  sb.append(']');	  	non-compiled	[CE]  ')'  expected	134	None	add
1817	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
1818	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	146	None	replace
1819	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  else  {  System.arraycopy(chars,  0,  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  else  {  System.arraycopy(chars,  0,  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  else  {  System.arraycopy(chars,  0,	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1820	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
1821	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  ')'  expected	146	None	replace
1822	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i++));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	146	None	replace
1823	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i++));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i++));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1824	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i).toCharArray());	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1825	[BUG]  [BUGGY]  sb.append('/',  block.charAt(len));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(len));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1826	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	148	None	replace
1827	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	148	None	replace
1828	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i).toString();  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  ')'  expected	148	None	replace
1829	[BUG]  [BUGGY]  sb  =  new  String(block.substring(0,  len));  sb.append('?');  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb  =  new  String(block.substring(0,  len));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb  =  new  String(block.substring(0,  len));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	51	None	replace
1830	[BUG]  [BUGGY]  String  sb  =  new  String(block.substring(0,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =  new  String(block.substring(0,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =  new  String(block.substring(0,  len));	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
1831	[BUG]  [BUGGY]  sb.append(block.substring(0,  len));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(0,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(0,  len));	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1832	[BUG]  [BUGGY]  sb.append(block.substring(0,  len));  sb.append('?');  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(0,  len));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(0,  len));  sb.append('?');	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1833	[BUG]  [BUGGY]  sb.append(block.substring(0,  i));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.substring(0,  i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.substring(0,  i));	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1834	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
1835	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
1836	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	182	None	add
1837	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	182	None	add
1838	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	182	None	add
1839	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb	  	non-compiled	[CE]  ';'  expected	182	None	add
1840	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1841	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1842	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1843	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
1844	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	219	1	add
1845	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	219	1	add
1846	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append( "/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unclosed  string  literal	219	None	add
1847	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	219	1	add
1848	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	219	1	add
1849	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".s.IFJDCS ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
1850	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ").append(':');  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".s.IFJDCS ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
1851	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[IFJDCS] ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "[IFJDCS] ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
1852	[BUG]  [BUGGY]  sb.append( "[IFJDCS] ").append(':');  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "[IFJDCS] ").append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "[IFJDCS] ").append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
1853	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "n ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "n ".charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  StringIndexOutOfBoundsException  	205	1	replace
1854	[BUG]  [BUGGY]  sb.append( "n ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "n ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "n ".charAt(i)).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  StringIndexOutOfBoundsException  	205	1	replace
1855	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS??  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS??  	170	1	add
1856	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS??  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS??  	170	1	add
1857	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append('?');  sb.append(. ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	non-compiled	[CE]  illegal  start  of  expression	170	None	add
1858	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  System.arraycopy(chars,  0,  block,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
1859	[BUG]  [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  block,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  block,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  System.arraycopy(chars,  0,  block,  0,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
1860	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  }	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
1861	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  }  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  }	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
1862	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);  }  [CE]  cannot  find  symbol  length  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  block.length);  }	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	208	None	replace
1863	[BUG]  [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]          ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	non-compiled	[CE]  cannot  find  symbol  length	208	None	replace
1864	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']').append(block);	  sb.append('[').append(c);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
1865	[BUG]  [BUGGY]  sb.append(']').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block);	  sb.append('[').append(c);    	compilable	  [FE]  ComparisonFailure  	99	1	replace
1866	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ", ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	177	1	replace
1867	[BUG]  [BUGGY]  sb.append( ", ").append(c).append('?');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ", ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	177	1	replace
1868	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "/.prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "/.prototype.   ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
1869	[BUG]  [BUGGY]  sb.append( "/.prototype.   ").append(c).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "/.prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "/.prototype.   ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
1870	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(block.charAt(i)).append('?');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(block.charAt(i)).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ".prototype.   ").append(block.charAt(i)).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1871	[BUG]  [BUGGY]  sb.append(block,  chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars[i],  block.charAt(i));	  sb.append(block,    chars.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1872	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1873	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('?');  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	50	None	replace
1874	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
1875	[BUG]  [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(s.length()  ==  0)  {  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  }  else  {  for(int  i  =  0;  i  <  len;  i++)  {  	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
1876	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
1877	[BUG]  [BUGGY]  sb.append(block).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block).append('?');	  sb.append(block);    sb.append(block).append('?');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
1878	[BUG]  [BUGGY]  sb.append(block,  c).append('?');  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  c).append('?');	  sb.append(block);    sb.append(block).append('?');    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	4	None	replace
1879	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1880	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1881	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  if(sb  ==  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1882	[BUG]  [BUGGY]  sb.append('/').append(block!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  ';'  expected	224	None	replace
1883	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1884	[BUG]  [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  block.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  block.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(block!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  block.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	224	None	replace
1885	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n').  sb.append('k');  [CE]  cannot  find  symbol  sb  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n').  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n').  sb.append('k');	  	non-compiled	[CE]  cannot  find  symbol  sb	163	None	add
1886	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  chars.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1887	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  c.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	24	None	replace
1888	[BUG]  [BUGGY]  sb.append(block.charAt(i,  i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i,  i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i,  i));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1889	[BUG]  [BUGGY]  sb.append(block.charAt(i,  0));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i,  0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i,  0));	  sb.append(block.charAt(i,    len));    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1890	[BUG]  [BUGGY]  sb.append( ": ").append(block.charAt(0));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ").append(block.charAt(0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ").append(block.charAt(0));	  sb.append(   ":   ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1891	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "/.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "/.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
1892	[BUG]  [BUGGY]  sb.append( "/.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( "/.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "/.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
1893	[BUG]  [BUGGY]  sb.append('?').append(block.toCharArray()).append('?');  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toCharArray()).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toCharArray()).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1894	[BUG]  [BUGGY]  sb.append('?').append(block.getName()).append('?');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.getName()).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.getName()).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1895	[BUG]  [BUGGY]  sb.append('?',  i);  [CE]  no  suitable  method  found  for  append(char,int)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  i);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,int)	44	None	replace
1896	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i);  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i);	  sb.append(':'    +    c);    	non-compiled	[CE]  ')'  expected	19	None	replace
1897	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	223	None	add
1898	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
1899	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
1900	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	223	1	add
1901	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	223	1	add
1902	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(	  	non-compiled	[CE]  ')'  expected	223	None	add
1903	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb	  	non-compiled	[CE]  ';'  expected	223	None	add
1904	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(... ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  sb.append('?');  sb.append(... ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    sb.append('?');  sb.append(... ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);	  	non-compiled	[CE]  illegal  start  of  expression	174	None	add
1905	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb.append('/').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
1906	[BUG]  [BUGGY]  sb  =  new  String(block.toCharArray());  sb.append(':');  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb  =  new  String(block.toCharArray());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb  =  new  String(block.toCharArray());  sb.append(':');	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	158	None	replace
1907	[BUG]  [BUGGY]  final  String  sb  =  new  String(block.toCharArray());  final  String  sb  =  new  String(s.toCharArray());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  final  String  sb  =  new  String(block.toCharArray());  final  String  sb  =  new  String(s.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	final  String  sb  =  new  String(block.toCharArray());  final  String  sb  =  new  String(s.toCharArray());	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	158	None	replace
1908	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(c);  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(c);  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(c);  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	227	None	add
1909	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append( "./ ");  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append( "./ ");  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1910	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append( "./ ");  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append( "./ ");  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append( "./ ");  if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1911	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');	  	non-compiled	[CE]  reached  end  of  file  while  parsing	227	None	add
1912	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1913	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  continue;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	227	1	add
1914	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append(':',  sb);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append(':',  sb);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append(':',  sb);	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	22	None	replace
1915	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append(':').append(s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append(':').append(s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append(':').append(s);	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	22	None	replace
1916	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    	compilable	  [FE]  ComparisonFailure  	222	1	replace
1917	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    	compilable	  [FE]  ComparisonFailure  	222	1	replace
1918	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append(':'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    sb.append(':'  +  block.toString());	  	compilable	  [FE]  ComparisonFailure  	168	1	add
1919	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append(':'  +  block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append(':'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append(':'  +  block.toString());	  	compilable	  [FE]  ComparisonFailure  	168	1	add
1920	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  blocks.toString());  [CE]  cannot  find  symbol  blocks  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  blocks.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  blocks.toString());	  	non-compiled	[CE]  cannot  find  symbol  blocks	168	None	add
1921	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  String  sb  =  new  String('/'  +  block.toString());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  String  sb  =  new  String('/'  +  block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    String  sb  =  new  String('/'  +  block.toString());	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	168	None	add
1922	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.getName());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  sb.append('/'  +  block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    sb.append('/'  +  block.getName());	  	non-compiled	[CE]  cannot  find  symbol	168	None	add
1923	[BUG]  [BUGGY]  sb.append('[').append(block.substring(1));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.substring(1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.substring(1));	  sb.append('[');    sb.append(   ".[');    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1924	[BUG]  [BUGGY]  sb.append('?');  sb.append('?').append(block,  c.charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append('?').append(block,  c.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append('?').append(block,  c.charAt(i));	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	52	None	replace
1925	[BUG]  [BUGGY]  sb.append('?');  sb.append('?').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append('?').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append('?').append(block,  chars[i]);	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	52	None	replace
1926	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block;  sb.append(block).append('n');  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block;  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block;  sb.append(block).append('n');	  	non-compiled	[CE]  ')'  expected	7	None	add
1927	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('N');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
1928	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('N');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block).append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block).append('N');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
1929	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  chars[i]);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	173	None	replace
1930	[BUG]  [BUGGY]  sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c).append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1931	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  Character.UnicodeBlock.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  Character.UnicodeBlock.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block,  Character.UnicodeBlock.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
1932	[BUG]  [BUGGY]  sb.append(']').append(block,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  block.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1933	[BUG]  [BUGGY]  sb.append(']').append(block  ==  null?  null  :  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block  ==  null?  null  :  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block  ==  null?  null  :  block.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1934	[BUG]  [BUGGY]  sb.append(']').append(block,  s.toCharArray());  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  s.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  s.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])	105	None	replace
1935	[BUG]  [BUGGY]  sb.append(']').append(block,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  block.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1936	[BUG]  [BUGGY]  sb.append(']').append(block,  s.charAt(i));  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  s.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  s.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	102	None	replace
1937	[BUG]  [BUGGY]  sb.append(']').append(block,  Block.charAt(i));  [CE]  cannot  find  symbol  Block  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  Block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  Block.charAt(i));	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol  Block	102	None	replace
1938	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(c);  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(c);  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	add
1939	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  }	  	non-compiled	[CE]  cannot  find  symbol  length	184	None	add
1940	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');	  	non-compiled	[CE]  reached  end  of  file  while  parsing	184	None	add
1941	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
1942	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  continue;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
1943	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append( "n');  if(sb!=  null)  {  sb.append('n');  }  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append( "n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append( "n');  if(sb!=  null)  {  sb.append('n');  }	  	non-compiled	[CE]  unclosed  string  literal	184	None	add
1944	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	180	None	add
1945	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [CE]  illegal  line  end  in  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('	  	non-compiled	[CE]  illegal  line  end  in  character  literal	180	None	add
1946	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1947	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
1948	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	180	None	add
1949	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1950	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append( "/ ");  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1951	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1952	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1953	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1954	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append(':');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
1955	[BUG]  [BUGGY]  sb.append(block!=  null?  null  :  block.getName());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block!=  null?  null  :  block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block!=  null?  null  :  block.getName());	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
1956	[BUG]  [BUGGY]  sb.append(block,  block.getName());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  block.getName());	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
1957	[BUG]  [BUGGY]  sb.append(block.getName(),  i);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.getName(),  i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.getName(),  i);	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
1958	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  c.toLowerCase());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  c.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  c.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  char  cannot  be  dereferenced	159	None	replace
1959	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toLowerCase());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block!=  null?  null  :  block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1960	[BUG]  [BUGGY]  sb.append(':').append(block,  0,  block.toLowerCase());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  0,  block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  0,  block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1961	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  chars.charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
1962	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1963	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	115	1	replace
1964	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append( ".:').append(block.toString());  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append( ".:').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append( ".:').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
1965	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append( ":').append(block.toString());  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append( ":').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append( ":').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
1966	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.getName());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.toString());  sb.append(':').append(block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());    sb.append(':').append(block.getName());	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
1967	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	224	1	replace
1968	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	224	1	replace
1969	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.charAt(i));  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
1970	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.toString());  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	224	1	replace
1971	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block.toString());  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	224	1	replace
1972	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block,  c);  }  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block,  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(block,  c);  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	224	None	replace
1973	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
1974	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	compilable	  [FE]  ComparisonFailure  	123	1	replace
1975	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  c);  }  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  c);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	123	None	replace
1976	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('_');	  sb.append('[');    sb.append('_');    	compilable	  [FE]  ComparisonFailure  	195	1	replace
1977	[BUG]  [BUGGY]  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('_');	  sb.append('[');    sb.append('_');    	compilable	  [FE]  ComparisonFailure  	195	1	replace
1978	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append(c);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    sb.append(c);  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
1979	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append(c);  sb.append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append(c);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append(c);  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
1980	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append( "? ");  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    sb.append( "? ");  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
1981	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append( "? ");  sb.append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append( "? ");  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append( "? ");  sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	47	1	add
1982	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append('?');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('?');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	1	add
1983	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('?');  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('?');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	1	add
1984	[BUG]  [BUGGY]  sb.append('?');    sb.append('?');  sb.append(char);  sb.append('?');  [CE]  '.class'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append('?');  sb.append(char);  sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append('?');    sb.append(char);  sb.append('?');	  	non-compiled	[CE]  '.class'  expected	47	None	add
1985	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(c);  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[');    sb.append(c);  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1986	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append(c);  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(c);  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append(c);  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	84	1	add
1987	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append(char);  sb.append('[');  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(char);  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append(char);  sb.append('[');	  	non-compiled	[CE]  '.class'  expected	84	None	add
1988	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[[  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(',');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[');    sb.append(',');  sb.append('[');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[[  	84	1	add
1989	[BUG]  [BUGGY]  sb.append('[');    sb.append('[');  sb.append(',');  sb.append('[');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[[  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[');  sb.append(',');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[');    sb.append(',');  sb.append('[');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[[  	84	1	add
1990	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1991	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1992	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1993	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1994	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1995	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	229	1	add
1996	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	229	None	add
1997	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('].');  }  [CE]  unclosed  character  literal  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('].');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(']');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('].');  }	  	non-compiled	[CE]  unclosed  character  literal	229	None	add
1998	[BUG]  [BUGGY]  sb.append(block,  chars[i],  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char,boolean)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  chars[i],  false);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars[i],  false);	  sb.append(block);    sb.append(block,    false);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char,boolean)	6	None	replace
1999	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    	compilable	  [FE]  ComparisonFailure  	232	1	replace
2000	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    	compilable	  [FE]  ComparisonFailure  	232	1	replace
2001	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.toString()).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append(block.toString()).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
2002	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.toString()).append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(block.toString()).append(Character.UnicodeBlock.SPECIALS);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.toString()).append(Character.UnicodeBlock.SPECIALS);	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS);    	compilable	  [FE]  ComparisonFailure  	175	1	replace
2003	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  continue;  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
2004	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  continue;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  continue;  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	228	1	replace
2005	[BUG]  [BUGGY]  sb.append('[');  sb.append(chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(chars[i].charAt(i));	  sb.append('[');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	133	None	replace
2006	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2007	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2008	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2009	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2010	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('? "');  }  [CE]  unclosed  character  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('? "');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('? "');  }	  	non-compiled	[CE]  unclosed  character  literal	178	None	add
2011	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2012	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('?');    }    sb.append('n');  if(sb!=  null)  {  sb.append('m');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	178	1	add
2013	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  sb.append( "?').append(block.toString());  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.toString());  sb.append( "?').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());    sb.append( "?').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
2014	[BUG]  [BUGGY]  sb.append(block,  0,  chars.length);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  0,  chars.length);	  sb.append(block);    sb.append(block,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)	9	None	replace
2015	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2016	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2017	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append('f');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append('f');  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2018	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append('f');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append('f');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append('f');  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2019	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    sb.append('n');  sb.append('f');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2020	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  sb.append('n');  sb.append('f');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    sb.append('n');  sb.append('f');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2021	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2022	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  sb.append('m');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2023	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2024	[BUG]  [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('f');  if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('f');    if(sb!=  null)  {  sb.append('n');  sb.append('f');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	76	1	add
2025	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2026	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2027	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2028	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2029	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('/').append(block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2030	[BUG]  [BUGGY]  sb.append(c).append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('/').append(block.toString());	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2031	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  else  {  sb.append('/');  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2032	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append('/').append(block.toString());  }  else  {  sb.append('/');  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2033	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  sb.append(c);  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2034	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append('/');  sb.append('/').append(block.toString());  }  else  {  sb.append(c);  }	  sb.append('/');    sb.append('/').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	64	1	replace
2035	[BUG]  [BUGGY]  sb.append(block.charAt(0));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(0));	  sb.append(':');    sb.append(':');    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
2036	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2037	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2038	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2039	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  continue;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2040	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2041	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(':');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	231	1	add
2042	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i),  c);	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2043	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i,  len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i,  len));	  sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2044	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2045	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]    org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2046	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append(']');  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2047	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append('[');  sb.append(',');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]      org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append('[');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append(']');  sb.append('[');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2048	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append(']');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2049	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append(',');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]        org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append(']');  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append(']');  sb.append(',');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2050	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  sb.append( "[');  sb.append(',');  [CE]  unclosed  string  literal  [FE]          org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  sb.append( "[');  sb.append(',');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    sb.append( "[');  sb.append(',');	  	non-compiled	[CE]  unclosed  string  literal	198	None	add
2051	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2052	[BUG]  [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(',');  if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(',');    if(sb!=  null)  {  sb.append('[');  sb.append(',');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	198	1	add
2053	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( "? ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( "? ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2054	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( "? ");  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( "? ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( "? ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2055	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ".s.IFJDCS ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( ".s.IFJDCS ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2056	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ".s.IFJDCS ");  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ".s.IFJDCS ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( ".s.IFJDCS ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2057	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ": ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( ": ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2058	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ": ");  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]        ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  sb.append( ": ");  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    sb.append( ": ");  System.arraycopy(block,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	131	1	add
2059	[BUG]  [BUGGY]  sb.append('?').append(block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.charAt(i),  len);	  sb.append('?');    sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
2060	[BUG]  [BUGGY]  sb.append(':');  sb.append(chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(chars[i].charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(chars[i].charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	218	None	replace
2061	[BUG]  [BUGGY]  sb.append(':');  sb.append(c,  block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(c,  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(c,  block.charAt(i));	  sb.append(':');    sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
2062	[BUG]  [BUGGY]  sb.append('/').append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.charAt(i),  c);	  sb.append('/').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
2063	[BUG]  [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  final  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  final  String  sb  =(String)block.clone();	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	22	None	replace
2064	[BUG]  [BUGGY]  sb.append(':').append(block,  chars.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
2065	[BUG]  [BUGGY]  sb.append(':').append(block,  s.toCharArray());  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  s.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  s.toCharArray());	  sb.append(':').append(block.toCharArray());    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])	13	None	replace
2066	[BUG]  [BUGGY]  sb.append('/').append(block,  chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  chars[i],  block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
2067	[BUG]  [BUGGY]  sb.append('/').append(block,  chars[i]).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/').append(block,  chars[i]).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block,  chars[i]).append(block.charAt(i));	  sb.append('/');    sb.append('/').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
2068	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS   ",  chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS   ",  chars[i],  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
2069	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".charAt(i),  block.charAt(i));  [CE]  unclosed  string  literal  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".charAt(i),  block.charAt(i));	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    block.charAt(i));    	non-compiled	[CE]  unclosed  string  literal	201	None	replace
2070	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
2071	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
2072	[BUG]  [BUGGY]  sb.append('?').append(c).append('?')  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append('?')  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c).append('?')  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  ';'  expected	117	None	replace
2073	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  continue;  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
2074	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  continue;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  continue;  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	compilable	  [FE]  ComparisonFailure  	117	1	replace
2075	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(block.toString());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    	non-compiled	[CE]  unclosed  character  literal	117	None	replace
2076	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb  =(String)block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	59	None	replace
2077	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	59	None	replace
2078	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb.append(block.getValue());  sb.append('/');  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb.append(block.getValue());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb.append(block.getValue());  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
2079	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =  block.getValue();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =  block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb  =  block.getValue();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.getValue();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	59	None	replace
2080	[BUG]  [BUGGY]  sb.append('?').append(block,  chars.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  chars.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  chars.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
2081	[BUG]  [BUGGY]  sb.append('?').append(block,  s.toCharArray());  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block,  s.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block,  s.toCharArray());	  sb.append('?').append(block.toCharArray());    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char[])	43	None	replace
2082	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(c);  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append(c);  sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2083	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append(c);  sb.append(']');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append(c);  sb.append(']');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append(c);  sb.append(']');  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2084	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append( ".] ");  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append( ".] ");  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2085	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append( ".] ");  sb.append('_');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append( ".] ");  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append( ".] ");  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2086	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append( "._ ");  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('_');    sb.append( "._ ");  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2087	[BUG]  [BUGGY]  sb.append(']');    sb.append('_');  sb.append( "._ ");  sb.append('_');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('_');  sb.append( "._ ");  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('_');    sb.append( "._ ");  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	128	1	add
2088	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2089	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2090	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2091	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2092	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    sb.append('n');  sb.append('m');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2093	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  sb.append('n');  sb.append('m');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    sb.append('n');  sb.append('m');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2094	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2095	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2096	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2097	[BUG]  [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  continue;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('m');  if(sb!=  null)  {  sb.append('n');  sb.append('m');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('m');    if(sb!=  null)  {  sb.append('n');  sb.append('m');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	69	1	add
2098	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2099	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2100	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2101	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    if(sb!=  null)  {  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  }	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2102	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2103	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	225	1	add
2104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toUpperCase(c)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(Character.toUpperCase(c)).append(':');	  sb.append(':');    StringBuilder    sb.append(':');    	compilable	  [FE]  ComparisonFailure  	28	1	replace
2105	[BUG]  [BUGGY]  sb.append(Character.toUpperCase(c)).append(':');  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(Character.toUpperCase(c)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(Character.toUpperCase(c)).append(':');	  sb.append(':');    StringBuilder    sb.append(':');    	compilable	  [FE]  ComparisonFailure  	28	1	replace
2106	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
2107	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
2108	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	149	None	replace
2109	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  final  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  final  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  final  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	149	None	replace
2110	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i).toString());  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
2111	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block,  sb.append(block).append('n');  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block,  sb.append(block).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block,  sb.append(block).append('n');	  	non-compiled	[CE]  ')'  expected	7	None	add
2112	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block2).append('n');  [CE]  cannot  find  symbol  block2  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('n');  sb.append(block);  sb.append(block2).append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('n');    sb.append(block);  sb.append(block2).append('n');	  	non-compiled	[CE]  cannot  find  symbol  block2	7	None	add
2113	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2114	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2115	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('#'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('#'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2116	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('#'  +  block.toString());  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('#'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('#'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2117	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  continue;  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2118	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  continue;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('/'  +  block.toString());  continue;  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2119	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append(':'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append(':'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2120	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append(':'  +  block.toString());  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append(':'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append(':'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2122	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('?'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('?'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2124	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('?'  +  block.toString());  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('?'  +  block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  sb.append('?'  +  block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2126	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.toString());  if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    block.toString());    if(sb!=  null)  {  sb.append('/'  +  block.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	168	1	add
2127	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ", ");	  sb.append('[');    sb.append(   ".[');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	193	1	replace
2128	[BUG]  [BUGGY]  sb.append( ", ");  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ", ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ", ");	  sb.append('[');    sb.append(   ".[');    	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[  	193	1	replace
2129	[BUG]  [BUGGY]  sb.append('/',  block.charAt(len  -  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(len  -  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(len  -  1));	  sb.append('/',    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
2130	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append(':   ");  [CE]  unclosed  character  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(':   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append(':   ");	  	non-compiled	[CE]  unclosed  character  literal	14	None	add
2131	[BUG]  [BUGGY]  sb.append(   ":   ");  sb.append(... ":   ");  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(   ":   ");  sb.append(... ":   ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(   ":   ");    sb.append(... ":   ");	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
2132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2133	[BUG]  [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2135	[BUG]  [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2137	[BUG]  [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2138	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2139	[BUG]  [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2141	[BUG]  [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block.toString()!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2142	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());    if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2143	[BUG]  [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.toString());  if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());    if(block!=  null)  {  sb.append(block.toString());  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	126	1	add
2144	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
2145	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =  block.clone();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =  block.clone();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb  =  block.clone();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	58	None	replace
2146	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  sb  =(String)block.clone();  sb.append('/');  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	58	None	replace
2147	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  }  else  {  sb.append(c);  }	  sb.append('/');    String    sb    =(String)block.clone();    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	58	None	replace
2148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
2149	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  }	  	compilable	  [FE]  ComparisonFailure  	114	1	add
2150	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append('?');  }	  	non-compiled	[CE]  unclosed  character  literal	114	None	add
2151	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	114	1	add
2152	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append('?');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	114	1	add
2153	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(Character.toUpperCase(c));	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
2154	[BUG]  [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	StringBuilder  sb  =  new  StringBuilder(Character.toLowerCase(c));	          StringBuilder    sb    =    new    StringBuilder();    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	29	None	replace
2155	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i  +  1),  ':');  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(i  +  1),  ':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i  +  1),  ':');	  sb.append(':');    sb.append(':').append(block.charAt(i    +    1)    ==    ':');    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
2156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append(':');    if(sb!=  null)  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
2157	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append(':');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append(':');    if(sb!=  null)  {  sb.append(block);  sb.append(block).append(':');  }	  	compilable	  [FE]  ComparisonFailure  	10	1	add
2158	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(char);  sb.append('[').append('[');  [CE]  '.class'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(char);  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append(char);  sb.append('[').append('[');	  	non-compiled	[CE]  '.class'  expected	139	None	add
2159	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(c);  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append('[');    sb.append(c);  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
2160	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(c);  sb.append('[').append('[');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append(c);  sb.append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append(c);  sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
2161	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[').append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append('[');    sb.append('[').append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
2162	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[').append('[').append('[');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append('[');  sb.append('[').append('[').append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append('[');    sb.append('[').append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	139	1	add
2163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/').append(block.toString());  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2164	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/').append(block.toString());  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append(c);  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    sb.append(c);  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2166	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append(c);  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append(c);  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append(c);  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "./ ");  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/').append(block.toString());    sb.append( "./ ");  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2168	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "./ ");  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append( "./ ");  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append( "./ ");  sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	63	1	add
2169	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append(char);  sb.append('/').append(block.toString());  [CE]  '.class'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append(char);  sb.append('/').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append(char);  sb.append('/').append(block.toString());	  	non-compiled	[CE]  '.class'  expected	63	None	add
2170	[BUG]  [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.getText());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/').append(block.toString());  sb.append('/');  sb.append('/').append(block.getText());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/').append(block.toString());    sb.append('/');  sb.append('/').append(block.getText());	  	non-compiled	[CE]  cannot  find  symbol	63	None	add
2171	[BUG]  [BUGGY]  sb.append(']').append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block.charAt(i),  c);	  sb.append(']').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
2172	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.clone();  sb.append( ":n ");  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.clone();  sb.append( ":n ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.clone();  sb.append( ":n ");  }	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":n   ");    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	161	None	replace
2173	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =  block.clone();  sb.append( ":n ");  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =  block.clone();  sb.append( ":n ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':');  sb  =  block.clone();  sb.append( ":n ");  }	  sb.append(':');    String    sb    =(String)block.clone();    sb.append(   ":n   ");    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	161	None	replace
2174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ". ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ". ");	  sb.append(']');    sb.append(   ".]   ");    	compilable	  [FE]  ComparisonFailure  	212	1	replace
2175	[BUG]  [BUGGY]  sb.append( ". ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ". ");  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ". ");	  sb.append(']');    sb.append(   ".]   ");    	compilable	  [FE]  ComparisonFailure  	212	1	replace
2176	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c,  block.toCharArray());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i),  c,  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c,  block.toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
2177	[BUG]  [BUGGY]  sb.append(chars.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars.charAt(i).toCharArray());	  sb.append(block.charAt(i).toCharArray());    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
2178	[BUG]  [BUGGY]  sb.append('[').append(block.getName());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.getName());	  sb.append('[').append(block.toString());    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
2179	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('[').append(block);	  sb.append('[').append(block);    	compilable	  [FE]  ComparisonFailure  	145	1	replace
2180	[BUG]  [BUGGY]  sb.append(c).append('[').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('[').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('[').append(block);	  sb.append('[').append(block);    	compilable	  [FE]  ComparisonFailure  	145	1	replace
2181	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  System.arraycopy(chars,  0,  sb,  1,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
2182	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  1,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(chars,  0,  sb,  1,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	132	1	replace
2183	[BUG]  [BUGGY]  sb.append('?',  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?',  c);  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  c);  System.arraycopy(chars,  0,  sb,  0,  len);	  sb.append('?');    System.arraycopy(block,    0,    sb,    0,    len);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	132	None	replace
2184	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i).toString());	  sb.append('/'    +    block.toString());    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
2185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(sb!=  null)  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2186	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(sb!=  null)  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2188	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(sb!=  null)  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2189	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append(c);  sb.append('?');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    sb.append(c);  sb.append('?');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2190	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  sb.append(c);  sb.append('?');  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  sb.append(c);  sb.append('?');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    sb.append(c);  sb.append('?');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2192	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(block);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c);  if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append(c);    if(!Character.isISOControl(c))  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('?');  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	216	1	add
2193	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
2194	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	147	None	replace
2195	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	147	None	replace
2196	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i));  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
2197	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i  +  1));  sb.append('/');  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i  +  1));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i  +  1));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
2198	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block).append('?');    if(sb!=  null)  {  sb.append(block);  sb.append(block).append('?');  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
2199	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  if(sb!=  null)  {  sb.append(block);  sb.append(block).append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    if(sb!=  null)  {  sb.append(block);  sb.append(block).append('?');  }	  	compilable	  [FE]  ComparisonFailure  	3	1	add
2200	[BUG]  [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block,  sb.append(block).append('?');  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block).append('?');  sb.append(block,  sb.append(block).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block).append('?');    sb.append(block,  sb.append(block).append('?');	  	non-compiled	[CE]  ')'  expected	3	None	add
2201	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2202	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2203	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2204	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append('n');  if(sb!=  null)  {  sb.append(':');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2206	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(':');    }    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	190	1	add
2207	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i),  len);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.charAt(i),  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i),  len);	  sb.append('[');    sb.append('[').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
2208	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2209	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  chars.charAt(i));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  chars.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block,  chars.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2210	[BUG]  [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  s.charAt(i));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  }  else  {  sb.append(block,  s.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  }  else  {  sb.append(block,  s.charAt(i));  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
2211	[BUG]  [BUGGY]  sb.append('?');  return  sb.toString();  [CE]  unreachable  statement  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  return  sb.toString();	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.charAt(i));    }    	non-compiled	[CE]  unreachable  statement	121	None	replace
2212	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(chars[i]);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(chars[i]);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
2213	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(chars[i]);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(chars[i]);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(chars[i]);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
2214	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(c);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
2215	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]      ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(c);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    sb.append(c);  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	207	1	add
2216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('f');	  sb.append('n');    sb.append('f');    	compilable	  [FE]  ComparisonFailure  	77	1	replace
2217	[BUG]  [BUGGY]  sb.append('f');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('f');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('f');	  sb.append('n');    sb.append('f');    	compilable	  [FE]  ComparisonFailure  	77	1	replace
2218	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ". ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ". ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
2219	[BUG]  [BUGGY]  sb.append( ". ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ". ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ". ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
2220	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":: ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ":: ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
2221	[BUG]  [BUGGY]  sb.append( ":: ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":: ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ":: ").append(Character.UnicodeBlock.SPECIALS).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    	compilable	  [FE]  ComparisonFailure  	171	1	replace
2222	[BUG]  [BUGGY]  sb.append('[').append(block,  chars.toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block,  chars.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block,  chars.toCharArray());	  sb.append('[').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
2223	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	226	1	replace
2224	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('/');    }    	compilable	  [FE]  ComparisonFailure  	226	1	replace
2225	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append(block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
2226	[BUG]  [BUGGY]  sb.append(c).append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append(block.toString());	  sb.append('?').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	46	1	replace
2227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('m');	  sb.append('n');    sb.append('m');    	compilable	  [FE]  ComparisonFailure  	70	1	replace
2228	[BUG]  [BUGGY]  sb.append('m');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('m');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('m');	  sb.append('n');    sb.append('m');    	compilable	  [FE]  ComparisonFailure  	70	1	replace
2229	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  sb.append(block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.charAt(i).toCharArray());	  sb.append('[');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
2230	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  incomparable  types:  char  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2231	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }  [CE]  incomparable  types:  char  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2232	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }  [CE]  incomparable  types:  char  and  <null>  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2233	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.of(c));  }  [CE]  incomparable  types:  char  and  <null>  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.of(c));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.of(c));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2234	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [CE]  incomparable  types:  char  and  <null>  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2235	[BUG]  [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.toString(c));  }  [CE]  incomparable  types:  char  and  <null>  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i]);  if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.toString(c));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);    if(chars[i]!=  null)  {  sb.append('?');  }  else  {  sb.append(Character.UnicodeBlock.toString(c));  }	  	non-compiled	[CE]  incomparable  types:  char  and  <null>	82	None	add
2236	[BUG]  [BUGGY]  sb.append('?').append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block.charAt(i),  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.charAt(i),  c);	  sb.append('?').append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
2237	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append(c);  sb.append('n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    sb.append(c);  sb.append('n');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2238	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append(c);  sb.append('n');  sb.append('N');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append(c);  sb.append('n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append(c);  sb.append('n');  sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2239	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    if(sb!=  null)  {  sb.append('n');  sb.append('N');  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2240	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    if(sb!=  null)  {  sb.append('n');  sb.append('N');  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2241	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  sb.append( "n');  sb.append('N');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  sb.append( "n');  sb.append('N');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    sb.append( "n');  sb.append('N');	  	non-compiled	[CE]  unclosed  string  literal	73	None	add
2242	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('N');    if(sb!=  null)  {  sb.append('n');  sb.append('N');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2243	[BUG]  [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  continue;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('N');  if(sb!=  null)  {  sb.append('n');  sb.append('N');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('N');    if(sb!=  null)  {  sb.append('n');  sb.append('N');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	73	1	add
2244	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append(c);  sb.append('n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('r');    sb.append(c);  sb.append('n');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
2245	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append(c);  sb.append('n');  sb.append('r');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append(c);  sb.append('n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append(c);  sb.append('n');  sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	71	1	add
2246	[BUG]  [BUGGY]  sb.append('n');    sb.append('r');  sb.append( "n');  sb.append('r');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('r');  sb.append( "n');  sb.append('r');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('r');    sb.append( "n');  sb.append('r');	  	non-compiled	[CE]  unclosed  string  literal	71	None	add
2247	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "] ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append( "] ");  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
2248	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "] ");  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "] ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append( "] ");  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
2249	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "[] ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(']');    sb.append( "[] ");  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
2250	[BUG]  [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "[] ");  sb.append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(']');  sb.append( "[] ");  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(']');    sb.append( "[] ");  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	30	1	add
2251	[BUG]  [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(c);  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	54	None	replace
2252	[BUG]  [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append('/');  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	54	None	replace
2253	[BUG]  [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(',');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(',');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(!Character.isISOControl(c))  {  sb.append('?');  sb  =(String)block.getValue();  sb.append(',');  }	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	54	None	replace
2254	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
2255	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  }	  	compilable	  [FE]  ComparisonFailure  	122	1	add
2256	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }  [CE]  unclosed  character  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    if(sb!=  null)  {  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  else  {  sb.append(c);  }	  	non-compiled	[CE]  unclosed  character  literal	122	None	add
2257	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	122	1	add
2258	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(c);    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	122	1	add
2259	[BUG]  [BUGGY]  sb.append(chars.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars.charAt(i  +  1));	  sb.append(block.charAt(i    +    1));    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
2260	[BUG]  [BUGGY]  sb.append( ": ".charAt(i);  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ": ".charAt(i);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ".charAt(i);	  sb.append(   ":   ");    	non-compiled	[CE]  	15	None	replace
2261	[BUG]  [BUGGY]  sb.append(chars[i].charAt(len  -  1));  [CE]  char  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(len  -  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(len  -  1));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	95	None	replace
2262	[BUG]  [BUGGY]  sb.append(chars[i].charAt(len));  [CE]  char  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars[i].charAt(len));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(len));	  sb.append(chars[i].charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	95	None	replace
2263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('-');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('-');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
2264	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('-');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('-');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('-');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
2265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
2266	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('-');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	188	1	add
2267	[BUG]  [BUGGY]  sb.append(']').append(block,  chars.toCharArray());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  chars.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  chars.toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
2268	[BUG]  [BUGGY]  sb.append(']').append(block,  chars[i].toCharArray());  [CE]  char  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']').append(block,  chars[i].toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block,  chars[i].toCharArray());	  sb.append(']').append(block.toCharArray());    	non-compiled	[CE]  char  cannot  be  dereferenced	105	None	replace
2269	[BUG]  [BUGGY]  sb.append(chars.charAt(i++));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars.charAt(i++));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars.charAt(i++));	  sb.append(block.charAt(i++));    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
2270	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
2271	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');  sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    sb.append( ",.s.IFJDCS   ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	204	1	add
2272	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append(']');    sb.append(c);  sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
2273	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[');  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[');  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append(c);  sb.append('[');  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
2274	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(char);  sb.append('[').append(']');  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(char);  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append(char);  sb.append('[').append(']');	  	non-compiled	[CE]  '.class'  expected	136	None	add
2275	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('[').append(']');    sb.append(c);  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
2276	[BUG]  [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('[').append(']');  sb.append(c);  sb.append('[').append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('[').append(']');    sb.append(c);  sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	136	1	add
2277	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  sb.append('/');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	add
2278	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  sb.append('/');  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  sb.append('/');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	add
2279	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append(c);  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append(c);  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
2280	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append(c);  sb.append('/');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append(c);  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append(c);  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
2281	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	add
2282	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	56	1	add
2283	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append('/');  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append('/');	  	non-compiled	[CE]  char  cannot  be  dereferenced	56	None	add
2284	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/').append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append('/').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
2285	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( "./ ");  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        sb.append('/');    sb.append( "./ ");  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
2286	[BUG]  [BUGGY]  sb.append('/');    sb.append('/');  sb.append( "./ ");  sb.append('/');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    sb.append('/');  sb.append( "./ ");  sb.append('/');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        sb.append('/');    sb.append( "./ ");  sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	56	1	add
2287	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append( ".:').append(block);  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append( ".:').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append( ".:').append(block);	  	non-compiled	[CE]  unclosed  string  literal	152	None	add
2288	[BUG]  [BUGGY]  sb.append(':').append(block);  sb.append( ":').append(block);  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block);  sb.append( ":').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);    sb.append( ":').append(block);	  	non-compiled	[CE]  unclosed  string  literal	152	None	add
2289	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('k');	  sb.append('n');    sb.append('k');    	compilable	  [FE]  ComparisonFailure  	164	1	replace
2290	[BUG]  [BUGGY]  sb.append('k');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('k');	  sb.append('n');    sb.append('k');    	compilable	  [FE]  ComparisonFailure  	164	1	replace
2291	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2292	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2294	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2295	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2296	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('[');  if(sb!=  null)  {  sb.append(']');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2297	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2298	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  continue;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append('n');    }    sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	182	1	add
2299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2300	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2301	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(block.charAt(i));  }	  sb.append('?');    sb.append(c);    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
2302	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2303	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2304	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2305	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb.append(c);  }  else  {  sb.append('/');  }	  sb.append('?');    sb.append(c);    	compilable	  [FE]  ComparisonFailure  	217	1	replace
2306	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars[i]);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append(':').append(block,  chars[i]);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(':').append(block,  chars[i]);	  sb.append(':');    sb.append(':').append(block.charAt(i));    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	24	None	replace
2307	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2308	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2309	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  sb.append('?');    sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
2310	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2311	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2312	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2313	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  sb.append('?');  }  else  {  sb.append(c);  }	  sb.append('?');    sb.append('?');    	compilable	  [FE]  ComparisonFailure  	48	1	replace
2314	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(Character.toUpperCase(block));  sb.append(':');  sb.append(':');  [CE]  no  suitable  method  found  for  toUpperCase(UnicodeBlock)  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(Character.toUpperCase(block));  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(Character.toUpperCase(block));  sb.append(':');  sb.append(':');	  	non-compiled	[CE]  no  suitable  method  found  for  toUpperCase(UnicodeBlock)	20	None	add
2315	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  sb.append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	1	add
2316	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  sb.append(':');  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  sb.append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	1	add
2317	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	1	add
2318	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));  sb.append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	1	add
2319	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append(char);  sb.append(':');  [CE]  '.class'  expected  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append(char);  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append(char);  sb.append(':');	  	non-compiled	[CE]  '.class'  expected	20	None	add
2320	[BUG]  [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append(':');  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i).toString());  sb.append(':');	  	non-compiled	[CE]  char  cannot  be  dereferenced	20	None	add
2321	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	113	None	replace
2322	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	113	None	replace
2323	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i],  block.charAt(i));  sb.append('?');  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i],  block.charAt(i));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i],  block.charAt(i));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  ')'  expected	113	None	replace
2324	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(block.charAt(i),  block.charAt(i  +  1));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	113	None	replace
2325	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	23	None	replace
2326	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':');  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	23	None	replace
2327	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
2328	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  }	  sb.append(':');    String    sb    =(String)block.getValue();    sb.append(':');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	23	None	replace
2329	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( "?prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append( "?prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
2330	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( "?prototype.   ").append(c).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');  sb.append( "?prototype.   ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(c).append('?');    sb.append( "?prototype.   ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	176	1	add
2331	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(c);  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append('_');    sb.append(c);  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
2332	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append(c);  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(c);  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append(c);  sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	194	1	add
2333	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append( ".[');  sb.append('_');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append( ".[');  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append( ".[');  sb.append('_');	  	non-compiled	[CE]  unclosed  string  literal	194	None	add
2334	[BUG]  [BUGGY]  sb.append('[');    sb.append('_');  sb.append(char);  sb.append('_');  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append('_');  sb.append(char);  sb.append('_');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append('_');    sb.append(char);  sb.append('_');	  	non-compiled	[CE]  '.class'  expected	194	None	add
2335	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2336	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2337	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2338	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2339	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  }	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	18	None	add
2340	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }  [CE]  variable  c  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  char  c  =  block.charAt(i);  sb.append(':'  +  c);  }	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  sanitize(String)	18	None	add
2341	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append( ": "  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append( ": "  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2342	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append( ": "  +  c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append( ": "  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append( ": "  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2343	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2344	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  continue;  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  sb.append(':'  +  c);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2345	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2346	[BUG]  [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':'  +  c);  if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'    +    c);    if(!Character.isISOControl(c))  {  sb.append(':'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	18	1	add
2347	[BUG]  [BUGGY]  sb.append(block,  s.getName());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block,  s.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  s.getName());	  sb.append(block.getName());    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
2348	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append('[').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append('[').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2349	[BUG]  [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append('[').append(block);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append('[').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append('[').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2350	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2351	[BUG]  [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2352	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2353	[BUG]  [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2354	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2355	[BUG]  [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block);  if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);    if(sb!=  null)  {  sb.append('[').append(block);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	144	1	add
2356	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(char);  if(sb!=  null)  {  sb.append('/');  }  [CE]  '.class'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  sb.append(char);  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    sb.append(char);  if(sb!=  null)  {  sb.append('/');  }	  	non-compiled	[CE]  '.class'  expected	227	None	add
2357	[BUG]  [BUGGY]  sb.append(chars.charAt(i),  block);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(chars.charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars.charAt(i),  block);	  sb.append(block.charAt(i),    c);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
2358	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	51	None	replace
2359	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
2360	[BUG]  [BUGGY]  if(chars[i]  ==  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]  ==  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]  ==  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	51	None	replace
2361	[BUG]  [BUGGY]  if(chars[i]  ==  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]  ==  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]  ==  '.')  {  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	51	None	replace
2362	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len),  sb.toString());  sb.append('?');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len),  sb.toString());  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('?');  sb  =  new  String(s.substring(0,  len),  sb.toString());  sb.append('?');  }	  sb.append('?');    String    sb    =    new    String(s.substring(0,    len));    sb.append('?');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	51	None	replace
2363	[BUG]  [BUGGY]  sb.append(':',  block.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  block.toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  block.toCharArray());	  sb.append(':');    String    sb    =    new    String(block.toCharArray());    sb.append(':');    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
2364	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(']');    sb.append(c);  sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
2365	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append('[');  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append('[');  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append(c);  sb.append('[');  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
2366	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(']');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
2367	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	134	1	add
2368	[BUG]  [BUGGY]  sb.append('[');    sb.append(']');  sb.append(char);  sb.append(']');  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(']');  sb.append(char);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(']');    sb.append(char);  sb.append(']');	  	non-compiled	[CE]  '.class'  expected	134	None	add
2369	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i),  block.charAt(i).toString());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i),  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i),  block.charAt(i).toString());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
2370	[BUG]  [BUGGY]  sb.append(block.charAt(i  +  1),  block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block.charAt(i  +  1),  block.charAt(i  +  1));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i  +  1),  block.charAt(i  +  1));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toString());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
2371	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2372	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?').append(block);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2373	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2374	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(block);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2375	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2376	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2377	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2378	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2379	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2380	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('?');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2381	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2382	[BUG]  [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(block);  if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);    if(sb!=  null)  {  sb.append('?').append(block);  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	141	1	add
2383	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append( "n');  sb.append('n');  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append( "n');  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append( "n');  sb.append('n');	  	non-compiled	[CE]  unclosed  string  literal	65	None	add
2384	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append(c);  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('n');    sb.append(c);  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
2385	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append(c);  sb.append('n');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append(c);  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append(c);  sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	65	1	add
2386	[BUG]  [BUGGY]  sb.append('n');    sb.append('n');  sb.append(char);  sb.append('n');  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('n');  sb.append(char);  sb.append('n');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('n');    sb.append(char);  sb.append('n');	  	non-compiled	[CE]  '.class'  expected	65	None	add
2387	[BUG]  [BUGGY]  sb.append(':',  c);  sb.append( ".s.IFJDCS   ".charAt(i),  block);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':',  c);  sb.append( ".s.IFJDCS   ".charAt(i),  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':',  c);  sb.append( ".s.IFJDCS   ".charAt(i),  block);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	210	None	replace
2388	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  start  48  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  chars[i],  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  sb.append( ".s.IFJDCS ",  chars[i],  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  start  48  	210	1	replace
2389	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  chars[i],  c);  [FE]  java.lang.IndexOutOfBoundsException:  start  48  [FE]                      ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ",  chars[i],  c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ",  chars[i],  c);	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i),    c);    	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  start  48  	210	1	replace
2390	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append(c);  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append(c);  sb.append('n');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2391	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append(c);  sb.append('n');  sb.append('e');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append(c);  sb.append('n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append(c);  sb.append('n');  sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2392	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2393	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2394	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  len);	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2395	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  len);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append('n');  sb.append('e');  System.arraycopy(chars,  0,  chars,  0,  len);	  	compilable	  [FE]  ComparisonFailure  	165	1	add
2396	[BUG]  [BUGGY]  sb.append('n');    sb.append('e');  sb.append( "n');  sb.append('e');  [CE]  unclosed  string  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('e');  sb.append( "n');  sb.append('e');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('e');    sb.append( "n');  sb.append('e');	  	non-compiled	[CE]  unclosed  string  literal	165	None	add
2397	[BUG]  [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');  final  String  sb  =(String)block.clone();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  final  String  sb  =(String)block.clone();	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
2398	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('[',  sb);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('[',  sb);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('[',  sb);	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
2399	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('[',  sb.length());  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('[',  sb.length());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('[',  sb.length());	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
2400	[BUG]  [BUGGY]  String  sb  =(String)block.clone();  sb.append('[').append(s);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.clone();  sb.append('[').append(s);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.clone();  sb.append('[').append(s);	  sb.append('[');    String    sb    =(String)block.clone();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	86	None	replace
2401	[BUG]  [BUGGY]  sb.append('['  +  i  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('['  +  i  +  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  i  +  block.charAt(i));	  sb.append('['    +    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
2402	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.getValue();	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
2403	[BUG]  [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  this.sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  final  String  sb  =(String)block.getValue();  this.sb.append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  final  String  sb  =(String)block.getValue();  this.sb.append('?');	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
2404	[BUG]  [BUGGY]  String  sb  =(String)block.getValue();  sb.append('?',  sb);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  String  sb  =(String)block.getValue();  sb.append('?',  sb);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	String  sb  =(String)block.getValue();  sb.append('?',  sb);	  sb.append('?');    String    sb    =(String)block.getValue();    sb.append('?');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	50	None	replace
2405	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	219	None	add
2406	[BUG]  [BUGGY]  sb.append(':').append(block,  chars.toLowerCase());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
2407	[BUG]  [BUGGY]  sb.append(':').append(block,  chars[i].toLowerCase());  [CE]  char  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars[i].toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars[i].toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  char  cannot  be  dereferenced	159	None	replace
2408	[BUG]  [BUGGY]  sb.append(':').append(block,  block.toLowerCase());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  block.toLowerCase());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  block.toLowerCase());	  sb.append(':');    sb.append(':').append(block.toLowerCase());    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
2409	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2410	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2412	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append('[');  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2413	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2414	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    if(sb!=  null)  {  sb.append('[');  sb.append(c);  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2415	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(c);  sb.append('[');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');        sb.append(c);    sb.append(c);  sb.append('[');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2416	[BUG]  [BUGGY]  sb.append('[');    sb.append(c);  sb.append(c);  sb.append('[');  sb.append(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[');    sb.append(c);  sb.append(c);  sb.append('[');  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');        sb.append(c);    sb.append(c);  sb.append('[');  sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	196	1	add
2417	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('[');  sb  =(String)block.getValue();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	87	None	replace
2418	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb.append(block.getValue());  sb.append('[');  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb.append(block.getValue());  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('[');  sb.append(block.getValue());  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
2419	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	87	None	replace
2420	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb  =  block.getValue();  sb.append('[');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('[');  sb  =  block.getValue();  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('[');  sb  =  block.getValue();  sb.append('[');  }	  sb.append('[');    String    sb    =(String)block.getValue();    sb.append('[');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	87	None	replace
2421	[BUG]  [BUGGY]  sb.append(':').append(block,  chars[i],  block.charAt(i));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block,  chars[i],  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block,  chars[i],  block.charAt(i));	  sb.append(':');    sb.append(':').append(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
2422	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]        ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	146	None	replace
2423	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
2424	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  sb.append(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
2425	[BUG]  [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  }  else  {  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(chars[i]!=  '.')  {  sb.append('/');  }  else  {  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(chars[i]!=  '.')  {  sb.append('/');  }  else  {  final  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  }	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    sb.append('/');    	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	146	None	replace
2426	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb.append(':').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append(':');  sb.append(':').append(block.toString());  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2427	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb.append(':').append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':');  sb.append(':').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':');  sb.append(':').append(block.toString());  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append(':').append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2429	[BUG]  [BUGGY]  sb.append(c).append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append(':').append(block.toString());	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2430	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2431	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2432	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  else  {  sb.append(']');  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2433	[BUG]  [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  else  {  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb.length()  >  0)  {  sb.append(':').append(block.toString());  }  else  {  sb.append(']');  }	  sb.append(':');    sb.append(':').append(block.toString());    	compilable	  [FE]  ComparisonFailure  	27	1	replace
2434	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append( ".[').append(block.toString());  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append( ".[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append( ".[').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	100	None	add
2435	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  sb.append( "[').append(block.toString());  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(block.toString());  sb.append( "[').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());    sb.append( "[').append(block.toString());	  	non-compiled	[CE]  unclosed  string  literal	100	None	add
2436	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i),  block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/',  block.charAt(i),  block.charAt(i).toCharArray());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i),  block.charAt(i).toCharArray());	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i).toCharArray());    sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
2437	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(char);  sb.append(':').append(block.toString());  [CE]  '.class'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(char);  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(char);  sb.append(':').append(block.toString());	  	non-compiled	[CE]  '.class'  expected	26	None	add
2438	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
2439	[BUG]  [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(':').append(block.toString());  sb.append(':').append(block.toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(':').append(block.toString());    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	26	1	add
2440	[BUG]  [BUGGY]  sb.append('?');  sb.append( ". ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [CE]  cannot  find  symbol  SIGNATURES  [FE]          ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ". ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ". ").append(Character.UnicodeBlock.SIGNATURES).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SIGNATURES).append('?');    	non-compiled	[CE]  cannot  find  symbol  SIGNATURES	172	None	replace
2441	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ",  Character.UnicodeBlock.SIGNATURES).append('?');  [CE]  cannot  find  symbol  SIGNATURES  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append( ".prototype. ",  Character.UnicodeBlock.SIGNATURES).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append( ".prototype. ",  Character.UnicodeBlock.SIGNATURES).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SIGNATURES).append('?');    	non-compiled	[CE]  cannot  find  symbol  SIGNATURES	172	None	replace
2442	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append( "? ");  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append( "? ");  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
2443	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append( "? ");  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append( "? ");  }  else  {  sb.append(block.toString());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append( "? ");  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
2444	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
2445	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toString());    }    sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  block.toString();  }	  	compilable	  [FE]  ComparisonFailure  	116	1	add
2446	[BUG]  [BUGGY]  sb.append(':');  sb.append( ",  block.charAt(i).toString());  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ",  block.charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ",  block.charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  unclosed  string  literal	206	None	replace
2447	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".charAt(i).toString());  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  unclosed  string  literal	206	None	replace
2448	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i).toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i).toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").charAt(i).toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  	206	None	replace
2449	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ").toString());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append( ".s.IFJDCS ").toString());	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i).toString());    	non-compiled	[CE]  	206	None	replace
2450	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append( ".[').append(c);  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append( ".[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append( ".[').append(c);	  	non-compiled	[CE]  unclosed  string  literal	98	None	add
2451	[BUG]  [BUGGY]  sb.append('[').append(c);  sb.append( "[').append(c);  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('[').append(c);  sb.append( "[').append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);    sb.append( "[').append(c);	  	non-compiled	[CE]  unclosed  string  literal	98	None	add
2452	[BUG]  [BUGGY]  sb.append(c,  '?',  block);  [CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c,  '?',  block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c,  '?',  block);	  sb.append('?',    block);    	non-compiled	[CE]  no  suitable  method  found  for  append(char,char,UnicodeBlock)	44	None	replace
2453	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2454	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2456	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('n');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2457	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2458	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2459	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2460	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(']');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(']');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2461	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2462	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2463	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(';');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(';');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2464	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(';');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(';');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append(';');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2465	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('[');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2466	[BUG]  [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('[');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('#');  if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('[');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');    if(sb!=  null)  {  sb.append('#');  }  else  {  System.arraycopy(chars,  0,  sb,  0,  len);  sb.append('[');  }	  	compilable	  [FE]  ComparisonFailure  	80	1	add
2467	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append(c);  sb.append(']');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2468	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(c);  sb.append(']');  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2469	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append( ".] ");  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append( ".] ");  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2470	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append( ".] ");  sb.append(':');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append( ".] ");  sb.append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append( ".] ");  sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2471	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(':');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2472	[BUG]  [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(':');  sb.append(c);  sb.append(']');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(':');    sb.append(c);  sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	35	1	add
2473	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
2474	[BUG]  [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [FE]  ArrayStoreException  [FE]    ArrayStoreException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  System.arraycopy(chars,  0,  sb,  1,  len);	  sb.append(':');    sb.append(':');    System.arraycopy(chars,    0,    sb,    0,    len);    	compilable	  [FE]  ArrayStoreException  	208	1	replace
2475	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2476	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2477	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	220	None	replace
2478	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append( "/ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append( "/ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2479	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append( "/ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append( "/ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append( "/ ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2480	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2481	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  sb.append('/');    if(sb!=    null)    {    sb.append('/');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	220	1	replace
2482	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append(c);  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('[');    sb.append(c);  sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
2483	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append(c);  sb.append(']');  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append(c);  sb.append(']');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append(c);  sb.append(']');  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
2484	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append( ".] ");  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append('[');    sb.append( ".] ");  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
2485	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append( ".] ");  sb.append('[');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append( ".] ");  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append( ".] ");  sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	32	1	add
2486	[BUG]  [BUGGY]  sb.append(']');    sb.append('[');  sb.append( ".]');  sb.append('[');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append('[');  sb.append( ".]');  sb.append('[');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append('[');    sb.append( ".]');  sb.append('[');	  	non-compiled	[CE]  unclosed  string  literal	32	None	add
2487	[BUG]  [BUGGY]  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  cannot  assign  a  value  to  final  variable  sb  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');  sb  =  new  String(block.charAt(i),  block.charAt(i));	  sb.append('/');    String    sb    =    new    String(block.charAt(i),    block.charAt(i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  sb	150	None	replace
2488	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2489	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2490	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2491	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2492	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(sb!=  null)  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(sb!=  null)  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2493	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(sb!=  null)  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(sb!=  null)  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(sb!=  null)  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2494	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('#'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('#'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2495	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('#'  +  c);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('#'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('#'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2496	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2497	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append(':'  +  c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append(':'  +  c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append(':'  +  c);  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2498	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2499	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  continue;  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  sb.append('/'  +  c);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2500	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2501	[BUG]  [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/'  +  c);  if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'    +    c);    if(!Character.isISOControl(c))  {  sb.append('/'  +  c);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	108	1	add
2502	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ").append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ".s.IFJDCS ").append(chars[i]).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
2503	[BUG]  [BUGGY]  sb.append( ".s.IFJDCS ").append(chars[i]).append(':');  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ".s.IFJDCS ").append(chars[i]).append(':');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ".s.IFJDCS ").append(chars[i]).append(':');	  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i)).append(':');    	compilable	  [FE]  ComparisonFailure  	205	1	replace
2504	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
2505	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	221	1	add
2506	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb  >=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	221	None	add
2507	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append( "#');  }  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append( "#');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append( "#');  }	  	non-compiled	[CE]  unclosed  string  literal	221	None	add
2508	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	221	1	add
2509	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append('#');    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	221	1	add
2510	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(c);  sb.append(']');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(')');    sb.append(c);  sb.append(']');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
2511	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append(c);  sb.append(']');  sb.append(')');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append(c);  sb.append(']');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append(c);  sb.append(']');  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
2512	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append( ".]');  sb.append(')');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append( ".]');  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append( ".]');  sb.append(')');	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
2513	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append( ".] ");  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');        sb.append(')');    sb.append( ".] ");  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
2514	[BUG]  [BUGGY]  sb.append(']');    sb.append(')');  sb.append( ".] ");  sb.append(')');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(']');    sb.append(')');  sb.append( ".] ");  sb.append(')');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');        sb.append(')');    sb.append( ".] ");  sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	39	1	add
2515	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(c);  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
2516	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(c);  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(c);  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
2517	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(char);  if(sb!=  null)  {  sb.append('?');  }  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append(char);  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append(char);  if(sb!=  null)  {  sb.append('?');  }	  	non-compiled	[CE]  '.class'  expected	118	None	add
2518	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
2519	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append( "? ");  if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	118	1	add
2520	[BUG]  [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  [CE]  unclosed  character  literal  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        if(sb!=    null)    {    sb.append('?');    }    sb.append('?');  if(sb!=  null)  {  sb.append('? "');  }	  	non-compiled	[CE]  unclosed  character  literal	118	None	add
2521	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(0));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.charAt(0));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(0));	  sb.append(':').append(block.toString());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2522	[BUG]  [BUGGY]  sb.append(':').append(block.getName());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':').append(block.getName());  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.getName());	  sb.append(':').append(block.toString());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2523	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append( ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append( ".s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
2524	[BUG]  [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append( ".s.IFJDCS   ".charAt(i));  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(':');    sb.append(   ".s.IFJDCS   ".charAt(i));  sb.append( ".s.IFJDCS   ".charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');        sb.append(   ".s.IFJDCS   ".charAt(i));    sb.append( ".s.IFJDCS   ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	202	1	add
2525	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
2526	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
2527	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
2528	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    sb.append(c);    }    sb.append('[');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	186	1	add
2529	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2530	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/').append(c);  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2531	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2532	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append('/');  if(sb!=  null)  {  sb.append('/');  break;  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2533	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2534	[BUG]  [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  sb.append(c);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');        if(sb!=    null)    {    sb.append('/');    }    else    {    sb.append(c);    }    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	223	1	add
2535	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	if(sb!=  null)  {  sb.append('?');  continue;  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	119	1	replace
2536	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  continue;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  continue;  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    	compilable	  [FE]  ComparisonFailure  	119	1	replace
2537	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(c).append('?').append(block);	  sb.append('?').append(block);    	compilable	  [FE]  ComparisonFailure  	142	1	replace
2538	[BUG]  [BUGGY]  sb.append(c).append('?').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(c).append('?').append(block);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(c).append('?').append(block);	  sb.append('?').append(block);    	compilable	  [FE]  ComparisonFailure  	142	1	replace
2539	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
2540	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    sb.append('#');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	180	1	add
2541	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('S');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('S');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2542	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('S');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('S');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('S');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2543	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2544	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2545	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2546	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append(c);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2547	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2548	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2549	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('R');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('R');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2550	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('R');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('R');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('R');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2551	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('P');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('P');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2552	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('P');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('P');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('P');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2553	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('K');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('K');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2554	[BUG]  [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('K');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('N');  if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('K');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');    if(sb!=  null)  {  sb.append('N');  }  else  {  sb.append('K');  }	  	compilable	  [FE]  ComparisonFailure  	78	1	add
2555	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( "?prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( "?prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
2556	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( "?prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( "?prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( "?prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	170	1	add
2557	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  	170	1	add
2558	[BUG]  [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');        sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');    sb.append( ",.prototype.   ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[?.prototype.  SPECIALS?  	170	1	add
2559	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	163	1	add
2560	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  chars,  0,  chars.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  chars,  0,  chars.length);	  	compilable	  [FE]  ComparisonFailure  	163	1	add
2561	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [CE]  cannot  find  symbol  length  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  sb,  0,  sb.length);  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');  System.arraycopy(chars,  0,  sb,  0,  sb.length);	  	non-compiled	[CE]  cannot  find  symbol  length	163	None	add
2562	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append( "n');  sb.append('k');  [CE]  unclosed  string  literal  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append( "n');  sb.append('k');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append( "n');  sb.append('k');	  	non-compiled	[CE]  unclosed  string  literal	163	None	add
2563	[BUG]  [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  return  sb.toString();  [CE]  unreachable  statement  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    sb.append('k');  sb.append('n');  sb.append('k');  return  sb.toString();  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        sb.append('k');    sb.append('n');  sb.append('k');  return  sb.toString();	  	non-compiled	[CE]  unreachable  statement	163	None	add
2564	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":: ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ":: ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
2565	[BUG]  [BUGGY]  sb.append( ":: ").append(c).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append( ":: ").append(c).append('?');  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ":: ").append(c).append('?');	  sb.append('?');    sb.append(   ".prototype.   ").append(c).append('?');    	compilable	  [FE]  ComparisonFailure  	177	1	replace
2566	[BUG]  [BUGGY]  sb.append('?').append(c).append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?').append(c).append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(c).append('?');  }  else  {  sb.append(block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
2567	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  block.toCharArray());  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
2568	[BUG]  [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }  [CE]  no  suitable  method  found  for  append(UnicodeBlock,char)  [FE]                    ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block,  chars[i]);  }	  sb.append('?');    if(sb!=    null)    {    sb.append('?');    }    else    {    sb.append(block.toCharArray());    }    	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,char)	120	None	replace
2569	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2570	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2571	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(sb!=  null)  {  sb.append(block);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(sb!=  null)  {  sb.append(block);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2572	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(sb!=  null)  {  sb.append(block);  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(sb!=  null)  {  sb.append(block);  sb.append('?');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(sb!=  null)  {  sb.append(block);  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2573	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2574	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  continue;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append('?');  continue;  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2575	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2576	[BUG]  [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  continue;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append(block);    sb.append(block);  if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  continue;  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);        sb.append(block);    if(!Character.isISOControl(c))  {  sb.append(block);  sb.append(block);  continue;  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
2577	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('m');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('m');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
2578	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('m');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append('m');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append('m');  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
2579	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(char);  if(sb!=  null)  {  sb.append('n');  }  [CE]  '.class'  expected  [FE]      ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(char);  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(char);  if(sb!=  null)  {  sb.append('n');  }	  	non-compiled	[CE]  '.class'  expected	184	None	add
2580	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(Character.UnicodeBlock.SPECIALS);  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(Character.UnicodeBlock.SPECIALS);  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
2581	[BUG]  [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(Character.UnicodeBlock.SPECIALS);  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  sb.append(Character.UnicodeBlock.SPECIALS);  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');        if(sb!=    null)    {    sb.append('n');    }    sb.append(Character.UnicodeBlock.SPECIALS);  if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	184	1	add
2582	[BUG]  [BUGGY]  sb.append('?');  sb.append(c, ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {      [BUGGY]  sb.append('?');  sb.append(c, ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]      continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c, ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  sb.append('?');    sb.append(   ".prototype.   ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
