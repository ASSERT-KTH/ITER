bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);    sb.append(block);	  	compilable	  [FE]  ComparisonFailure  	15	1	add
2	[BUG]  [BUGGY]  sb.append(block);  sb.append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block);	  	compilable	  [FE]  ComparisonFailure  	15	1	add
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);    sb.append(block).append('?');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
4	[BUG]  [BUGGY]  sb.append(block);  sb.append(block).append('?');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block).append('?');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
5	[BUG]  [BUGGY]  sb.append(block);  StringBuilder  sb.append(block);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  StringBuilder  sb.append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    StringBuilder  sb.append(block);	  	non-compiled	[CE]  ';'  expected	15	None	add
6	[BUG]  [BUGGY]  sb.append(block);  sb.append(block,  false);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block,  false);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block,  false);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,boolean)	15	None	add
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);    sb.append(block).append('n');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
8	[BUG]  [BUGGY]  sb.append(block);  sb.append(block).append('n');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block).append('n');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
9	[BUG]  [BUGGY]  sb.append(block);  sb.append(block,  0,  len);  [CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block,  0,  len);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block,  0,  len);	  	non-compiled	[CE]  no  suitable  method  found  for  append(UnicodeBlock,int,int)	15	None	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block);    sb.append(block).append(':');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
11	[BUG]  [BUGGY]  sb.append(block);  sb.append(block).append(':');  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(block).append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(block).append(':');	  	compilable	  [FE]  ComparisonFailure  	15	1	add
12	[BUG]  [BUGGY]  sb.append(':').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.charAt(i));	  sb.append(':');    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
13	[BUG]  [BUGGY]  sb.append(':').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block.toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toCharArray());	  sb.append(':');    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append( ": ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( ": ");	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
15	[BUG]  [BUGGY]  sb.append( ": ");  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append( ": ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( ": ");	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block.toString());	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
17	[BUG]  [BUGGY]  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block.toString());	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':'  +  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':'  +  c);	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
19	[BUG]  [BUGGY]  sb.append(':'  +  c);  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':'  +  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':'  +  c);	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	9	1	add
21	[BUG]  [BUGGY]  sb.append(':');  sb.append(':');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	9	1	add
22	[BUG]  [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    String  sb  =(String)block.clone();  sb.append(':');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	9	None	add
23	[BUG]  [BUGGY]  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  String  sb  =(String)block.getValue();  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    String  sb  =(String)block.getValue();  sb.append(':');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	9	None	add
24	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
25	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i),  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':').append(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	9	1	add
27	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block.toString());  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	9	1	add
28	[BUG]  [BUGGY]  sb.append(':');  StringBuilder  sb.append(':');  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  StringBuilder  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    StringBuilder  sb.append(':');	  	non-compiled	[CE]  ';'  expected	9	None	add
29	[BUG]  [BUGGY]      StringBuilder  sb  =  new  StringBuilder();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]      StringBuilder  sb  =  new  StringBuilder();  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	        StringBuilder  sb  =  new  StringBuilder();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	13	None	add
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
31	[BUG]  [BUGGY]  sb.append(']');  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
33	[BUG]  [BUGGY]  sb.append(']');  sb.append('[');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
34	[BUG]  [BUGGY]  sb.append(']');  sb.append('].');  [CE]  unclosed  character  literal  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append('].');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append('].');	  	non-compiled	[CE]  unclosed  character  literal	11	None	add
35	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
36	[BUG]  [BUGGY]  sb.append(']');  sb.append(':');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append(':');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
37	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append( "] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append( "] ");	  	compilable	  [FE]  ComparisonFailure  	11	1	add
38	[BUG]  [BUGGY]  sb.append(']');  sb.append( "] ");  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append( "] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append( "] ");	  	compilable	  [FE]  ComparisonFailure  	11	1	add
39	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(')');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
40	[BUG]  [BUGGY]  sb.append(']');  sb.append(')');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append(')');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append(')');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
41	[BUG]  [BUGGY]  sb.append(']');  sb.append( "]');  [CE]  unclosed  string  literal  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append( "]');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append( "]');	  	non-compiled	[CE]  unclosed  string  literal	11	None	add
42	[BUG]  [BUGGY]  sb.append('?').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.charAt(i));	  sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
43	[BUG]  [BUGGY]  sb.append('?').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block.toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toCharArray());	  sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  sb.append('?',  block);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?',  block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?',  block);	  sb.append('?');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	2	None	replace
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block.toString());	  sb.append('?');    	compilable	  [FE]  ComparisonFailure  	2	1	replace
46	[BUG]  [BUGGY]  sb.append('?').append(block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block.toString());	  sb.append('?');    	compilable	  [FE]  ComparisonFailure  	2	1	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
48	[BUG]  [BUGGY]  sb.append('?');  sb.append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
49	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.clone();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =(String)block.clone();  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =(String)block.clone();  sb.append('?');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
50	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =(String)block.getValue();  sb.append('?');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
51	[BUG]  [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =  new  String(s.substring(0,  len));  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =  new  String(s.substring(0,  len));  sb.append('?');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
52	[BUG]  [BUGGY]  sb.append('?');  sb.append('?').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append('?').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append('?').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
53	[BUG]  [BUGGY]  sb.append('?');  sb.append( "?');  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( "?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( "?');	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
54	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append(c);  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =(String)block.getValue();  sb.append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =(String)block.getValue();  sb.append(c);	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
55	[BUG]  [BUGGY]  sb.append('?');  String  sb  =(String)block.clone();  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =(String)block.clone();  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =(String)block.clone();	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
57	[BUG]  [BUGGY]  sb.append('/');  sb.append('/');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    sb.append('/');	  	compilable	  [FE]  ComparisonFailure  	7	1	add
58	[BUG]  [BUGGY]  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =(String)block.clone();  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =(String)block.clone();  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
59	[BUG]  [BUGGY]  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =(String)block.getValue();  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =(String)block.getValue();  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
60	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/').append(block.charAt(i),  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    sb.append('/').append(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
61	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    sb.append('/').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
62	[BUG]  [BUGGY]  sb.append('/');  StringBuilder  sb.append('/');  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  StringBuilder  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    StringBuilder  sb.append('/');	  	non-compiled	[CE]  ';'  expected	7	None	add
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	7	1	add
64	[BUG]  [BUGGY]  sb.append('/');  sb.append('/').append(block.toString());  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  sb.append('/').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    sb.append('/').append(block.toString());	  	compilable	  [FE]  ComparisonFailure  	7	1	add
65	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
66	[BUG]  [BUGGY]  sb.append('n');  sb.append('n');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('n');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
67	[BUG]  [BUGGY]  sb.append('n');  StringBuilder  sb.append('n');  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  StringBuilder  sb.append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    StringBuilder  sb.append('n');	  	non-compiled	[CE]  ';'  expected	5	None	add
68	[BUG]  [BUGGY]  sb.append('n');  String  sb.append('n');  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  String  sb.append('n');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    String  sb.append('n');	  	non-compiled	[CE]  ';'  expected	5	None	add
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('m');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
70	[BUG]  [BUGGY]  sb.append('n');  sb.append('m');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('m');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('m');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('r');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
72	[BUG]  [BUGGY]  sb.append('n');  sb.append('r');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('r');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('r');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
73	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('N');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
74	[BUG]  [BUGGY]  sb.append('n');  sb.append('N');  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('N');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('N');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
75	[BUG]  [BUGGY]  sb.append('n');  sb.append('n');  continue;  [CE]  unreachable  statement  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('n');  continue;  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('n');  continue;	  	non-compiled	[CE]  unreachable  statement	5	None	add
76	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('f');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
77	[BUG]  [BUGGY]  sb.append('n');  sb.append('f');  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('f');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('f');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
78	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('N');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('N');	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
79	[BUG]  [BUGGY]  sb.append('N');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('N');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('N');	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
80	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('#');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('#');	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
81	[BUG]  [BUGGY]  sb.append('#');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('#');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('#');	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
82	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(chars[i]);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(chars[i]);	  sb.append(block);    	compilable	  [FE]  ComparisonFailure  	16	1	replace
83	[BUG]  [BUGGY]  sb.append(chars[i]);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(chars[i]);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i]);	  sb.append(block);    	compilable	  [FE]  ComparisonFailure  	16	1	replace
84	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
85	[BUG]  [BUGGY]  sb.append('[');  sb.append('[');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
86	[BUG]  [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    String  sb  =(String)block.clone();  sb.append('[');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	3	None	add
87	[BUG]  [BUGGY]  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  String  sb  =(String)block.getValue();  sb.append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    String  sb  =(String)block.getValue();  sb.append('[');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	3	None	add
88	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[').append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
89	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i),  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[').append(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
90	[BUG]  [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  sb.append(']');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  String  sb  =(String)block.clone();  sb.append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    String  sb  =(String)block.clone();  sb.append(']');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	3	None	add
91	[BUG]  [BUGGY]  sb.append(block.charAt(i),  c);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.charAt(i),  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i),  c);	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
92	[BUG]  [BUGGY]  sb.append(block.charAt(i,  len));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.charAt(i,  len));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i,  len));	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
93	[BUG]  [BUGGY]  sb.append(block,  chars.charAt(i));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block,  chars.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block,  chars.charAt(i));	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
94	[BUG]  [BUGGY]  sb.append(block.charAt(i  +  1));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.charAt(i  +  1));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i  +  1));	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
95	[BUG]  [BUGGY]  sb.append(chars[i].charAt(i));  [CE]  char  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(chars[i].charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(chars[i].charAt(i));	  sb.append(block.charAt(i));    	non-compiled	[CE]  char  cannot  be  dereferenced	17	None	replace
96	[BUG]  [BUGGY]  sb.append('[').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.charAt(i));	  sb.append('[');    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
97	[BUG]  [BUGGY]  sb.append('[').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block.toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toCharArray());	  sb.append('[');    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
98	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(c);	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
99	[BUG]  [BUGGY]  sb.append('[').append(c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(c);	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
100	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block.toString());	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
101	[BUG]  [BUGGY]  sb.append('[').append(block.toString());  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block.toString());	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
102	[BUG]  [BUGGY]  sb.append(']').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block.charAt(i));	  sb.append(']');    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append( "] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append( "] ");	  sb.append(']');    	compilable	  [FE]  ComparisonFailure  	12	1	replace
104	[BUG]  [BUGGY]  sb.append( "] ");  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append( "] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append( "] ");	  sb.append(']');    	compilable	  [FE]  ComparisonFailure  	12	1	replace
105	[BUG]  [BUGGY]  sb.append(']').append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']').append(block.toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']').append(block.toCharArray());	  sb.append(']');    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  sb.append('/').append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/').append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/').append(block.charAt(i));	  sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
107	[BUG]  [BUGGY]  sb.append('/',  block);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/',  block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block);	  sb.append('/');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	8	None	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/'  +  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  c);	  sb.append('/');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
109	[BUG]  [BUGGY]  sb.append('/'  +  c);  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/'  +  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  c);	  sb.append('/');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
110	[BUG]  [BUGGY]  sb.append('/',  block.charAt(i));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/',  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/',  block.charAt(i));	  sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
111	[BUG]  [BUGGY]  sb.append(block.charAt(i).toCharArray());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.charAt(i).toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i).toCharArray());	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
112	[BUG]  [BUGGY]  sb.append(block.charAt(i++));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.charAt(i++));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.charAt(i++));	  sb.append(block.charAt(i));    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
113	[BUG]  [BUGGY]  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('?');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	1	None	add
114	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
115	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
116	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
117	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toString());  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
118	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
119	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
120	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.toCharArray());  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
121	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(block.charAt(i));  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
123	[BUG]  [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    if(sb!=  null)  {  sb.append('?');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	1	1	add
124	[BUG]  [BUGGY]  sb.append(block.toCharArray());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.toCharArray());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toCharArray());	  sb.append(']');    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
125	[BUG]  [BUGGY]  sb.append(']',  block);  [CE]  no  suitable  method  found  for  append(char,UnicodeBlock)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']',  block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']',  block);	  sb.append(']');    	non-compiled	[CE]  no  suitable  method  found  for  append(char,UnicodeBlock)	12	None	replace
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(block.toString());	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
127	[BUG]  [BUGGY]  sb.append(block.toString());  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.toString());	  sb.append('n');    	compilable	  [FE]  ComparisonFailure  	6	1	replace
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append('_');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
129	[BUG]  [BUGGY]  sb.append(']');  sb.append('_');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append('_');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	11	1	add
130	[BUG]  [BUGGY]  sb.append('?');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(block.charAt(i));	      	non-compiled	[CE]  cannot  find  symbol	14	None	replace
131	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);	      	compilable	  [FE]  ArrayStoreException  	14	1	replace
132	[BUG]  [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  System.arraycopy(block,  0,  sb,  0,  len);	      	compilable	  [FE]  ArrayStoreException  	14	1	replace
133	[BUG]  [BUGGY]  sb.append('[');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');  sb.append(block.charAt(i));	      	non-compiled	[CE]  cannot  find  symbol	14	None	replace
134	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
135	[BUG]  [BUGGY]  sb.append('[');  sb.append(']');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append(']');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
137	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(']');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append(']');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[').append(']');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
138	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i)));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append(block.charAt(i)));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[').append(block.charAt(i)));	  	non-compiled	[CE]  ';'  expected	3	None	add
139	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
140	[BUG]  [BUGGY]  sb.append('[');  sb.append('[').append('[');  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('[').append('[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('[').append('[');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?').append(block);	  sb.append('?');    	compilable	  [FE]  ComparisonFailure  	2	1	replace
142	[BUG]  [BUGGY]  sb.append('?').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?').append(block);	  sb.append('?');    	compilable	  [FE]  ComparisonFailure  	2	1	replace
143	[BUG]  [BUGGY]  sb.append('['  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('['  +  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('['  +  block.charAt(i));	  sb.append('[');    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
144	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[').append(block);	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
145	[BUG]  [BUGGY]  sb.append('[').append(block);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[').append(block);	  sb.append('[');    	compilable	  [FE]  ComparisonFailure  	4	1	replace
146	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i),  block.charAt(i));  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
147	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i));  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i));  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
148	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i),  block.charAt(i).toString());  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
149	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i).toString());  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
150	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i),  block.charAt(i));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
151	[BUG]  [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    String  sb  =  new  String(block.charAt(i),  block.charAt(i).toCharArray());  sb.append('/');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	7	None	add
152	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':').append(block);	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
153	[BUG]  [BUGGY]  sb.append(':').append(block);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':').append(block);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':').append(block);	  sb.append(':');    	compilable	  [FE]  ComparisonFailure  	10	1	replace
154	[BUG]  [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  block.length()));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    String  sb  =  new  String(s.substring(i  +  1,  block.length()));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	15	None	add
155	[BUG]  [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SPECIALS);  [CE]  package  Block  does  not  exist  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SPECIALS);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(  Block.UnicodeBlock.SPECIALS);	  	non-compiled	[CE]  package  Block  does  not  exist	15	None	add
156	[BUG]  [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    String  sb  =  new  String(s.substring(i  +  1,  block.length()  -  1));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	15	None	add
157	[BUG]  [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  len));  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  String  sb  =  new  String(s.substring(i  +  1,  len));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    String  sb  =  new  String(s.substring(i  +  1,  len));	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	15	None	add
158	[BUG]  [BUGGY]  sb.append(':');  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  String  sb  =  new  String(block.toCharArray());  sb.append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    String  sb  =  new  String(block.toCharArray());  sb.append(':');	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	9	None	add
159	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block.toLowerCase());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.toLowerCase());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':').append(block.toLowerCase());	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
160	[BUG]  [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i  +  1)  ==  ':');  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':').append(block.charAt(i  +  1)  ==  ':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':').append(block.charAt(i  +  1)  ==  ':');	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
161	[BUG]  [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append( ":n ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append( ":n ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    String  sb  =(String)block.clone();  sb.append( ":n ");	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	9	None	add
162	[BUG]  [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append( ": ");  [CE]  variable  sb  is  already  defined  in  method  sanitize(String)  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  String  sb  =(String)block.clone();  sb.append( ": ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    String  sb  =(String)block.clone();  sb.append( ": ");	  	non-compiled	[CE]  variable  sb  is  already  defined  in  method  sanitize(String)	9	None	add
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('k');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
164	[BUG]  [BUGGY]  sb.append('n');  sb.append('k');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('k');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('k');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('e');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
166	[BUG]  [BUGGY]  sb.append('n');  sb.append('e');  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  sb.append('e');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    sb.append('e');	  	compilable	  [FE]  ComparisonFailure  	5	1	add
167	[BUG]  [BUGGY]  sb.append('/'  +  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/'  +  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.charAt(i));	  sb.append('/');    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
168	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/'  +  block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/'  +  block.toString());	  sb.append('/');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
169	[BUG]  [BUGGY]  sb.append('/'  +  block.toString());  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/'  +  block.toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/'  +  block.toString());	  sb.append('/');    	compilable	  [FE]  ComparisonFailure  	8	1	replace
170	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
171	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
172	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [CE]  cannot  find  symbol  SIGNATURES  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SIGNATURES).append('?');	  	non-compiled	[CE]  cannot  find  symbol  SIGNATURES	1	None	add
173	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS).append(block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
175	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( ".prototype. ").append(Character.UnicodeBlock.SPECIALS);	  	compilable	  [FE]  ComparisonFailure  	1	1	add
176	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(c).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');    sb.append( ".prototype. ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
177	[BUG]  [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(c).append('?');  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append( ".prototype. ").append(c).append('?');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');    sb.append( ".prototype. ").append(c).append('?');	  	compilable	  [FE]  ComparisonFailure  	1	1	add
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
179	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('?');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
181	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
182	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
183	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
184	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
185	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
186	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
187	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
188	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
189	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append('-');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
190	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
191	[BUG]  [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('n');  if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('n');    if(sb!=  null)  {  sb.append('n');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	5	1	add
192	[BUG]  [BUGGY]  sb.append('[');  sb.append( "[');  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append( "[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append( "[');	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
193	[BUG]  [BUGGY]  sb.append('[');  sb.append( ".[');  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append( ".[');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append( ".[');	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
194	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('_');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
195	[BUG]  [BUGGY]  sb.append('[');  sb.append('_');  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append('_');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append('_');	  	compilable	  [FE]  ComparisonFailure  	3	1	add
196	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	3	1	add
197	[BUG]  [BUGGY]  sb.append('[');  sb.append(c);  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append(c);	  	compilable	  [FE]  ComparisonFailure  	3	1	add
198	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(',');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('[');    sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	3	1	add
199	[BUG]  [BUGGY]  sb.append('[');  sb.append(',');  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('[');  sb.append(',');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('[');    sb.append(',');	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901...]>  but  was:<[[  	3	1	add
200	[BUG]  [BUGGY]  sb.append(block.getName());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block.getName());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block.getName());	  sb.append('?');    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
201	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  block.charAt(i));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i),  block.charAt(i));	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
202	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
203	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  [FE]  StringIndexOutOfBoundsException  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i));	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
204	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
205	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [FE]  StringIndexOutOfBoundsException  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i)).append(':');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i)).append(':');	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
206	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i).toString());  [CE]  char  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i).toString());  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i).toString());	  	non-compiled	[CE]  char  cannot  be  dereferenced	9	None	add
207	[BUG]  [BUGGY]  [FE]  ArrayStoreException  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	9	1	add
208	[BUG]  [BUGGY]  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [FE]  ArrayStoreException  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append(':');  System.arraycopy(chars,  0,  sb,  0,  len);	  	compilable	  [FE]  ArrayStoreException  	9	1	add
209	[BUG]  [BUGGY]  sb.append(':');  sb.append( ":');  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ":');  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ":');	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
210	[BUG]  [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  c);  [CE]  no  suitable  method  found  for  append(char,char)  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append( ".s.IFJDCS ".charAt(i),  c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');    sb.append( ".s.IFJDCS ".charAt(i),  c);	  	non-compiled	[CE]  no  suitable  method  found  for  append(char,char)	9	None	add
211	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append( ".] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append(']');    sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	11	1	add
212	[BUG]  [BUGGY]  sb.append(']');  sb.append( ".] ");  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(']');  sb.append( ".] ");  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(']');    sb.append( ".] ");	  	compilable	  [FE]  ComparisonFailure  	11	1	add
213	[BUG]  [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.DEFAULT);  [CE]  package  Block  does  not  exist  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.DEFAULT);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(  Block.UnicodeBlock.DEFAULT);	  	non-compiled	[CE]  package  Block  does  not  exist	15	None	add
214	[BUG]  [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SEPARATOR);  [CE]  package  Block  does  not  exist  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SEPARATOR);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(  Block.UnicodeBlock.SEPARATOR);	  	non-compiled	[CE]  package  Block  does  not  exist	15	None	add
215	[BUG]  [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SOURCENAME);  [CE]  package  Block  does  not  exist  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(block);  sb.append(  Block.UnicodeBlock.SOURCENAME);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(block);    sb.append(  Block.UnicodeBlock.SOURCENAME);	  	non-compiled	[CE]  package  Block  does  not  exist	15	None	add
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('?');  sb.append(c);	      	compilable	  [FE]  ComparisonFailure  	14	1	replace
217	[BUG]  [BUGGY]  sb.append('?');  sb.append(c);  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('?');  sb.append(c);  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('?');  sb.append(c);	      	compilable	  [FE]  ComparisonFailure  	14	1	replace
218	[BUG]  [BUGGY]  sb.append(':');  sb.append(block.charAt(i));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append(':');  sb.append(block.charAt(i));  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append(':');  sb.append(block.charAt(i));	      	non-compiled	[CE]  cannot  find  symbol	14	None	replace
219	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
220	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
221	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
222	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('#');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
223	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
224	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(c);  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
225	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
226	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
228	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
229	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
230	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(']');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
231	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	add	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
232	[BUG]  [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]    public  static  String  sanitize(String  s)  {  final  char[]  chars  =  s.toCharArray();  final  int  len  =  chars.length;  final  StringBuilder  sb  =  new  StringBuilder();  for  (int  i  =  0;  i  <  len;  i++)  {  final  char  c  =  chars[i];  if  (!Character.isISOControl(c))  {  Character.UnicodeBlock  block  =  Character.UnicodeBlock.of(c);  if  (block  !=  null  &&  block  !=  Character.UnicodeBlock.SPECIALS)  {    [BUGGY]  sb.append('/');  if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }  [BUGGY]    continue;  }  }  sb.append('?');  }  return  sb.toString();  }  [CLASS]  ArchiveUtils  [METHOD]  sanitize  [RETURN_TYPE]  String  String  s  [VARIABLES]  boolean  StringBuilder  sb  UnicodeBlock  block  char  c  String  s  int  i  len  char[]  chars  	projects/Compress39/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java	1.0	281	281	1	replace	sb.append('/');    if(sb!=  null)  {  sb.append('/');  }  else  {  sb.append(':');  }	  	compilable	  [FE]  ComparisonFailure  	7	1	add
